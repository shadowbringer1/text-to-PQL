{
    "software_PSI": "-- 对ida_en_one平台的m_enterprise_1w表和ida_en_two平台的m_security_1w表通过id字段进行隐私求交并查询交集信息\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,使用字段（id)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n   SELECT -- 设置想要查询的内容，格式：参与方平台id.数据产品英文名.字段名\n      ida_en_one.m_enterprise_1w.balance\n    FROM -- 设置所用到的数据来源于哪些数据产品。格式：参与方平台id.数据产品英文名\n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE -- 设置关联主键，例子：通过id列将两个表关联起来，条件是两个表中的id值相等\n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 对ida_en_one平台的m_enterprise_1w表、zh_ldp_A表和ida_en_two平台的m_security_1w表通过id字段进行隐私求交并查询交集信息\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,使用字段（id)，zh_ldp_A,使用字段（id）\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT\n      ida_en_one.zh_ldp_A.id\n    FROM \n      ida_en_one.zh_ldp_A,\n      ida_en_one.m_enterprise_1w,\n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.zh_ldp_A.id = ida_en_one.m_enterprise_1w.id\n      AND ida_en_one.zh_ldp_A.id = ida_en_two.m_security_1w.id\n\n\n-- 对ida_en_one平台的m_enterprise_1w表和ida_en_two平台的m_security_1w表通过id字段进行隐私求交并查询交集信息\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,使用字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n   SELECT\n      ida_en_one.m_enterprise_1w.balance,\n\t ida_en_two.m_security_1w.balance\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 对ida_en_one平台的m_enterprise_1w表和ida_en_two平台的m_security_1w表通过id字段进行隐私求交并查询交集信息\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance,name,address,purpose,time,remarks,socialid); m_security_1w,使用字段（id,balance,name,address,purpose,time,remarks,socialid)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      ida_en_one.m_enterprise_1w.id,\n      ida_en_two.m_security_1w.id,\n      ida_en_one.m_enterprise_1w.balance,\n      ida_en_two.m_security_1w.balance,\n      ida_en_one.m_enterprise_1w.name,\n      ida_en_two.m_security_1w.name,\n      ida_en_one.m_enterprise_1w.adress,\n      ida_en_two.m_security_1w.adress,\n      ida_en_one.m_enterprise_1w.phone,\n      ida_en_two.m_security_1w.phone,\n      ida_en_one.m_enterprise_1w.purpose,\n      ida_en_two.m_security_1w.purpose,\n      ida_en_one.m_enterprise_1w.time,\n      ida_en_two.m_security_1w.time,\n      ida_en_one.m_enterprise_1w.remarks,\n      ida_en_two.m_security_1w.remarks,\n      ida_en_one.m_enterprise_1w.socialid,\n      ida_en_two.m_security_1w.socialid\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n--先进行子查询：对ida_en_one平台的m_enterprise_1w表以socialid进行分组，查询socialid，count(balance)，sum(balance)，将子查询作为临时表tmp_inner。再进行第二次子查询：查询tmp_inner中的socialid,cnt,tot_val作为临时表tmp_table。再对ida_en_one平台的m_enterprise_1w表和ida_en_two平台的m_security_1w表以及tmp_table通过socailid字段进行隐私求交并查询交集信息\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（balance,socialid); m_security_1w,使用字段（balance,socialid)，tmp_table使用字段（balance,socialid）\n-- 关联主键：ida_en_one.m_enterprise_1w.socialid，ida_en_two.m_security_1w.socialid, tmp_table.socialid\nSQL:\n    SELECT \n      ida_en_one.m_enterprise_1w.balance,\n      tmp_table.socialid\n    FROM\n    ida_en_one.m_enterprise_1w,\n    ida_en_two.m_security_1w,\n      (\n      SELECT\n      socialid,\n      cnt,\n      tot_val \n      FROM\n      ( SELECT socialid, count( balance ) AS cnt, sum( balance ) AS tot_val FROM ida_en_one.m_enterprise_1w GROUP BY socialid ) tmp_inner \n      ) tmp_table \n    WHERE\n      ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid\n      AND tmp_table.socialid = ida_en_two.m_security_1w.socialid",
    "software_MPC": "-- 从ida_en_one平台的m_enterprise_1w表中安全计算balance字段的数量，最大值，平均值。 \n-- 参与方平台id：ida_en_one\n-- 数据产品英文名：ida_en_one,使用字段（balance)\n-- 关联主键：无\nSQL:\n    SELECT -- 设置计算函数，例如：count（累加），max（找最大值），avg（算平均值）\n      count(ida_en_one.m_enterprise_1w.balance),\n      max(ida_en_one.m_enterprise_1w.balance),\n      avg(ida_en_one.m_enterprise_1w.balance)\n    FROM\n      ida_en_one.m_enterprise_1w;\n\n\n-- 当ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同时，使用多方安全计算两表的id,balance,socialid字段的加权和\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance,socialid); m_security_1w,字段（id,balance,socialid)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      ida_en_one.m_enterprise_1w.id,\n      (0.1*ida_en_one.m_enterprise_1w.balance) +\n      (0.2*ida_en_two.m_security_1w.balance) +\n      (0.1*ida_en_one.m_enterprise_1w.socialid) +\n      (0.4*ida_en_two.m_security_1w.socialid)\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 使用多方安全计算对ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同行的balance字段的乘积作求和\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      SUM(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance)\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 当ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同时，使用多方安全计算两表的balance字段的和\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      ida_en_one.m_enterprise_1w.balance + ida_en_two.m_security_1w.balance\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 当ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同时，使用多方安全计算两表的balance字段的差\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      ida_en_one.m_enterprise_1w.balance - ida_en_two.m_security_1w.balance\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 当ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同时，使用多方安全计算两表的balance字段的商\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      ida_en_one.m_enterprise_1w.balance/ida_en_two.m_security_1w.balance\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 使用多方安全计算对ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同行的balance字段的乘积作求平均值\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      AVG(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance)\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 使用多方安全计算对ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同行的balance字段的乘积求最大值\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      MAX(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance)\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 使用多方安全计算对ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同行的balance字段的乘积计数\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      COUNT(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance)\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n-- 使用多方安全计算对ida_en_one平台的m_enterprise_1w表中id和ida_en_two平台的m_security_1w表中id值相同行的balance字段的乘积求最小值\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,字段（id,balance)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT \n      MIN(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance)\n    FROM \n      ida_en_one.m_enterprise_1w, \n      ida_en_two.m_security_1w\n    WHERE \n      ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id\n\n\n--先进行子查询：对ida_en_one平台的m_enterprise_1w表以socialid进行分组，查询socialid，count(balance)，sum(balance)，将子查询作为临时表tmp_inner。再进行第二次子查询：查询tmp_inner中的socialid,cnt,tot_val作为临时表tmp_table。再当ida_en_one平台的m_enterprise_1w表和ida_en_two平台的m_security_1w表以及tmp_table通过socailid字段相等时进行多方安全计算，获取m_enterprise_1w的balance值，以及tmp_table的socialid的二倍加1的值\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（balance,socialid); m_security_1w,使用字段（balance,socialid)，tmp_table使用字段（balance,socialid）\n-- 关联主键：ida_en_one.m_enterprise_1w.socialid，ida_en_two.m_security_1w.socialid, tmp_table.socialid\nSQL:\n    SELECT \n      ida_en_one.m_enterprise_1w.balance,\n      tmp_table.socialid*2 + 1\n    FROM \n      ida_en_one.m_enterprise_1w,\n      ida_en_two.m_security_1w,\n      (\n      select\n          socialid,\n          cnt,\n          tot_val\n      from\n        (\n        select\n          socialid,\n          count(balance) as cnt,\n          sum(balance) as tot_val\n        from\n          ida_en_one.m_enterprise_1w\n        group by socialid\n        )tmp_inner\n      )tmp_table\n    WHERE \n      ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid\n      AND tmp_table.socialid = ida_en_one.m_enterprise_1w.socialid",
    "software_PIR": "-- 设置参数param1，当ida_en_one平台的m_enterprise_1w表中id和param1值相同时输出m_enterprise_1w表的balance列和socialid列\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,字段（id,balance,socialid)\n-- 关联主键：ida_en_one.m_enterprise_1w.id，param1\nSQL:\n    SET\n        param1 = ?;\n\n    SELECT\n        ida_en_one.m_enterprise_1w.balance,\n        ida_en_one.m_enterprise_1w.socialid\n    FROM\n        ida_en_one.m_enterprise_1w\n    WHERE\n        ida_en_one.m_enterprise_1w.id = param1",
    "hardware_PSI": "-- 使用TEE硬件的方式，对ida_en_one平台的m_enterprise_1w表和ida_en_two平台的m_security_1w表通过id字段进行隐私求交并查询交集信息\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,使用字段（id)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT\n        /*+ JOIN(TEE) */\n        ida_en_one.m_enterprise_1w.balance\n    FROM \n        ida_en_one.m_enterprise_1w, \n        ida_en_two.m_security_1w\n    WHERE \n        ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id \n-- 对ida_en_one平台的m_enterprise_1w表、zh_ldp_A表和ida_en_two平台的m_security_1w表通过id字段进行隐私求交并查询交集信息\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance); m_security_1w,使用字段（id)，zh_ldp_A,使用字段（id）\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    SELECT\n        /*+ JOIN(TEE) */\n        ida_en_one.zh_ldp_A.id\n    FROM \n        ida_en_one.zh_ldp_A,\n        ida_en_one.m_enterprise_1w,\n        ida_en_two.m_security_1w\n    WHERE \n        ida_en_one.zh_ldp_A.id = ida_en_one.m_enterprise_1w.id\n        AND ida_en_one.zh_ldp_A.id = ida_en_two.m_security_1w.id",
    "hardware_MPC": "-- 使用TEE硬件的方式，将ida_en_one的m_enterprise_1w表和ida_en_two的m_security_1w表的数据对齐进行计算\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id); m_security_1w,使用字段（id)，\n-- 关联主键：无\nSQL:\n    set tee.ida_en_one.m_enterprise_1w.orderby = id;\n    set tee.ida_en_one.m_enterprise_1w.packagesize = 100;\n\n    set tee.ida_en_two.m_security_1w.packagesize = 100;\n    set tee.ida_en_two.m_security_1w.orderby = id;\n\n    select\n        /*+ FUNC(TEE) */\n        mulonly02(\n            key = ida_en_one.m_enterprise_1w.id,\n            a = ida_en_one.m_enterprise_1w.id, \n            b = ida_en_two.m_security_1w.id)\n    from\n        ida_en_one.m_enterprise_1w,\n        ida_en_two.m_security_1w \n-- 使用TEE硬件的方式，当ida_en_one的m_enterprise_1w表和ida_en_two的m_security_1w表的id相同时，计算m_enterprise_1w.id与m_security_1w.id的乘积\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id); m_security_1w,使用字段（id)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    set tee.ida_en_one.m_enterprise_1w.orderby = id;\n    set tee.ida_en_one.m_enterprise_1w.packagesize = 100;\n\n    set tee.ida_en_two.m_security_1w.packagesize = 100;\n    set tee.ida_en_two.m_security_1w.orderby = id;\n\n    select\n        /*+ FUNC(TEE) JOIN(TEE) */\n        mulonly02(\n            key = ida_en_one.m_enterprise_1w.id,\n            a = ida_en_one.m_enterprise_1w.id, \n            b = ida_en_two.m_security_1w.id)\n    from\n        ida_en_one.m_enterprise_1w,\n        ida_en_two.m_security_1w\n    where\n        ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id \n-- 先使用软件方式，求ida_en_one的m_enterprise_1w表和ida_en_two的m_security_1w表的id相同时的交集，再使用硬件tee计算m_enterprise_1w.id与m_security_1w.id的乘积\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,使用字段（id); m_security_1w,使用字段（id)，\n-- 关联主键：ida_en_one.m_enterprise_1w.id，ida_en_two.m_security_1w.id\nSQL:\n    set tee.ida_en_one.m_enterprise_1w.orderby = id;\n    set tee.ida_en_one.m_enterprise_1w.packagesize = 100;\n\n    set tee.ida_en_two.m_security_1w.packagesize = 100;\n    set tee.ida_en_two.m_security_1w.orderby = id;\n\n    select\n        /*+ FUNC(TEE) */\n        mulonly02(\n            key = ida_en_one.m_enterprise_1w.id,\n            a = ida_en_one.m_enterprise_1w.id, \n            b = ida_en_two.m_security_1w.id)\n    from\n        ida_en_one.m_enterprise_1w,\n        ida_en_two.m_security_1w\n    where\n        ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id",
    "hardware_PIR": "-- 设置参数param1，使用TEE硬件的方式，当ida_en_one平台的m_enterprise_1w表中id和param1值相同时输出m_enterprise_1w表的balance列和socialid列\n-- 参与方平台id：ida_en_one, ida_en_two\n-- 数据产品英文名：m_enterprise_1w,字段（id,balance,socialid)\n-- 关联主键：ida_en_one.m_enterprise_1w.id，param1\nSQL:\n    SET\n      param1 = ?;\n\n    SELECT\n      /*+ FILTER(TEE) */\n      ida_en_one.m_enterprise_1w.balance,\n      ida_en_one.m_enterprise_1w.socialid\n    FROM\n      ida_en_one.m_enterprise_1w\n    WHERE\n      ida_en_one.m_enterprise_1w.id = param1",
    "hardware_PIRMPC": "-- 设置参数t1和t2，使用TEE硬件的方式，当ida_en_one平台的m_enterprise_1w表中id和t1值相同时输出m_enterprise_1w表的balance和t2相加的值\n-- 参与方平台id：ida_en_one,\n-- 数据产品英文名：m_enterprise_1w,使用字段（id,balance)\n-- 关联主键：ida_en_one.m_enterprise_1w.id，param1\nSQL:\n    SET\n      t1 = ?;\n\n    SET\n      t2 = ?;\n\n    SELECT  -- 设置计算函数，将ida_en_one的m_enterprise_1w表的id值等于t1的行都取出，再将其中的balance字段的值与t2计算，例子中pirmpc001函数用于计算求和\n      /*+ FULLY_COV(TEE) */\n      pirmpc001(\n        ida_en_one.m_enterprise_1w.balance,\n        t2\n      )\n    FROM\n      ida_en_one.m_enterprise_1w\n    WHERE\n      ida_en_one.m_enterprise_1w.id = t1",
    "Federated_learning": "-- 当plat1平台的atest表中id和plat2平台的btest表中id值相同时，使用plat2.btest表的y列为标签，plat1.atest表和plat2.btest表的所有列为特征值，进行HELR联邦学习训练。\n-- 参与方平台id：plat1,plat2\n-- 数据产品英文名：atest,字段（id,a1,a2);btest,字段（id,y)，\n-- 关联主键：atest.id，btest.id\nSQL:\nSELECT \n    /*+ JOIN(FL) */  --  指定联邦学习在进行纵向学习的时采用FL的PSI，可选\n    TRAIN(model_name=HELR,  -- 设置训练方式，目前支持'HELR'和'HESB'\n          label=plat2.btest.y,  -- 设置标签，格式：label=平台id.数据产品英文名.字段名。\n          features=[plat1.atest.*, plat2.btest.*])  -- 设置特征值，格式：features=平台id.数据产品英文名.字段名。多个特征提供方用[]关联，*表示所有列。\nFROM -- 设置所用到的数据来源于哪些数据产品。格式：平台id.数据产品英文名\n    plat1.atest,  \n    plat2.btest   \nWHERE -- 设置关联主键，例子：通过id列将两个表关联起来，条件是两个表中的id值相等\nplat1.atest.id = plat2.btest.id;\n\n另外，联邦学习支持特征工程，以及特征工程+联邦训练+评估\n\n联邦学习带参数 （params可选）\nSELECT \nTRAIN(\nmodel_name=HESB,\nlabel=B.y, \nparams=(num_trees=3,max_depth=3,learning_rate=0.2))\n \t\t\tFrom A, B WHERE A.id = B.id\n\n联邦预测\nSELECT \nPREDICT(\nmodel_name=HESB, \nmodel_guest=B，\nmodel_id=202303231004509428550) \nFrom A, B WHERE A.id = B.id\n\n特征工程+联邦训练\nSELECT \nSequence( \nFE(model_name=HESCALE,label=B.y), \nTRAIN(model_name=HELR,label=B.y) ） \nFrom A, B WHERE A.id = B.id\n\n联邦训练+ 评估\nSELECT \nSequence(\n TRAIN(model_name=HELR,label=B.y),\n EVAL(default_eval_setting=binary) ） \nFrom A, B WHERE A.id = B.id"
}
  