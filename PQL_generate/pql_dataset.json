{
  "software_PSI": [
    {
      "question": "Can we find all users from the ida_en_one platform's m_enterprise_1w table who also exist in the ida_en_two platform's m_security_1w table using the id column?",
      "Chinese_question": "如何找到ida_en_one平台的m_enterprise_1w表中也存在于ida_en_two平台m_security_1w表的用户,使用id字段?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "How can we retrieve the overlapping ids from the m_enterprise_1w table on ida_en_one with the m_security_1w table on ida_en_two using the id field?",
      "Chinese_question": "我们如何通过id字段获取ida_en_one平台的m_enterprise_1w表与ida_en_two平台的m_security_1w表的重叠ids?",
      "PQL_query": "SELECT ida_en_one.zh_ldp_A.id FROM ida_en_one.zh_ldp_A, ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.zh_ldp_A.id = ida_en_one.m_enterprise_1w.id AND ida_en_one.zh_ldp_A.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "Using the ids, how can we securely compute the intersection of balances from ida_en_one's m_enterprise_1w and ida_en_two's m_security_1w?",
      "Chinese_question": "我们如何利用id字段安全地计算ida_en_one平台的m_enterprise_1w和ida_en_two平台的m_security_1w中的余额交集?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_two.m_security_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "What are the common attributes of records present in both m_enterprise_1w from ida_en_one and m_security_1w from ida_en_two using ids?",
      "Chinese_question": "在使用id字段的情况下,ida_en_one平台的m_enterprise_1w和ida_en_two平台的m_security_1w中同时存在的记录有什么共同属性?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, ida_en_two.m_security_1w.id, ida_en_one.m_enterprise_1w.balance, ida_en_two.m_security_1w.balance, ida_en_one.m_enterprise_1w.name, ida_en_two.m_security_1w.name, ida_en_one.m_enterprise_1w.adress, ida_en_two.m_security_1w.adress, ida_en_one.m_enterprise_1w.phone, ida_en_two.m_security_1w.phone, ida_en_one.m_enterprise_1w.purpose, ida_en_two.m_security_1w.purpose, ida_en_one.m_enterprise_1w.time, ida_en_two.m_security_1w.time, ida_en_one.m_enterprise_1w.remarks, ida_en_two.m_security_1w.remarks, ida_en_one.m_enterprise_1w.socialid, ida_en_two.m_security_1w.socialid FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "How can we securely intersect the records based on socialid from ida_en_one's m_enterprise_1w with a temporary result table?",
      "Chinese_question": "我们如何基于socialid从ida_en_one的平台的m_enterprise_1w与临时结果表进行安全求交?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, tmp_table.socialid FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w, (SELECT socialid, cnt, tot_val FROM (SELECT socialid, count(balance) AS cnt, sum(balance) AS tot_val FROM ida_en_one.m_enterprise_1w GROUP BY socialid) tmp_inner) tmp_table WHERE ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid AND tmp_table.socialid = ida_en_two.m_security_1w.socialid"
    },
    {
      "question": "Find the intersection of user data such as name and balance from the m_enterprise_1w table and the m_security_1w table using the id field.",
      "Chinese_question": "通过id字段查找m_enterprise_1w表和m_security_1w表中的用户数据如姓名和余额交集。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.name, ida_en_one.m_enterprise_1w.balance, ida_en_two.m_security_1w.name, ida_en_two.m_security_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "Which users have matching social IDs in both the m_enterprise_1w and m_security_1w tables?",
      "Chinese_question": "哪些用户在m_enterprise_1w和m_security_1w表中有匹配的社会ID?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.name, ida_en_two.m_security_1w.socialid, ida_en_two.m_security_1w.name FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid"
    },
    {
      "question": "Determine the combined information for entries in both the ida_en_one and ida_en_two platforms with the same socialid.",
      "Chinese_question": "确定ida_en_one和ida_en_two平台中具有相同socialid的条目的综合信息。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.balance, ida_en_two.m_security_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid"
    },
    {
      "question": "Retrieve overlapping information by secure intersection on id from m_enterprise_1w of ida_en_one and m_security_1w of ida_en_two.",
      "Chinese_question": "通过对ida_en_one平台的m_enterprise_1w和ida_en_two平台的m_security_1w进行id字段的安全交集,检索重叠信息。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, ida_en_two.m_security_1w.id FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "How can we compute overlapping entries for m_enterprise_1w and m_security_1w tables with the shared id key?",
      "Chinese_question": "我们如何利用共享的id键计算m_enterprise_1w和m_security_1w表的重叠条目?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, ida_en_one.m_enterprise_1w.balance, ida_en_two.m_security_1w.id, ida_en_two.m_security_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "Identify users having the same balance in both platforms using the m_enterprise_1w and m_security_1w tables.",
      "Chinese_question": "识别在使用m_enterprise_1w和m_security_1w表的两个平台中具有相同余额的用户。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, ida_en_two.m_security_1w.id, ida_en_one.m_enterprise_1w.balance, ida_en_two.m_security_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.balance = ida_en_two.m_security_1w.balance"
    },
    {
      "question": "Extract combined ids from the m_enterprise_1w and m_security_1w using shared socialid.",
      "Chinese_question": "使用共享的socialid从m_enterprise_1w和m_security_1w中提取组合的ids。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_two.m_security_1w.socialid FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid"
    },
    {
      "question": "Which customer records intersect in both the m_enterprise_1w and m_security_1w using the id field on ida_en_two?",
      "Chinese_question": "在ida_en_two平台上,通过id字段定位,哪些客户记录在m_enterprise_1w和m_security_1w中相交?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, ida_en_two.m_security_1w.id, ida_en_one.m_enterprise_1w.name FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "How do we filter out users present in both ida_en_one's m_enterprise_1w and ida_en_two's m_security_1w tables?",
      "Chinese_question": "我们如何过滤出同时存在于ida_en_one的m_enterprise_1w和ida_en_two的m_security_1w表中的用户?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, ida_en_two.m_security_1w.id, ida_en_one.m_enterprise_1w.phone FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "Fetch the common user data from m_enterprise_1w and m_security_1w identified by id attribute.",
      "Chinese_question": "通过id属性获取m_enterprise_1w和m_security_1w的常用用户数据。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, ida_en_two.m_security_1w.id, ida_en_one.m_enterprise_1w.remarks FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "Validate intersection of entries in ida_en_one and ida_en_two using socialid as the joining field.",
      "Chinese_question": "使用socialid作为连接字段,验证ida_en_one和ida_en_two中的条目交集。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_two.m_security_1w.socialid FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid"
    },
    {
      "question": "Identify overlapping entries in ida_en_one and ida_en_two using a temporary table processed by socialid.",
      "Chinese_question": "利用socialid处理的临时表标识ida_en_one和ida_en_two中的重叠条目。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, tmp_table.socialid FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w, (SELECT socialid, cnt, tot_val FROM (SELECT socialid, count(balance) AS cnt, sum(balance) AS tot_val FROM ida_en_one.m_enterprise_1w GROUP BY socialid) tmp_inner) tmp_table WHERE ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid AND tmp_table.socialid = ida_en_two.m_security_1w.socialid"
    },
    {
      "question": "Can we accurately match users with the same phone numbers in both the m_enterprise_1w and m_security_1w tables?",
      "Chinese_question": "我们能否准确匹配同时在m_enterprise_1w和m_security_1w表中有相同电话号码的用户?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.phone, ida_en_two.m_security_1w.phone FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.phone = ida_en_two.m_security_1w.phone"
    },
    {
      "question": "Determine the intersection of user remarks in the ida_en_one and ida_en_two tables using id.",
      "Chinese_question": "通过id确定ida_en_one和ida_en_two表中用户备注的交集。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.remarks, ida_en_two.m_security_1w.remarks FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "Using secure computation, retrieve common time attributes from m_enterprise_1w and m_security_1w.",
      "Chinese_question": "使用安全计算,从m_enterprise_1w和m_security_1w中检索共同的时间属性。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.time, ida_en_two.m_security_1w.time FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id"
    },
    {
      "question": "How can we match users between ida_A platform's user_data table and ida_B platform's activity_logs table using the unique_id field?",
      "Chinese_question": "如何使用unique_id字段来匹配ida_A平台的user_data表和ida_B平台的activity_logs表中的用户?",
      "PQL_query": "SELECT ida_A.user_data.unique_id FROM ida_A.user_data, ida_B.activity_logs WHERE ida_A.user_data.unique_id = ida_B.activity_logs.unique_id"
    },
    {
      "question": "Is it possible to perform a privacy-preserving intersection of email addresses from the communications table on the platform_comm_one and the contacts table on the platform_comm_two?",
      "Chinese_question": "可以对platform_comm_one平台的communications表和platform_comm_two平台的contacts表进行邮箱地址的隐私求交吗?",
      "PQL_query": "SELECT platform_comm_one.communications.email FROM platform_comm_one.communications, platform_comm_two.contacts WHERE platform_comm_one.communications.email = platform_comm_two.contacts.email"
    },
    {
      "question": "How can we obtain the total purchase amounts for users in the sales_records table from the ida_sales platform and in the payment_history table from the ida_pay platform, using the customer_id?",
      "Chinese_question": "如何使用customer_id获取ida_sales平台sales_records表和ida_pay平台payment_history表中用户的总购买金额?",
      "PQL_query": "SELECT ida_sales.sales_records.total_purchase FROM ida_sales.sales_records, ida_pay.payment_history WHERE ida_sales.sales_records.customer_id = ida_pay.payment_history.customer_id"
    },
    {
      "question": "Could we compute the intersection of account numbers from the ida_account platform's accounts table and ida_finance platform's billing table using the account_id field?",
      "Chinese_question": "我们可以使用account_id字段来计算ida_account平台的accounts表和ida_finance平台billing表的账号交集吗?",
      "PQL_query": "SELECT ida_account.accounts.account_id FROM ida_account.accounts, ida_finance.billing WHERE ida_account.accounts.account_id = ida_finance.billing.account_id"
    },
    {
      "question": "Is it feasible to find common transaction IDs between the ida_trans platform's transactions table and the ida_bank platform's records table using the trans_id field?",
      "Chinese_question": "是否可以通过trans_id字段找到ida_trans平台transactions表和ida_bank平台records表之间的共同交易ID?",
      "PQL_query": "SELECT ida_trans.transactions.trans_id FROM ida_trans.transactions, ida_bank.records WHERE ida_trans.transactions.trans_id = ida_bank.records.trans_id"
    },
    {
      "question": "Can we derive a privacy-preserving set of user IDs that are present in both the ida_edu platform's enrollments table and ida_course platform's registrations table using uid?",
      "Chinese_question": "能否使用uid字段从ida_edu平台的enrollments表和ida_course平台的registrations表中导出一个隐私保护的用户集?",
      "PQL_query": "SELECT ida_edu.enrollments.uid FROM ida_edu.enrollments, ida_course.registrations WHERE ida_edu.enrollments.uid = ida_course.registrations.uid"
    },
    {
      "question": "How can we identify overlapping customer systems using customer_id between ida_customer platform's customer_info table and ida_service platform's service_log table?",
      "Chinese_question": "如何使用customer_id在ida_customer平台的customer_info表和ida_service平台的service_log表之间识别重叠客户?",
      "PQL_query": "SELECT ida_customer.customer_info.customer_id FROM ida_customer.customer_info, ida_service.service_log WHERE ida_customer.customer_info.customer_id = ida_service.service_log.customer_id"
    },
    {
      "question": "Would it be possible to securely intersect employee IDs from the ida_hr platform's employee_data table and ida_office platform's attendance table using emp_id?",
      "Chinese_question": "是否可以通过emp_id字段对ida_hr平台的employee_data表和ida_office平台的attendance表进行员工ID的安全求交?",
      "PQL_query": "SELECT ida_hr.employee_data.emp_id FROM ida_hr.employee_data, ida_office.attendance WHERE ida_hr.employee_data.emp_id = ida_office.attendance.emp_id"
    },
    {
      "question": "How can we perform a privacy-preserving union of product IDs from the ida_shop platform's inventory table and ida_market platform's sales table using product_code?",
      "Chinese_question": "如何使用product_code在ida_shop平台的inventory表和ida_market平台的sales表中执行产品ID的隐私保护联合?",
      "PQL_query": "SELECT ida_shop.inventory.product_code FROM ida_shop.inventory, ida_market.sales WHERE ida_shop.inventory.product_code = ida_market.sales.product_code"
    },
    {
      "question": "Is it possible to capture intersection details of library_card numbers between ida_library platform's member_list table and ida_bookstore platform's purchase_history table using card_no?",
      "Chinese_question": "可以通过card_no字段捕获ida_library平台的member_list表和ida_bookstore平台的purchase_history表之间图书馆卡号的交集细节吗?",
      "PQL_query": "SELECT ida_library.member_list.card_no FROM ida_library.member_list, ida_bookstore.purchase_history WHERE ida_library.member_list.card_no = ida_bookstore.purchase_history.card_no"
    },
    {
      "question": "Could we use the order_id field to find overlapping orders made on ida_order platform's order_details table and ida_invoice platform's invoice_records table?",
      "Chinese_question": "我们可以使用order_id字段在ida_order平台的order_details表和ida_invoice平台的invoice_records表中找到重叠的订单吗?",
      "PQL_query": "SELECT ida_order.order_details.order_id FROM ida_order.order_details, ida_invoice.invoice_records WHERE ida_order.order_details.order_id = ida_invoice.invoice_records.order_id"
    },
    {
      "question": "How can we execute a privacy-preserving intersection on device IDs from the ida_device platform's device_table and ida_network platform's network_logs using the device_id field?",
      "Chinese_question": "如何使用device_id字段在ida_device平台的device_table和ida_network平台的network_logs中执行设备ID的隐私求交?",
      "PQL_query": "SELECT ida_device.device_table.device_id FROM ida_device.device_table, ida_network.network_logs WHERE ida_device.device_table.device_id = ida_network.network_logs.device_id"
    },
    {
      "question": "Can we determine shared project identifiers between ida_proj platform's project_registry table and ida_data platform's dataset_records table using proj_id?",
      "Chinese_question": "能否使用proj_id字段确定ida_proj平台的project_registry表和ida_data平台的dataset_records表之间共享的项目标识符?",
      "PQL_query": "SELECT ida_proj.project_registry.proj_id FROM ida_proj.project_registry, ida_data.dataset_records WHERE ida_proj.project_registry.proj_id = ida_data.dataset_records.proj_id"
    },
    {
      "question": "Could we match company names in a privacy-preserving manner from ida_corp platform's company_info table and ida_industry platform's field_data table using company_id?",
      "Chinese_question": "可以使用company_id通过ida_corp平台的company_info表和ida_industry平台的field_data表以隐私保护的方式匹配公司名称吗?",
      "PQL_query": "SELECT ida_corp.company_info.company_id FROM ida_corp.company_info, ida_industry.field_data WHERE ida_corp.company_info.company_id = ida_industry.field_data.company_id"
    },
    {
      "question": "Is it feasible to compute the privacy-preserving overlap of student IDs from ida_school platform's student_records table and ida_exam platform's exam_results table using stud_id?",
      "Chinese_question": "是否可以通过stud_id字段计算ida_school平台student_records表和ida_exam平台exam_results表之间的学生ID隐私重叠?",
      "PQL_query": "SELECT ida_school.student_records.stud_id FROM ida_school.student_records, ida_exam.exam_results WHERE ida_school.student_records.stud_id = ida_exam.exam_results.stud_id"
    },
    {
      "question": "How can we identify common product_ids between the ida_retail platform's stock_data table and ida_supplier platform's supply_records table using item_code?",
      "Chinese_question": "如何使用item_code识别ida_retail平台stock_data表和ida_supplier平台supply_records表之间的公共产品ID?",
      "PQL_query": "SELECT ida_retail.stock_data.item_code FROM ida_retail.stock_data, ida_supplier.supply_records WHERE ida_retail.stock_data.item_code = ida_supplier.supply_records.item_code"
    },
    {
      "question": "Can we execute a privacy-preserving intersection of travel IDs from ida_trip platform's itinerary table and ida_tour platform's booking_log using travel_id field?",
      "Chinese_question": "可以通过travel_id字段在ida_trip平台的itinerary表和ida_tour平台的booking_log中执行旅行ID的隐私求交吗?",
      "PQL_query": "SELECT ida_trip.itinerary.travel_id FROM ida_trip.itinerary, ida_tour.booking_log WHERE ida_trip.itinerary.travel_id = ida_tour.booking_log.travel_id"
    },
    {
      "question": "Is it possible to secure the intersection of flight numbers between ida_av platform's flight_schedule table and ida_air platform's ticket_sales table using flight_no?",
      "Chinese_question": "是否可以通过flight_no字段安全求交ida_av平台flight_schedule表和ida_air平台ticket_sales表之间的航班号?",
      "PQL_query": "SELECT ida_av.flight_schedule.flight_no FROM ida_av.flight_schedule, ida_air.ticket_sales WHERE ida_av.flight_schedule.flight_no = ida_air.ticket_sales.flight_no"
    },
    {
      "question": "Could we identify overlapping session IDs from ida_web platform's session_data table and ida_event platform's event_logs using the session_id?",
      "Chinese_question": "可以使用session_id来识别ida_web平台的session_data表和ida_event平台event_logs表中重叠的会话ID吗?",
      "PQL_query": "SELECT ida_web.session_data.session_id FROM ida_web.session_data, ida_event.event_logs WHERE ida_web.session_data.session_id = ida_event.event_logs.session_id"
    },
    {
      "question": "How can we find shared admission IDs using admit_id between ida_hospital platform's patient_admissions and ida_clinic platform's clinic_visits?",
      "Chinese_question": "如何使用admit_id在ida_hospital平台的patient_admissions和ida_clinic平台的clinic_visits中找到共享入院ID?",
      "PQL_query": "SELECT ida_hospital.patient_admissions.admit_id FROM ida_hospital.patient_admissions, ida_clinic.clinic_visits WHERE ida_hospital.patient_admissions.admit_id = ida_clinic.clinic_visits.admit_id"
    },
    {
      "question": "What are the average balances of accounts that have the same client_id in both ida_en_three's client_info and ida_en_four's client_financials?",
      "Chinese_question": "如何查询ida_en_three平台的client_info表和ida_en_four平台的client_financials表中具有相同client_id的账户平均余额?",
      "PQL_query": "SELECT AVG(ida_en_three.client_info.balance) FROM ida_en_three.client_info, ida_en_four.client_financials WHERE ida_en_three.client_info.client_id = ida_en_four.client_financials.client_id"
    },
    {
      "question": "Can we securely join ida_en_five's transaction_history with ida_en_six's asset_records using the transaction_id field?",
      "Chinese_question": "是否可以通过transaction_id字段安全地连接ida_en_five平台的transaction_history表和ida_en_six平台的asset_records表?",
      "PQL_query": "SELECT ida_en_five.transaction_history.transaction_id FROM ida_en_five.transaction_history, ida_en_six.asset_records WHERE ida_en_five.transaction_history.transaction_id = ida_en_six.asset_records.transaction_id"
    },
    {
      "question": "Identify shared email addresses between ida_en_seven's user_base and ida_en_eight's contact_list.",
      "Chinese_question": "标识ida_en_seven平台的user_base表和ida_en_eight平台的contact_list表中共享的电子邮件地址。",
      "PQL_query": "SELECT ida_en_seven.user_base.email FROM ida_en_seven.user_base, ida_en_eight.contact_list WHERE ida_en_seven.user_base.email = ida_en_eight.contact_list.email"
    },
    {
      "question": "Retrieve intersection of order_id records from ida_en_nine's purchase_orders and ida_en_ten's shipping_details.",
      "Chinese_question": "从ida_en_nine平台的purchase_orders表和ida_en_ten平台的shipping_details表中检索order_id记录的交集。",
      "PQL_query": "SELECT ida_en_nine.purchase_orders.order_id FROM ida_en_nine.purchase_orders, ida_en_ten.shipping_details WHERE ida_en_nine.purchase_orders.order_id = ida_en_ten.shipping_details.order_id"
    },
    {
      "question": "Find overlapping account_numbers in ida_en_eleven's accounts and ida_en_twelve's ledger.",
      "Chinese_question": "查找ida_en_eleven平台的accounts表和ida_en_twelve平台的ledger表中重叠的account_numbers。",
      "PQL_query": "SELECT ida_en_eleven.accounts.account_number FROM ida_en_eleven.accounts, ida_en_twelve.ledger WHERE ida_en_eleven.accounts.account_number = ida_en_twelve.ledger.account_number"
    },
    {
      "question": "Securely compute shared customer_ids between ida_en_thirteen's sales_data and ida_en_fourteen's customer_records.",
      "Chinese_question": "安全计算ida_en_thirteen平台的sales_data表和ida_en_fourteen平台的customer_records表之间共享的customer_ids。",
      "PQL_query": "SELECT ida_en_thirteen.sales_data.customer_id FROM ida_en_thirteen.sales_data, ida_en_fourteen.customer_records WHERE ida_en_thirteen.sales_data.customer_id = ida_en_fourteen.customer_records.customer_id"
    },
    {
      "question": "Merge and intersect product_ids between ida_en_fifteen's inventory and ida_en_sixteen's catalog securely.",
      "Chinese_question": "安全地合并和交叉ida_en_fifteen平台的inventory表和ida_en_sixteen平台的catalog表中的product_ids。",
      "PQL_query": "SELECT ida_en_fifteen.inventory.product_id FROM ida_en_fifteen.inventory, ida_en_sixteen.catalog WHERE ida_en_fifteen.inventory.product_id = ida_en_sixteen.catalog.product_id"
    },
    {
      "question": "Determine common vendor_ids between ida_en_seventeen's vendor_list and ida_en_eighteen's supply_chain.",
      "Chinese_question": "确定ida_en_seventeen平台的vendor_list表和ida_en_eighteen平台的supply_chain表之间的共同vendor_ids。",
      "PQL_query": "SELECT ida_en_seventeen.vendor_list.vendor_id FROM ida_en_seventeen.vendor_list, ida_en_eighteen.supply_chain WHERE ida_en_seventeen.vendor_list.vendor_id = ida_en_eighteen.supply_chain.vendor_id"
    },
    {
      "question": "Extract shared policy_numbers from ida_en_nineteen's insurance_data and ida_en_twenty's claims_data.",
      "Chinese_question": "从ida_en_nineteen平台的insurance_data表和ida_en_twenty平台的claims_data表中提取共享policy_numbers。",
      "PQL_query": "SELECT ida_en_nineteen.insurance_data.policy_number FROM ida_en_nineteen.insurance_data, ida_en_twenty.claims_data WHERE ida_en_nineteen.insurance_data.policy_number = ida_en_twenty.claims_data.policy_number"
    },
    {
      "question": "Intersect employee_ids across ida_en_twentyone's payroll and ida_en_twentytwo's department_records securely.",
      "Chinese_question": "安全地交叉ida_en_twentyone平台的payroll表和ida_en_twentytwo平台的department_records表中的employee_ids。",
      "PQL_query": "SELECT ida_en_twentyone.payroll.employee_id FROM ida_en_twentyone.payroll, ida_en_twentytwo.department_records WHERE ida_en_twentyone.payroll.employee_id = ida_en_twentytwo.department_records.employee_id"
    },
    {
      "question": "Compute overlap of project_codes between ida_en_twentythree's project_management and ida_en_twentyfour's resources.",
      "Chinese_question": "计算ida_en_twentythree平台的project_management表和ida_en_twentyfour平台的resources表之间的project_codes重叠情况。",
      "PQL_query": "SELECT ida_en_twentythree.project_management.project_code FROM ida_en_twentythree.project_management, ida_en_twentyfour.resources WHERE ida_en_twentythree.project_management.project_code = ida_en_twentyfour.resources.project_code"
    },
    {
      "question": "Find intersecting student_ids in ida_en_twentyfive's student_info and ida_en_twentysix's enrollment_data.",
      "Chinese_question": "查找ida_en_twentyfive平台的student_info表和ida_en_twentysix平台的enrollment_data表中的交集student_ids。",
      "PQL_query": "SELECT ida_en_twentyfive.student_info.student_id FROM ida_en_twentyfive.student_info, ida_en_twentysix.enrollment_data WHERE ida_en_twentyfive.student_info.student_id = ida_en_twentysix.enrollment_data.student_id"
    },
    {
      "question": "Securely obtain shared subscription_ids between ida_en_twentyseven's subscriptions and ida_en_twentyeight's billing_data.",
      "Chinese_question": "安全地获取ida_en_twentyseven平台的subscriptions表和ida_en_twentyeight平台的billing_data表之间共享的subscription_ids。",
      "PQL_query": "SELECT ida_en_twentyseven.subscriptions.subscription_id FROM ida_en_twentyseven.subscriptions, ida_en_twentyeight.billing_data WHERE ida_en_twentyseven.subscriptions.subscription_id = ida_en_twentyeight.billing_data.subscription_id"
    },
    {
      "question": "Discover intersected license_keys in ida_en_twentynine's software_licenses and ida_en_thirty's usage_records.",
      "Chinese_question": "发现ida_en_twentynine平台的software_licenses表和ida_en_thirty平台的usage_records表中交叉的license_keys。",
      "PQL_query": "SELECT ida_en_twentynine.software_licenses.license_key FROM ida_en_twentynine.software_licenses, ida_en_thirty.usage_records WHERE ida_en_twentynine.software_licenses.license_key = ida_en_thirty.usage_records.license_key"
    },
    {
      "question": "Identify common permit_numbers between ida_en_thirtyone's environmental_registrations and ida_en_thirtytwo's audit_data.",
      "Chinese_question": "识别ida_en_thirtyone平台的environmental_registrations表和ida_en_thirtytwo平台的audit_data表之间的共同permit_numbers。",
      "PQL_query": "SELECT ida_en_thirtyone.environmental_registrations.permit_number FROM ida_en_thirtyone.environmental_registrations, ida_en_thirtytwo.audit_data WHERE ida_en_thirtyone.environmental_registrations.permit_number = ida_en_thirtytwo.audit_data.permit_number"
    },
    {
      "question": "Derive intersecting asset_tags from ida_en_thirtythree's physical_inventory and ida_en_thirtyfour's asset_management.",
      "Chinese_question": "从ida_en_thirtythree平台的physical_inventory表和ida_en_thirtyfour平台的asset_management表中获取交叉的asset_tags。",
      "PQL_query": "SELECT ida_en_thirtythree.physical_inventory.asset_tag FROM ida_en_thirtythree.physical_inventory, ida_en_thirtyfour.asset_management WHERE ida_en_thirtythree.physical_inventory.asset_tag = ida_en_thirtyfour.asset_management.asset_tag"
    },
    {
      "question": "How can we securely compare rental_contract_ids in ida_en_thirtyfive's rental_agreements with ida_en_thirtysix's tenant_records?",
      "Chinese_question": "如何安全地比较ida_en_thirtyfive平台的rental_agreements表中的rental_contract_ids与ida_en_thirtysix平台的tenant_records表中的rental_contract_ids?",
      "PQL_query": "SELECT ida_en_thirtyfive.rental_agreements.rental_contract_id FROM ida_en_thirtyfive.rental_agreements, ida_en_thirtysix.tenant_records WHERE ida_en_thirtyfive.rental_agreements.rental_contract_id = ida_en_thirtysix.tenant_records.rental_contract_id"
    },
    {
      "question": "Check shared meter_numbers between ida_en_thirtyseven's utility_bills and ida_en_thirtyeight's meter_readings securely.",
      "Chinese_question": "安全地检查ida_en_thirtyseven平台的utility_bills表和ida_en_thirtyeight平台的meter_readings表之间共享的meter_numbers。",
      "PQL_query": "SELECT ida_en_thirtyseven.utility_bills.meter_number FROM ida_en_thirtyseven.utility_bills, ida_en_thirtyeight.meter_readings WHERE ida_en_thirtyseven.utility_bills.meter_number = ida_en_thirtyeight.meter_readings.meter_number"
    },
    {
      "question": "List intersected badge_ids from ida_en_thirtynine's employee_access and ida_en_forty's security_logs.",
      "Chinese_question": "列出ida_en_thirtynine平台的employee_access表和ida_en_forty平台的security_logs表中交叉的badge_ids。",
      "PQL_query": "SELECT ida_en_thirtynine.employee_access.badge_id FROM ida_en_thirtynine.employee_access, ida_en_forty.security_logs WHERE ida_en_thirtynine.employee_access.badge_id = ida_en_forty.security_logs.badge_id"
    },
    {
      "question": "Find overlapping inventory_ids between ida_en_fortyone's digital_storage and ida_en_fortytwo's cloud_data.",
      "Chinese_question": "查找ida_en_fortyone平台的digital_storage表和ida_en_fortytwo平台的cloud_data表中重叠的inventory_ids。",
      "PQL_query": "SELECT ida_en_fortyone.digital_storage.inventory_id FROM ida_en_fortyone.digital_storage, ida_en_fortytwo.cloud_data WHERE ida_en_fortyone.digital_storage.inventory_id = ida_en_fortytwo.cloud_data.inventory_id"
    },
    {
      "question": "How can we find the intersection of user data between platform ida_en_one's m_user_1w and platform ida_en_three's m_user_details using the user_id field to determine common users?",
      "Chinese_question": "怎样通过user_id字段来查询ida_en_one平台的m_user_1w表和ida_en_three平台的m_user_details表之间的共同用户数据交集?",
      "PQL_query": "SELECT ida_en_one.m_user_1w.name FROM ida_en_one.m_user_1w, ida_en_three.m_user_details WHERE ida_en_one.m_user_1w.user_id = ida_en_three.m_user_details.user_id"
    },
    {
      "question": "What is the total sales amount for platforms ida_en_two's sales_data and ida_en_four's order_info, linked by order_id?",
      "Chinese_question": "通过order_id字段连接,ida_en_two平台的sales_data表和ida_en_four平台的order_info表的总销售额是多少?",
      "PQL_query": "SELECT SUM(ida_en_two.sales_data.sales_amount) FROM ida_en_two.sales_data, ida_en_four.order_info WHERE ida_en_two.sales_data.order_id = ida_en_four.order_info.order_id"
    },
    {
      "question": "Can we identify shared products between datasets on ida_en_two and ida_en_three via the product_id?",
      "Chinese_question": "能否通过product_id识别ida_en_two和ida_en_three平台数据集之间的共享产品?",
      "PQL_query": "SELECT ida_en_two.product_catalog.product_name FROM ida_en_two.product_catalog, ida_en_three.product_index WHERE ida_en_two.product_catalog.product_id = ida_en_three.product_index.product_id"
    },
    {
      "question": "What are the matched records in terms of transaction_id across ida_en_one's transactions and ida_en_three's ledger?",
      "Chinese_question": "如何查询ida_en_one平台的transactions和ida_en_three平台的ledger表中按transaction_id匹配的记录?",
      "PQL_query": "SELECT ida_en_one.transactions.transaction_id FROM ida_en_one.transactions, ida_en_three.ledger WHERE ida_en_one.transactions.transaction_id = ida_en_three.ledger.transaction_id"
    },
    {
      "question": "How do we calculate the common customer count by using the email field between ida_en_four's customer_data and ida_en_five's client_records?",
      "Chinese_question": "如何通过email字段在ida_en_four平台的customer_data和ida_en_five平台的client_records之间计算共同客户数量?",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_four.customer_data, ida_en_five.client_records WHERE ida_en_four.customer_data.email = ida_en_five.client_records.email"
    },
    {
      "question": "What transactions share the same reference_id in both ida_en_six's payment_details and ida_en_seven's payment_reports?",
      "Chinese_question": "ida_en_six平台的payment_details表和ida_en_seven平台的payment_reports表中共享相同reference_id的交易有哪些?",
      "PQL_query": "SELECT ida_en_six.payment_details.transaction_amount FROM ida_en_six.payment_details, ida_en_seven.payment_reports WHERE ida_en_six.payment_details.reference_id = ida_en_seven.payment_reports.reference_id"
    },
    {
      "question": "Identify records with matching customer_id in both ida_en_eight's customer_orders and ida_en_nine's order_customers.",
      "Chinese_question": "识别ida_en_eight平台的customer_orders表和ida_en_nine平台的order_customers表中customer_id匹配的记录。",
      "PQL_query": "SELECT ida_en_eight.customer_orders.order_total FROM ida_en_eight.customer_orders, ida_en_nine.order_customers WHERE ida_en_eight.customer_orders.customer_id = ida_en_nine.order_customers.customer_id"
    },
    {
      "question": "How do you extract matching records by invoice_id between ida_en_two's invoice_list and ida_en_five's billing_info?",
      "Chinese_question": "如何提取ida_en_two平台的invoice_list和ida_en_five平台的billing_info之间以invoice_id匹配的记录?",
      "PQL_query": "SELECT ida_en_two.invoice_list.invoice_amount FROM ida_en_two.invoice_list, ida_en_five.billing_info WHERE ida_en_two.invoice_list.invoice_id = ida_en_five.billing_info.invoice_id"
    },
    {
      "question": "When looking at common account numbers in ida_en_three's accounts and ida_en_four's account_summary, what balances are shared?",
      "Chinese_question": "查看ida_en_three平台的accounts表和ida_en_four平台的account_summary表中共同账户号时,哪些余额是共享的?",
      "PQL_query": "SELECT ida_en_three.accounts.balance FROM ida_en_three.accounts, ida_en_four.account_summary WHERE ida_en_three.accounts.account_number = ida_en_four.account_summary.account_number"
    },
    {
      "question": "Can we find users with the same username in ida_en_ten's user_profiles and ida_en_eleven's user_data?",
      "Chinese_question": "我们能否在ida_en_ten平台的user_profiles和ida_en_eleven平台的user_data中找到具有相同用户名的用户?",
      "PQL_query": "SELECT ida_en_ten.user_profiles.username FROM ida_en_ten.user_profiles, ida_en_eleven.user_data WHERE ida_en_ten.user_profiles.username = ida_en_eleven.user_data.username"
    },
    {
      "question": "Which orders have identical order_ids in ida_en_six's recent_orders and ida_en_seven's past_orders?",
      "Chinese_question": "ida_en_six平台的recent_orders和ida_en_seven平台的past_orders中哪些订单具有相同order_id?",
      "PQL_query": "SELECT ida_en_six.recent_orders.order_date FROM ida_en_six.recent_orders, ida_en_seven.past_orders WHERE ida_en_six.recent_orders.order_id = ida_en_seven.past_orders.order_id"
    },
    {
      "question": "How to find employees appearing in both ida_en_two's employees and ida_en_five's staff_info by matching employee_id?",
      "Chinese_question": "如何通过员工ID匹配来查找ida_en_two平台的employees表和ida_en_five平台的staff_info表中出现的员工?",
      "PQL_query": "SELECT ida_en_two.employees.employee_name FROM ida_en_two.employees, ida_en_five.staff_info WHERE ida_en_two.employees.employee_id = ida_en_five.staff_info.employee_id"
    },
    {
      "question": "Determine the intersection by product_code across ida_en_three's product_sales and ida_en_eight's product_catalog.",
      "Chinese_question": "确定ida_en_three平台的product_sales表和ida_en_eight平台的product_catalog表之间通过product_code的交集。",
      "PQL_query": "SELECT ida_en_three.product_sales.sale_price FROM ida_en_three.product_sales, ida_en_eight.product_catalog WHERE ida_en_three.product_sales.product_code = ida_en_eight.product_catalog.product_code"
    },
    {
      "question": "How can we ascertain the matching customers using customer_id from ida_en_four's customer_base and ida_en_nine's vip_customers?",
      "Chinese_question": "我们如何通过customer_id字段来确认ida_en_four平台的customer_base和ida_en_nine平台的vip_customers的匹配客户?",
      "PQL_query": "SELECT ida_en_four.customer_base.customer_name FROM ida_en_four.customer_base, ida_en_nine.vip_customers WHERE ida_en_four.customer_base.customer_id = ida_en_nine.vip_customers.customer_id"
    },
    {
      "question": "What projects have shared project_id in datasets from ida_en_seven's project_list and ida_en_eleven's project_records?",
      "Chinese_question": "ida_en_seven平台的project_list和ida_en_eleven平台的project_records数据集中共享项目ID的项目有哪些?",
      "PQL_query": "SELECT ida_en_seven.project_list.project_name FROM ida_en_seven.project_list, ida_en_eleven.project_records WHERE ida_en_seven.project_list.project_id = ida_en_eleven.project_records.project_id"
    },
    {
      "question": "Which common emails are shared in ida_en_one's email_list and ida_en_six's contact_emails?",
      "Chinese_question": "哪一些共同的电子邮件存在于ida_en_one平台的email_list和ida_en_six平台的contact_emails中?",
      "PQL_query": "SELECT ida_en_one.email_list.email_address FROM ida_en_one.email_list, ida_en_six.contact_emails WHERE ida_en_one.email_list.email = ida_en_six.contact_emails.email"
    },
    {
      "question": "Find IDs that are present in both ida_en_five's id_log and ida_en_nine's verified_ids using id_number.",
      "Chinese_question": "如何使用id_number字段查询出现在ida_en_five平台的id_log和ida_en_nine平台的verified_ids中的ID?",
      "PQL_query": "SELECT ida_en_five.id_log.id_status FROM ida_en_five.id_log, ida_en_nine.verified_ids WHERE ida_en_five.id_log.id_number = ida_en_nine.verified_ids.id_number"
    },
    {
      "question": "Determine matching records by entry_code in ida_en_eight's entry_data and ida_en_eleven's legacy_entries.",
      "Chinese_question": "通过entry_code确定ida_en_eight平台的entry_data和ida_en_eleven平台的legacy_entries中匹配的记录。",
      "PQL_query": "SELECT ida_en_eight.entry_data.entry_timestamp FROM ida_en_eight.entry_data, ida_en_eleven.legacy_entries WHERE ida_en_eight.entry_data.entry_code = ida_en_eleven.legacy_entries.entry_code"
    },
    {
      "question": "How to identify shared membership numbers in ida_en_six's member_info and ida_en_ten's club_members?",
      "Chinese_question": "如何识别ida_en_six平台的member_info和ida_en_ten平台的club_members中共享的会员号?",
      "PQL_query": "SELECT ida_en_six.member_info.membership_status FROM ida_en_six.member_info, ida_en_ten.club_members WHERE ida_en_six.member_info.membership_number = ida_en_ten.club_members.membership_number"
    },
    {
      "question": "What transaction records are common between ida_en_five's transaction_log and ida_en_seven's tx_history using transaction_code?",
      "Chinese_question": "使用transaction_code,ida_en_five平台的transaction_log和ida_en_seven平台的tx_history之间的共同交易记录是什么?",
      "PQL_query": "SELECT ida_en_five.transaction_log.transaction_detail FROM ida_en_five.transaction_log, ida_en_seven.tx_history WHERE ida_en_five.transaction_log.transaction_code = ida_en_seven.tx_history.transaction_code"
    },
    {
      "question": "What are the intersecting customer IDs and total transaction amounts between ida_platform_a's t_customer_data table and ida_platform_b's t_transaction_data table using the id column?",
      "Chinese_question": "如何通过id字段查找ida_platform_a平台的t_customer_data表与ida_platform_b平台的t_transaction_data表之间的客户ID和总金额交集数?",
      "PQL_query": "SELECT ida_platform_a.t_customer_data.id, SUM(ida_platform_b.t_transaction_data.transaction_value) FROM ida_platform_a.t_customer_data, ida_platform_b.t_transaction_data WHERE ida_platform_a.t_customer_data.id = ida_platform_b.t_transaction_data.customer_id"
    },
    {
      "question": "How can we compute the overlap of employee records based on employee_id from ida_hr_system's t_employee_info and ida_org_platform's t_department_staff tables for a joint analysis?",
      "Chinese_question": "如何通过employee_id字段匹配ida_hr_system平台的t_employee_info表和ida_org_platform平台的t_department_staff表以进行联合员工记录分析?",
      "PQL_query": "SELECT ida_hr_system.t_employee_info.employee_id FROM ida_hr_system.t_employee_info, ida_org_platform.t_department_staff WHERE ida_hr_system.t_employee_info.employee_id = ida_org_platform.t_department_staff.employee_id"
    },
    {
      "question": "What common product IDs exist between ida_supplier_data's t_products table and ida_retail_data's t_inventory table when joined on the product_id field?",
      "Chinese_question": "在通过product_id字段匹配时,ida_supplier_data平台的t_products表和ida_retail_data平台的t_inventory表中有哪些共同的商品ID?",
      "PQL_query": "SELECT ida_supplier_data.t_products.product_id FROM ida_supplier_data.t_products, ida_retail_data.t_inventory WHERE ida_supplier_data.t_products.product_id = ida_retail_data.t_inventory.product_id"
    },
    {
      "question": "What are the intersecting customer names in the ida_bank_1 t_accounts table when cross-matched by customer_id with the ida_bank_2 t_loans table?",
      "Chinese_question": "通过customer_id字段匹配时,ida_bank_1平台的t_accounts表和ida_bank_2平台的t_loans表中有哪些共同的客户名称?",
      "PQL_query": "SELECT ida_bank_1.t_accounts.customer_name FROM ida_bank_1.t_accounts, ida_bank_2.t_loans WHERE ida_bank_1.t_accounts.customer_id = ida_bank_2.t_loans.customer_id"
    },
    {
      "question": "Identify intersecting order IDs between ida_platform_x's t_orders table and ida_platform_y's t_order_tracking table through the order_id column.",
      "Chinese_question": "通过order_id列,识别ida_platform_x平台的t_orders表和ida_platform_y平台的t_order_tracking表中的相同订单ID。",
      "PQL_query": "SELECT ida_platform_x.t_orders.order_id FROM ida_platform_x.t_orders, ida_platform_y.t_order_tracking WHERE ida_platform_x.t_orders.order_id = ida_platform_y.t_order_tracking.order_id"
    },
    {
      "question": "What shared social_security_ids exist between ida_health_services t_patient_data and ida_insurance_group t_policy_owner_data?",
      "Chinese_question": "在ida_health_services平台的t_patient_data表和ida_insurance_group平台的t_policy_owner_data表中,存在哪些共同的社会保障号码 (social_security_id)?",
      "PQL_query": "SELECT ida_health_services.t_patient_data.social_security_id FROM ida_health_services.t_patient_data, ida_insurance_group.t_policy_owner_data WHERE ida_health_services.t_patient_data.social_security_id = ida_insurance_group.t_policy_owner_data.social_security_id"
    },
    {
      "question": "How can we aggregate total sales per department when matching department_id between ida_sales_1 t_sales_data and ida_org_struct t_department_info?",
      "Chinese_question": "当通过department_id字段匹配ida_sales_1平台的t_sales_data表和ida_org_struct平台的t_department_info表时,如何计算每个部门的总销售额?",
      "PQL_query": "SELECT ida_sales_1.t_sales_data.department_id, SUM(ida_sales_1.t_sales_data.sales_amount) FROM ida_sales_1.t_sales_data, ida_org_struct.t_department_info WHERE ida_sales_1.t_sales_data.department_id = ida_org_struct.t_department_info.department_id GROUP BY ida_sales_1.t_sales_data.department_id"
    },
    {
      "question": "Find overlapping records and their IDs when matching on patient_id between ida_medical_platform's t_patient_records and ida_healthcare_provider's t_visits.",
      "Chinese_question": "通过patient_id字段匹配时,ida_medical_platform平台的t_patient_records表和ida_healthcare_provider平台的t_visits表中有哪些重叠的记录及其ID?",
      "PQL_query": "SELECT ida_medical_platform.t_patient_records.patient_id FROM ida_medical_platform.t_patient_records, ida_healthcare_provider.t_visits WHERE ida_medical_platform.t_patient_records.patient_id = ida_healthcare_provider.t_visits.patient_id"
    },
    {
      "question": "Retrieve the common property ids and owner names between the ida_city_registry's t_properties table and ida_property_bank's t_mortgages table based on property_id.",
      "Chinese_question": "查询基于property_id字段,ida_city_registry平台的t_properties表和ida_property_bank平台的t_mortgages表之间的公共资产ID和所有者名称。",
      "PQL_query": "SELECT ida_city_registry.t_properties.property_id, ida_city_registry.t_properties.owner_name FROM ida_city_registry.t_properties, ida_property_bank.t_mortgages WHERE ida_city_registry.t_properties.property_id = ida_property_bank.t_mortgages.property_id"
    },
    {
      "question": "What intersecting vehicle registration numbers are found in ida_transport_agency t_vehicle_registry and ida_insurance_services t_vehicle_policies tables?",
      "Chinese_question": "在ida_transport_agency平台的t_vehicle_registry表和ida_insurance_services平台的t_vehicle_policies表中,能找到哪些共同的车辆登记号码?",
      "PQL_query": "SELECT ida_transport_agency.t_vehicle_registry.registration_no FROM ida_transport_agency.t_vehicle_registry, ida_insurance_services.t_vehicle_policies WHERE ida_transport_agency.t_vehicle_registry.registration_no = ida_insurance_services.t_vehicle_policies.registration_no"
    },
    {
      "question": "Which student IDs appear in both ida_edu_stability t_students and ida_skills_build t_internship_records tables when matched on student_id?",
      "Chinese_question": "通过student_id匹配时,哪些学生ID同时出现在ida_edu_stability平台的t_students表和ida_skills_build平台的t_internship_records表中?",
      "PQL_query": "SELECT ida_edu_stability.t_students.student_id FROM ida_edu_stability.t_students, ida_skills_build.t_internship_records WHERE ida_edu_stability.t_students.student_id = ida_skills_build.t_internship_records.student_id"
    },
    {
      "question": "What companies' registration numbers overlap in ida_corp_registry t_company_data and ida_corp_risk_monitor t_audit_logs through registration_id?",
      "Chinese_question": "通过registration_id字段匹配时,ida_corp_registry平台的t_company_data表和ida_corp_risk_monitor平台的t_audit_logs表中有哪些公司注册号重叠?",
      "PQL_query": "SELECT ida_corp_registry.t_company_data.registration_id FROM ida_corp_registry.t_company_data, ida_corp_risk_monitor.t_audit_logs WHERE ida_corp_registry.t_company_data.registration_id = ida_corp_risk_monitor.t_audit_logs.registration_id"
    },
    {
      "question": "Retrieve the matched phone_numbers and user_ids across ida_contact_services t_phonebook and ida_marketing_hub t_campaign_users.",
      "Chinese_question": "提取在ida_contact_services平台的t_phonebook表和ida_marketing_hub平台的t_campaign_users表中匹配的电话号码和用户ID。",
      "PQL_query": "SELECT ida_contact_services.t_phonebook.phone_number, ida_contact_services.t_phonebook.user_id FROM ida_contact_services.t_phonebook, ida_marketing_hub.t_campaign_users WHERE ida_contact_services.t_phonebook.phone_number = ida_marketing_hub.t_campaign_users.phone_number"
    },
    {
      "question": "For environment TEE, find all staff names shared by ida_employee_mgmt t_staff_list and ida_security_guild t_access_tracks based on id_card_no.",
      "Chinese_question": "在环境TEE中,基于id_card_no字段匹配查询ida_employee_mgmt平台的t_staff_list表和ida_security_guild平台的t_access_tracks表的所有员工姓名交集。",
      "PQL_query": "SELECT ida_employee_mgmt.t_staff_list.staff_name FROM ida_employee_mgmt.t_staff_list, ida_security_guild.t_access_tracks WHERE ida_employee_mgmt.t_staff_list.id_card_no = ida_security_guild.t_access_tracks.id_card_no"
    },
    {
      "question": "In a TEE environment, list jointly matched company IDs from ida_trade_monitor t_shared_companies and ida_sector_db t_enlisted_corporates.",
      "Chinese_question": "在TEE环境中,列出ida_trade_monitor平台的t_shared_companies表和ida_sector_db平台的t_enlisted_corporates表中匹配的公司ID。",
      "PQL_query": "SELECT ida_trade_monitor.t_shared_companies.company_id FROM ida_trade_monitor.t_shared_companies, ida_sector_db.t_enlisted_corporates WHERE ida_trade_monitor.t_shared_companies.company_id = ida_sector_db.t_enlisted_corporates.company_id"
    },
    {
      "question": "Which intersecting case_ids are in the ida_judicial_sys t_cases and ida_legal_agents t_client_cases?",
      "Chinese_question": "在ida_judicial_sys平台的t_cases表和ida_legal_agents平台的t_client_cases表中哪些是共同的案件IDs?",
      "PQL_query": "SELECT ida_judicial_sys.t_cases.case_id FROM ida_judicial_sys.t_cases, ida_legal_agents.t_client_cases WHERE ida_judicial_sys.t_cases.case_id = ida_legal_agents.t_client_cases.case_id"
    },
    {
      "question": "Determine the overlapping project names between ida_it_portal t_projects and ida_research_cloud t_grants using the project_code key.",
      "Chinese_question": "用project_code关键字确定ida_it_portal平台的t_projects表和ida_research_cloud平台的t_grants表之间重叠的项目名称。",
      "PQL_query": "SELECT ida_it_portal.t_projects.project_name FROM ida_it_portal.t_projects, ida_research_cloud.t_grants WHERE ida_it_portal.t_projects.project_code = ida_research_cloud.t_grants.project_code"
    },
    {
      "question": "Which volunteer profiles appear in both ida_community_hub t_volunteers and ida_event_organizers t_participant_lists based on volunteer_id?",
      "Chinese_question": "通过volunteer_id查找哪些志愿者档案同时出现在ida_community_hub平台的t_volunteers表和ida_event_organizers平台的t_participant_lists表中?",
      "PQL_query": "SELECT ida_community_hub.t_volunteers.volunteer_id FROM ida_community_hub.t_volunteers, ida_event_organizers.t_participant_lists WHERE ida_community_hub.t_volunteers.volunteer_id = ida_event_organizers.t_participant_lists.volunteer_id"
    },
    {
      "question": "What is the intersection of application_ids between ida_fintech_lending t_loan_applications and ida_registry_bank t_active_accounts?",
      "Chinese_question": "ida_fintech_lending平台的t_loan_applications表和ida_registry_bank平台的t_active_accounts表之间的application_ids交集是什么?",
      "PQL_query": "SELECT ida_fintech_lending.t_loan_applications.application_id FROM ida_fintech_lending.t_loan_applications, ida_registry_bank.t_active_accounts WHERE ida_fintech_lending.t_loan_applications.application_id = ida_registry_bank.t_active_accounts.application_id"
    }
  ],
  "software_MPC": [
    {
      "question": "What is the total number, maximum, and average of the balance field stored in the m_enterprise_1w table on the ida_en_one platform using secure computation?",
      "Chinese_question": "使用安全计算查询ida_en_one平台m_enterprise_1w表中balance字段的总数、最大值和平均值。",
      "PQL_query": "SELECT COUNT(ida_en_one.m_enterprise_1w.balance), MAX(ida_en_one.m_enterprise_1w.balance), AVG(ida_en_one.m_enterprise_1w.balance) FROM ida_en_one.m_enterprise_1w;"
    },
    {
      "question": "Use secure computation to calculate the weighted sum of id, balance, and socialid fields when the id in the m_enterprise_1w table on ida_en_one matches the id in the m_security_1w table on ida_en_two.",
      "Chinese_question": "当ida_en_one平台m_enterprise_1w表中的id与ida_en_two平台m_security_1w表中的id相同时,通过安全计算求id、balance和socialid字段的加权和。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, (0.1*ida_en_one.m_enterprise_1w.balance) + (0.2*ida_en_two.m_security_1w.balance) + (0.1*ida_en_one.m_enterprise_1w.socialid) + (0.4*ida_en_two.m_security_1w.socialid) FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Compute the sum of the product of the balance fields where the id from m_enterprise_1w on ida_en_one matches the id from m_security_1w on ida_en_two using secure computation.",
      "Chinese_question": "通过安全计算求ida_en_one平台m_enterprise_1w表与ida_en_two平台m_security_1w表中id相同行的balance字段乘积的总和。",
      "PQL_query": "SELECT SUM(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance) FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "When the ids match in the m_enterprise_1w table on ida_en_one and the m_security_1w table on ida_en_two, compute the sum of the balance fields using secure computation.",
      "Chinese_question": "当ida_en_one平台m_enterprise_1w表和ida_en_two平台m_security_1w表的id相同时,通过安全计算求balance字段的和。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance + ida_en_two.m_security_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Using secure computation, find the difference of balance fields when the ids are equal between the m_enterprise_1w table on ida_en_one and the m_security_1w table on ida_en_two.",
      "Chinese_question": "利用安全计算在ida_en_one平台m_enterprise_1w表和ida_en_two平台m_security_1w表id相等时计算balance字段的差值。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance - ida_en_two.m_security_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Divide the balance fields using secure computation when the id matches between m_enterprise_1w on ida_en_one and m_security_1w on ida_en_two.",
      "Chinese_question": "当ida_en_one平台的m_enterprise_1w表的id与ida_en_two平台m_security_1w表中的id相等时,使用安全计算进行balance字段相除。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance / ida_en_two.m_security_1w.balance FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Calculate the average of the product of balance fields when ids match in ida_en_one's m_enterprise_1w and ida_en_two's m_security_1w tables using secure computation.",
      "Chinese_question": "通过安全计算,求ida_en_one平台m_enterprise_1w表与ida_en_two平台m_security_1w表id相同行的balance字段乘积的平均值。",
      "PQL_query": "SELECT AVG(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance) FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Use secure computation to find the maximum product of the balance fields for matching ids between m_enterprise_1w on ida_en_one and m_security_1w on ida_en_two.",
      "Chinese_question": "使用安全计算获取ida_en_one平台m_enterprise_1w表和ida_en_two平台m_security_1w表中id匹配时balance字段乘积的最大值。",
      "PQL_query": "SELECT MAX(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance) FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Perform a count of the product of the balance fields where ids match in m_enterprise_1w on ida_en_one and m_security_1w on ida_en_two using secure computation.",
      "Chinese_question": "通过安全计算统计ida_en_one平台m_enterprise_1w表和ida_en_two平台m_security_1w表中id重复时它们balance字段乘积的数量。",
      "PQL_query": "SELECT COUNT(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance) FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Find the smallest product of balance fields when ids match between ida_en_one's m_enterprise_1w and ida_en_two's m_security_1w using secure computation.",
      "Chinese_question": "利用安全计算查询ida_en_one平台m_enterprise_1w表与ida_en_two平台m_security_1w表中id匹配时balance字段乘积的最小值。",
      "PQL_query": "SELECT MIN(ida_en_one.m_enterprise_1w.balance * ida_en_two.m_security_1w.balance) FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w WHERE ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Group by socialid in m_enterprise_1w on ida_en_one and compute count and sum of balance, then join with tmp_table and retrieve related balance values securely.",
      "Chinese_question": "在ida_en_one平台m_enterprise_1w表中按socialid分组,计算balance数量和总和,然后与tmp_table进行关联,安全查询相关的balance值。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, tmp_table.socialid*2 + 1 FROM ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w, (SELECT socialid, cnt, tot_val FROM (SELECT socialid, COUNT(balance) as cnt, SUM(balance) as tot_val FROM ida_en_one.m_enterprise_1w GROUP BY socialid) tmp_inner) tmp_table WHERE ida_en_one.m_enterprise_1w.socialid = ida_en_two.m_security_1w.socialid AND tmp_table.socialid = ida_en_one.m_enterprise_1w.socialid;"
    },
    {
      "question": "Determine the average revenue per tenant based on the m_account_1y data on platform ida_en_three using secure computation.",
      "Chinese_question": "通过安全计算分析ida_en_three平台m_account_1y表中的每租户的平均收入。",
      "PQL_query": "SELECT AVG(ida_en_three.m_account_1y.revenue) FROM ida_en_three.m_account_1y;"
    },
    {
      "question": "Calculate securely the max age difference between two users in m_user_2m of ida_en_four platform.",
      "Chinese_question": "在ida_en_four平台的m_user_2m表中通过安全计算获取两名用户年龄差的最大值。",
      "PQL_query": "SELECT MAX(ABS(user1.age - user2.age)) FROM ida_en_four.m_user_2m user1, ida_en_four.m_user_2m user2;"
    },
    {
      "question": "Securely analyze if the total clicks on m_ad_2w for ida_en_five exceed their spend.",
      "Chinese_question": "通过安全计算核查ida_en_five平台的m_ad_2w表中总点击数是否超出花费预算。",
      "PQL_query": "SELECT (SUM(ida_en_five.m_ad_2w.clicks) > SUM(ida_en_five.m_ad_2w.spend)) FROM ida_en_five.m_ad_2w;"
    },
    {
      "question": "Using secure computation, determine the revenue ratio of tenants by segment in m_sales_1q of ida_en_six platform.",
      "Chinese_question": "通过安全计算分析ida_en_six平台m_sales_1q按客户群体划分租户的收入比例。",
      "PQL_query": "SELECT segment, SUM(revenue) / (SELECT SUM(revenue) FROM ida_en_six.m_sales_1q) AS ratio FROM ida_en_six.m_sales_1q GROUP BY segment;"
    },
    {
      "question": "Identify the highest spending tenant using secure computation on ida_en_seven's m_tenant_3y table.",
      "Chinese_question": "使用安全计算找出ida_en_seven平台m_tenant_3y花费最高的租户。",
      "PQL_query": "SELECT tenant_id, MAX(spend) FROM ida_en_seven.m_tenant_3y GROUP BY tenant_id;"
    },
    {
      "question": "Securely compare the balance average from m_acc_1m and m_acc_hist groups of tenants in ida_en_eight.",
      "Chinese_question": "在ida_en_eight的m_acc_1m和m_acc_hist表中对比不同组租户的平均余额。",
      "PQL_query": "SELECT AVG(balance1) AS avg1, AVG(balance2) AS avg2 FROM ida_en_eight.m_acc_1m, ida_en_eight.m_acc_hist;"
    },
    {
      "question": "How many distinct user IDs with non-null email addresses are there in the user_data table on the secure_platform while using MPC?",
      "Chinese_question": "使用MPC时,secure_platform平台的user_data表中有多少个不同的用户ID且电子邮件地址不为空?",
      "PQL_query": "SELECT COUNT(DISTINCT secure_platform.user_data.user_id) FROM secure_platform.user_data WHERE secure_platform.user_data.email IS NOT NULL;"
    },
    {
      "question": "Calculate the average transaction amount from the transactions table on mpc_server for each customer_id.",
      "Chinese_question": "在mpc_server平台的transactions表中计算每个customer_id的平均交易金额。",
      "PQL_query": "SELECT secure_platform.transactions.customer_id, AVG(secure_platform.transactions.amount) FROM secure_platform.transactions GROUP BY secure_platform.transactions.customer_id;"
    },
    {
      "question": "What is the sum of all sales recorded in the sales_data table on the secure_platform where the amount exceeds 1000?",
      "Chinese_question": "在secure_platform平台的sales_data表中金额超过1000的销售总额是多少?",
      "PQL_query": "SELECT SUM(secure_platform.sales_data.amount) FROM secure_platform.sales_data WHERE secure_platform.sales_data.amount > 1000;"
    },
    {
      "question": "Find the maximum salary in the employees table on the privacy_shield platform grouped by department.",
      "Chinese_question": "在privacy_shield平台的employees表中以部门分组查询最高工资。",
      "PQL_query": "SELECT secure_platform.employees.department, MAX(secure_platform.employees.salary) FROM secure_platform.employees GROUP BY secure_platform.employees.department;"
    },
    {
      "question": "What is the total number of orders in the orders table on the mpc_network for orders placed after 2020?",
      "Chinese_question": "在mpc_network平台的orders表中,2020年之后下的订单总数是多少?",
      "PQL_query": "SELECT COUNT(secure_platform.orders.order_id) FROM secure_platform.orders WHERE YEAR(secure_platform.orders.order_date) > 2020;"
    },
    {
      "question": "Compute the variance of the ratings in feedback on the secure_analysis platform.",
      "Chinese_question": "计算secure_analysis平台的feedback表中ratings字段的方差。",
      "PQL_query": "SELECT VARIANCE(secure_platform.feedback.rating) FROM secure_platform.feedback;"
    },
    {
      "question": "Determine the number of products with a stock level below 50 in the inventory table on secure_computation platform.",
      "Chinese_question": "在secure_computation平台的inventory表中库存水平低于50的产品数量有多少?",
      "PQL_query": "SELECT COUNT(secure_platform.inventory.product_id) FROM secure_platform.inventory WHERE secure_platform.inventory.stock < 50;"
    },
    {
      "question": "Find the total revenue per region from the sales_data on the private_platform.",
      "Chinese_question": "在private_platform平台的sales_data表中计算每个地区的总收入。",
      "PQL_query": "SELECT secure_platform.sales_data.region, SUM(secure_platform.sales_data.revenue) FROM secure_platform.sales_data GROUP BY secure_platform.sales_data.region;"
    },
    {
      "question": "What is the minimum discount offered in the discounts table on the secure_discount platform?",
      "Chinese_question": "在secure_discount平台的discounts表中提供的最低折扣是多少?",
      "PQL_query": "SELECT MIN(secure_platform.discounts.discount_value) FROM secure_platform.discounts;"
    },
    {
      "question": "How many unique visitors visited according to the visitor_logs table on the privacy_cloud on June 1st, 2023?",
      "Chinese_question": "根据privacy_cloud平台的visitor_logs表,2023年6月1日有多少不同的访客访问?",
      "PQL_query": "SELECT COUNT(DISTINCT secure_platform.visitor_logs.visitor_id) FROM secure_platform.visitor_logs WHERE secure_platform.visitor_logs.visit_date = '2023-06-01';"
    },
    {
      "question": "Calculate the average age of users from the users table on secure_users platform divided by city.",
      "Chinese_question": "在secure_users平台的users表中按城市划分用户的平均年龄是多少?",
      "PQL_query": "SELECT secure_platform.users.city, AVG(secure_platform.users.age) FROM secure_platform.users GROUP BY secure_platform.users.city;"
    },
    {
      "question": "What is the sum of all bonuses paid over 500 in the payroll table on the mpc_financial network?",
      "Chinese_question": "在mpc_financial网络的payroll表中发放的所有奖金总和超过500是多少?",
      "PQL_query": "SELECT SUM(secure_platform.payroll.bonus) FROM secure_platform.payroll WHERE secure_platform.payroll.bonus > 500;"
    },
    {
      "question": "Find the average amount spent by each user_id in the spending table on the secure_budget app?",
      "Chinese_question": "在secure_budget应用的spending表中每个用户ID的平均消费金额是多少?",
      "PQL_query": "SELECT secure_platform.spending.user_id, AVG(secure_platform.spending.amount) FROM secure_platform.spending GROUP BY secure_platform.spending.user_id;"
    },
    {
      "question": "Determine the median survey time from responses in the feedback_responses table on the feedback_secure platform.",
      "Chinese_question": "确定feedback_secure平台的feedback_responses表中响应的中位响应时间。",
      "PQL_query": "SELECT MEDIAN(secure_platform.feedback_responses.response_time) FROM secure_platform.feedback_responses;"
    },
    {
      "question": "How many projects are initiated after 2022 in the projects_overview table on the secure_projects platform?",
      "Chinese_question": "在secure_projects平台的projects_overview表中2022年之后启动的项目有多少个?",
      "PQL_query": "SELECT COUNT(secure_platform.projects_overview.project_id) FROM secure_platform.projects_overview WHERE YEAR(secure_platform.projects_overview.start_date) > 2022;"
    },
    {
      "question": "What is the highest score of students grouped by grade in the exam_results table on the secure_exam platform?",
      "Chinese_question": "在secure_exam平台的exam_results表中按年级分组的学生最高成绩是多少?",
      "PQL_query": "SELECT secure_platform.exam_results.grade, MAX(secure_platform.exam_results.score) FROM secure_platform.exam_results GROUP BY secure_platform.exam_results.grade;"
    },
    {
      "question": "Calculate the average tenure of the employees excluding interns in the employment_data table on hr_secure platform.",
      "Chinese_question": "在hr_secure平台employment_data表中计算不包括实习生在内的员工平均任期。",
      "PQL_query": "SELECT AVG(secure_platform.employment_data.tenure) FROM secure_platform.employment_data WHERE secure_platform.employment_data.position != 'Intern';"
    },
    {
      "question": "What is the cumulative donation amount in the donations table on the charity_secure for year 2023?",
      "Chinese_question": "charity_secure平台中donations表在2023年的累计捐款金额是多少?",
      "PQL_query": "SELECT SUM(secure_platform.donations.amount) FROM secure_platform.donations WHERE YEAR(secure_platform.donations.date) = 2023;"
    },
    {
      "question": "Determine the lowest stock quantity of each item in the stock_levels table on the supply_secure network.",
      "Chinese_question": "在supply_secure网络中的stock_levels表内每个项目的最低库存数量是多少?",
      "PQL_query": "SELECT secure_platform.stock_levels.item_id, MIN(secure_platform.stock_levels.stock_quantity) FROM secure_platform.stock_levels GROUP BY secure_platform.stock_levels.item_id;"
    },
    {
      "question": "What are the distinct departments in the team_data table on the secure_team platform?",
      "Chinese_question": "在secure_team平台的team_data表中有哪些不同的部门?",
      "PQL_query": "SELECT DISTINCT secure_platform.team_data.department FROM secure_platform.team_data;"
    },
    {
      "question": "What is the total of the purchase_amount field from the transactions table on the secure_trade platform using MPC?",
      "Chinese_question": "在使用MPC的情况下,secure_trade平台的transactions表中purchase_amount字段的总和是多少?",
      "PQL_query": "SELECT SUM(secure_trade.transactions.purchase_amount) FROM secure_trade.transactions;"
    },
    {
      "question": "Can we calculate the average order_value from the orders table on the shop_secure platform using MPC?",
      "Chinese_question": "我们能否使用MPC计算shop_secure平台orders表中的order_value的平均值?",
      "PQL_query": "SELECT AVG(shop_secure.orders.order_value) FROM shop_secure.orders;"
    },
    {
      "question": "Find the maximum salary from the employee_data table on the hr_secure database using MPC?",
      "Chinese_question": "使用MPC,从hr_secure数据库的employee_data表中找到最高的工资是多少?",
      "PQL_query": "SELECT MAX(hr_secure.employee_data.salary) FROM hr_secure.employee_data;"
    },
    {
      "question": "How many records in the personal_info table of privacy_db platform include non-null age values?",
      "Chinese_question": "在privacy_db平台的personal_info表中,包含非空年龄值的记录数是多少?",
      "PQL_query": "SELECT COUNT(privacy_db.personal_info.age) FROM privacy_db.personal_info WHERE privacy_db.personal_info.age IS NOT NULL;"
    },
    {
      "question": "What is the sum of all visited_counts from the analytics table on the web_stats platform using MPC?",
      "Chinese_question": "使用MPC统计web_stats平台的analytics表中所有visited_counts的总和是多少?",
      "PQL_query": "SELECT SUM(web_stats.analytics.visited_counts) FROM web_stats.analytics;"
    },
    {
      "question": "Can we determine the distinct product_ids from the sales_log table on the commerce_core platform using MPC?",
      "Chinese_question": "我们能否使用MPC从commerce_core平台的sales_log表中确定不同的product_id?",
      "PQL_query": "SELECT COUNT(DISTINCT commerce_core.sales_log.product_id) FROM commerce_core.sales_log;"
    },
    {
      "question": "What is the minimum credit_score in the user_profiles table of the credit_secure platform using MPC?",
      "Chinese_question": "使用MPC,credit_secure平台的user_profiles表中的最低信用评分是多少?",
      "PQL_query": "SELECT MIN(credit_secure.user_profiles.credit_score) FROM credit_secure.user_profiles;"
    },
    {
      "question": "Calculate the total revenue from the orders table where status is 'completed' on the trade_platform using MPC.",
      "Chinese_question": "使用MPC计算trade_platform平台的orders表中状态为'completed'的订单的总收入。",
      "PQL_query": "SELECT SUM(trade_platform.orders.revenue) FROM trade_platform.orders WHERE trade_platform.orders.status = 'completed';"
    },
    {
      "question": "What is the average of the delivery_time field from the shipments table on logistic_data platform using MPC?",
      "Chinese_question": "使用MPC,计算logistic_data平台的shipments表中delivery_time字段的平均值是多少?",
      "PQL_query": "SELECT AVG(logistic_data.shipments.delivery_time) FROM logistic_data.shipments;"
    },
    {
      "question": "How many cities are represented in the locations table from geo_secure platform using MPC?",
      "Chinese_question": "使用MPC,从geo_secure平台的locations表中代表的城市数是多少?",
      "PQL_query": "SELECT COUNT(DISTINCT geo_secure.locations.city) FROM geo_secure.locations;"
    },
    {
      "question": "What is the combined total of all quantities for product_id = 5 from the inventory table on the stock_safe platform using MPC?",
      "Chinese_question": "使用MPC,计算stock_safe平台的inventory表中product_id为5的所有数量的总和是多少?",
      "PQL_query": "SELECT SUM(stock_safe.inventory.quantity) FROM stock_safe.inventory WHERE stock_safe.inventory.product_id = 5;"
    },
    {
      "question": "Using MPC, can we compute the variance of income in the finance_user_data table on the fin_secure platform?",
      "Chinese_question": "可以使用MPC计算fin_secure平台的finance_user_data表中收入的方差吗?",
      "PQL_query": "SELECT VARIANCE(fin_secure.finance_user_data.income) FROM fin_secure.finance_user_data;"
    },
    {
      "question": "What is the ratio of the highest to lowest amounts from payment_details table on money_secure using MPC?",
      "Chinese_question": "使用MPC,计算money_secure平台的payment_details表中最高和最低金额的比率是多少?",
      "PQL_query": "SELECT MAX(money_secure.payment_details.amount) / MIN(money_secure.payment_details.amount) FROM money_secure.payment_details;"
    },
    {
      "question": "How many products have a stock count greater than 100 in the warehouse_info table of stock_data platform using MPC?",
      "Chinese_question": "使用MPC,stock_data平台的warehouse_info表中库存量大于100的产品有多少个?",
      "PQL_query": "SELECT COUNT(stock_data.warehouse_info.product_id) FROM stock_data.warehouse_info WHERE stock_data.warehouse_info.stock_count > 100;"
    },
    {
      "question": "Can we determine the median transaction_value from the financial_transactions table on the crypto_secure platform using MPC?",
      "Chinese_question": "我们能否使用MPC计算crypto_secure平台的financial_transactions表中的交易值的中位数?",
      "PQL_query": "SELECT MEDIAN(crypto_secure.financial_transactions.transaction_value) FROM crypto_secure.financial_transactions;"
    },
    {
      "question": "What is the correlation between age and income fields in the demographics_details table on demographics_data using MPC?",
      "Chinese_question": "使用MPC,计算demographics_data平台的demographics_details表中年龄和收入字段之间的相关性是多少?",
      "PQL_query": "SELECT CORR(demographics_data.demographics_details.age, demographics_data.demographics_details.income) FROM demographics_data.demographics_details;"
    },
    {
      "question": "How many entries exist where score is greater than or equal to 50 in the assessment_results table on edu_secure platform using MPC?",
      "Chinese_question": "使用MPC,edu_secure平台的assessment_results表中分数大于或等于50的条目有多少个?",
      "PQL_query": "SELECT COUNT(edu_secure.assessment_results.id) FROM edu_secure.assessment_results WHERE edu_secure.assessment_results.score >= 50;"
    },
    {
      "question": "Using MPC, compute the total duration of all sessions from the activity_log table on the app_data platform.",
      "Chinese_question": "使用MPC,计算app_data平台的activity_log表中所有会话的总持续时间。",
      "PQL_query": "SELECT SUM(app_data.activity_log.duration) FROM app_data.activity_log;"
    },
    {
      "question": "What is the median number of daily visitors recorded in the site_traffic table on internet_data using MPC?",
      "Chinese_question": "使用MPC,internet_data平台的site_traffic表中记录的每日访问者人数的中位数是多少?",
      "PQL_query": "SELECT MEDIAN(internet_data.site_traffic.daily_visitors) FROM internet_data.site_traffic;"
    },
    {
      "question": "Find the sum of all deposits higher than 1000 in value from bank_transactions table on finance_secure using MPC.",
      "Chinese_question": "使用MPC,计算finance_secure平台的bank_transactions表中大于1000的所有存款的总和。",
      "PQL_query": "SELECT SUM(finance_secure.bank_transactions.deposit) FROM finance_secure.bank_transactions WHERE finance_secure.bank_transactions.deposit > 1000;"
    },
    {
      "question": "Calculate the sum of the values in the revenue column from the finance_report table on the secure_accounting platform using MPC.",
      "Chinese_question": "使用MPC,对secure_accounting平台上的finance_report表的revenue字段进行求和。",
      "PQL_query": "SELECT SUM(secure_accounting.finance_report.revenue) FROM secure_accounting.finance_report;"
    },
    {
      "question": "Determine the average of the yearly_salary field from the employee_data table on the secure_hr platform with MPC.",
      "Chinese_question": "利用MPC,计算secure_hr平台上employee_data表中yearly_salary字段的平均值。",
      "PQL_query": "SELECT AVG(secure_hr.employee_data.yearly_salary) FROM secure_hr.employee_data;"
    },
    {
      "question": "What is the maximum value of the engagement_score in the users table from the social_platform using MPC?",
      "Chinese_question": "通过MPC,找出social_platform平台中的users表里的engagement_score字段的最大值。",
      "PQL_query": "SELECT MAX(social_platform.users.engagement_score) FROM social_platform.users;"
    },
    {
      "question": "Using MPC, compute the product of quantity from the sales_data table on ida_sales and the unit_price from the product_info table on ida_inventory when their product_ids match.",
      "Chinese_question": "使用MPC,当ida_sales平台的sales_data表中的product_id与ida_inventory平台的product_info表中的product_id相同时,计算quantity字段与unit_price字段的乘积。",
      "PQL_query": "SELECT ida_sales.sales_data.product_id, ida_sales.sales_data.quantity * ida_inventory.product_info.unit_price FROM ida_sales.sales_data, ida_inventory.product_info WHERE ida_sales.sales_data.product_id = ida_inventory.product_info.product_id;"
    },
    {
      "question": "Securely calculate the difference of the age field from the demographics table on ida_persona compared to the birth_year calculated age from ida_births using MPC.",
      "Chinese_question": "通过MPC,比较ida_persona平台上的demographics表中的age字段与ida_births平台通过birth_year计算出的年龄差。",
      "PQL_query": "SELECT ida_persona.demographics.id, ida_persona.demographics.age - (YEAR(CURDATE()) - ida_births.birth_year) FROM ida_persona.demographics, ida_births WHERE ida_persona.demographics.id = ida_births.id;"
    },
    {
      "question": "What is the total weighted sum of the scores from the quiz_results table on secure_education, using coefficients 0.3 for math and 0.7 for science with MPC?",
      "Chinese_question": "通过MPC,计算secure_education平台上quiz_results表的得分总加权和,系数分别为math为0.3,science为0.7。",
      "PQL_query": "SELECT SUM(0.3 * secure_education.quiz_results.math + 0.7 * secure_education.quiz_results.science) FROM secure_education.quiz_results;"
    },
    {
      "question": "Use MPC to find the number of orders in the purchase_history table from ecomm_app where order_total is above 1000.",
      "Chinese_question": "利用MPC,找出ecomm_app平台上的purchase_history表中order_total超过1000的订单数量。",
      "PQL_query": "SELECT COUNT(ecomm_app.purchase_history.order_id) FROM ecomm_app.purchase_history WHERE ecomm_app.purchase_history.order_total > 1000;"
    },
    {
      "question": "How can we securely compute both the minimum and maximum account_balance from user_accounts on secure_finance using MPC?",
      "Chinese_question": "通过MPC,如何安全地计算secure_finance平台上的user_accounts表中account_balance的最小值和最大值?",
      "PQL_query": "SELECT MIN(secure_finance.user_accounts.account_balance), MAX(secure_finance.user_accounts.account_balance) FROM secure_finance.user_accounts;"
    },
    {
      "question": "Using MPC, calculate the average difference between the online_score and classroom_score from students_performance on edu_stats platform.",
      "Chinese_question": "使用MPC,计算edu_stats平台的students_performance表中online_score与classroom_score的平均差。",
      "PQL_query": "SELECT AVG(edu_stats.students_performance.online_score - edu_stats.students_performance.classroom_score) FROM edu_stats.students_performance;"
    },
    {
      "question": "Securely sum the values of the data_usage column in the network_traffic table on the telecom_network platform using MPC.",
      "Chinese_question": "利用MPC,安全计算telecom_network平台上的network_traffic表中data_usage字段的总和。",
      "PQL_query": "SELECT SUM(telecom_network.network_traffic.data_usage) FROM telecom_network.network_traffic;"
    },
    {
      "question": "In a TEE environment, use MPC to find the product of the monthly_sales from store_one and store_two tables on retail_data when store_id matches.",
      "Chinese_question": "在TEE环境中,使用MPC当retail_data平台的store_one表和store_two表中的store_id相同时,计算monthly_sales字段的乘积。",
      "PQL_query": "SELECT retail_data.store_one.store_id, retail_data.store_one.monthly_sales * retail_data.store_two.monthly_sales FROM retail_data.store_one, retail_data.store_two WHERE retail_data.store_one.store_id = retail_data.store_two.store_id;"
    },
    {
      "question": "What is the percentage increase in traffic from the old_data table compared to the new_data table on the web_metrics platform using MPC?",
      "Chinese_question": "通过MPC,计算web_metrics平台的old_data表和new_data表之间的流量百分比增长。",
      "PQL_query": "SELECT (web_metrics.new_data.traffic - web_metrics.old_data.traffic) / web_metrics.old_data.traffic * 100 FROM web_metrics.old_data, web_metrics.new_data WHERE web_metrics.old_data.page_id = web_metrics.new_data.page_id;"
    },
    {
      "question": "Use MPC to get the average of the response_time from logs_2023 table on the it_monitor platform.",
      "Chinese_question": "利用MPC,计算it_monitor平台上的logs_2023表中response_time字段的平均值。",
      "PQL_query": "SELECT AVG(it_monitor.logs_2023.response_time) FROM it_monitor.logs_2023;"
    },
    {
      "question": "Calculate the weighted sum of score from test_results and final_grade from student_grades tables on the academic_records platform using weights 0.4 and 0.6 with MPC.",
      "Chinese_question": "使用MPC,计算academic_records平台上的test_results表和student_grades表中score和final_grade字段的加权总和,权重分别是0.4和0.6。",
      "PQL_query": "SELECT SUM(0.4 * academic_records.test_results.score + 0.6 * academic_records.student_grades.final_grade) FROM academic_records.test_results, academic_records.student_grades WHERE academic_records.test_results.student_id = academic_records.student_grades.student_id;"
    },
    {
      "question": "In secure_travel, calculate the average delay in minutes from the flight_schedule table using MPC.",
      "Chinese_question": "利用MPC,计算secure_travel平台上的flight_schedule表中延误时间的平均分钟数。",
      "PQL_query": "SELECT AVG(secure_travel.flight_schedule.delay_minutes) FROM secure_travel.flight_schedule;"
    },
    {
      "question": "Using MPC, calculate the combined potential loss from the risk_assessment table on the secure_risk platform.",
      "Chinese_question": "通过MPC,计算secure_risk平台上risk_assessment表中的潜在损失总和。",
      "PQL_query": "SELECT SUM(secure_risk.risk_assessment.potential_loss) FROM secure_risk.risk_assessment;"
    },
    {
      "question": "What is the variance of the transaction_amount from transactions table on secure_banking using MPC?",
      "Chinese_question": "利用MPC,计算secure_banking平台transactions表中transaction_amount的方差。",
      "PQL_query": "SELECT VARIANCE(secure_banking.transactions.transaction_amount) FROM secure_banking.transactions;"
    },
    {
      "question": "Determine the correlation between marketing_spend from id_spend_platform and sales_growth from id_sales_platform tables using MPC.",
      "Chinese_question": "通过MPC,确定id_spend_platform平台的marketing_spend字段与id_sales_platform平台的sales_growth字段之间的相关性。",
      "PQL_query": "SELECT CORR(id_spend_platform.marketing_spend, id_sales_platform.sales_growth) FROM id_spend_platform, id_sales_platform WHERE id_spend_platform.campaign_id = id_sales_platform.campaign_id;"
    },
    {
      "question": "How can we calculate the Gini coefficient of income from the census_data table on socio_platform using MPC?",
      "Chinese_question": "通过MPC,如何计算socio_platform平台上的census_data表中的income字段的基尼系数?",
      "PQL_query": "SELECT GINI(socio_platform.census_data.income) FROM socio_platform.census_data;"
    },
    {
      "question": "Use MPC to compute the exponential growth rate of users from the user_growth table on the data_analysis platform.",
      "Chinese_question": "利用MPC,计算data_analysis平台上的user_growth表中用户数量的指数增长率。",
      "PQL_query": "SELECT EXP(GROWTH_RATE(data_analysis.user_growth.users)) FROM data_analysis.user_growth;"
    }
  ],
  "software_PIR": [
    {
      "question": "What is the balance and social ID of the user with a specific ID in the 'm_enterprise_1w' table on the ida_en_one platform?",
      "Chinese_question": "在ida_en_one平台的m_enterprise_1w表中,如何查询某个用户ID的余额和社交账号信息?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = $param1"
    },
    {
      "question": "Retrieve all rows where the social ID contains a specific substring in the 'm_enterprise_1w' table from the ida_en_two platform.",
      "Chinese_question": "如何从ida_en_two平台的m_enterprise_1w表中检索社交账号包含特定子字符串的所有用户信息?",
      "PQL_query": "SELECT * FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.socialid LIKE '%$param1%'"
    },
    {
      "question": "How many records exist in the 'm_enterprise_1w' table on the ida_en_one platform where the balance exceeds a certain threshold?",
      "Chinese_question": "如何统计在ida_en_one平台的m_enterprise_1w表中余额超过某一数值门槛的记录数?",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.balance > $param1"
    },
    {
      "question": "Fetch the top 5 users with the highest balances in the 'm_enterprise_1w' table on the ida_en_two platform.",
      "Chinese_question": "如何从ida_en_two平台的m_enterprise_1w表中获取余额最高的前5名用户?",
      "PQL_query": "SELECT * FROM ida_en_two.m_enterprise_1w ORDER BY ida_en_two.m_enterprise_1w.balance DESC LIMIT 5"
    },
    {
      "question": "Find the user IDs in the ida_en_one platform's 'm_enterprise_1w' table with a balance of zero.",
      "Chinese_question": "如何查询ida_en_one平台的m_enterprise_1w表中余额为零的用户ID?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.balance = 0"
    },
    {
      "question": "Query the total balance for all users in the 'm_enterprise_1w' table from ida_en_two.",
      "Chinese_question": "如何从ida_en_two平台的m_enterprise_1w表中获取所有用户的余额总和?",
      "PQL_query": "SELECT SUM(ida_en_two.m_enterprise_1w.balance) AS total_balance FROM ida_en_two.m_enterprise_1w"
    },
    {
      "question": "Retrieve the social IDs of users with balances less than a specific amount from ida_en_one's 'm_enterprise_1w' table.",
      "Chinese_question": "如何从ida_en_one平台的m_enterprise_1w表中获取余额低于某一数值的用户社交账号?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.balance < $param1"
    },
    {
      "question": "Which users have identical balances in the 'm_enterprise_1w' table on ida_en_two?",
      "Chinese_question": "如何从ida_en_two平台的m_enterprise_1w表中查找具有相同余额的用户?",
      "PQL_query": "SELECT balance, COUNT(*) AS count FROM ida_en_two.m_enterprise_1w GROUP BY balance HAVING COUNT(*) > 1"
    },
    {
      "question": "What is the average balance of all entries in the 'm_enterprise_1w' table on the ida_en_one platform?",
      "Chinese_question": "如何计算ida_en_one平台的m_enterprise_1w表中所有记录的平均余额?",
      "PQL_query": "SELECT AVG(ida_en_one.m_enterprise_1w.balance) AS average_balance FROM ida_en_one.m_enterprise_1w"
    },
    {
      "question": "Fetch user details for the top 3 highest balance holders in the 'm_enterprise_1w' table on ida_en_one.",
      "Chinese_question": "如何从ida_en_one平台的m_enterprise_1w表中获取余额最高的前三名用户的详细信息?",
      "PQL_query": "SELECT * FROM ida_en_one.m_enterprise_1w ORDER BY ida_en_one.m_enterprise_1w.balance DESC LIMIT 3"
    },
    {
      "question": "Identify users from ida_en_two's 'm_enterprise_1w' table whose social ID starts with a specific prefix.",
      "Chinese_question": "如何从ida_en_two平台的m_enterprise_1w表中获取社交账号以特定前缀开头的用户?",
      "PQL_query": "SELECT * FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.socialid LIKE '$param1%'"
    },
    {
      "question": "How many users in the ida_en_one platform's 'm_enterprise_1w' have a balance below a given value?",
      "Chinese_question": "如何统计ida_en_one平台的m_enterprise_1w表中余额低于指定值的用户数量?",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.balance < $param1"
    },
    {
      "question": "What is the maximum balance in the 'm_enterprise_1w' table of the ida_en_two platform?",
      "Chinese_question": "如何查询ida_en_two平台的m_enterprise_1w表中的最高余额?",
      "PQL_query": "SELECT MAX(ida_en_two.m_enterprise_1w.balance) AS max_balance FROM ida_en_two.m_enterprise_1w"
    },
    {
      "question": "Retrieve a list of user IDs with non-null balances in the 'm_enterprise_1w' table on ida_en_two.",
      "Chinese_question": "如何从ida_en_two平台的m_enterprise_1w表中获取余额不为空的用户ID列表?",
      "PQL_query": "SELECT ida_en_two.m_enterprise_1w.id FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.balance IS NOT NULL"
    },
    {
      "question": "Find the lowest balance and corresponding user IDs from the ida_en_one 'm_enterprise_1w' table.",
      "Chinese_question": "如何从ida_en_one平台的m_enterprise_1w表中查询最低余额及对应的用户ID?",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, MIN(ida_en_one.m_enterprise_1w.balance) AS lowest_balance FROM ida_en_one.m_enterprise_1w GROUP BY ida_en_one.m_enterprise_1w.id"
    },
    {
      "question": "Fetch user details if the social ID matches a given string in the 'm_enterprise_1w' table on ida_en_two.",
      "Chinese_question": "如何从ida_en_two平台的m_enterprise_1w表中获取社交账号与指定值匹配的用户详细信息?",
      "PQL_query": "SELECT * FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.socialid = '$param1'"
    },
    {
      "question": "Count the distinct social IDs in the ida_en_one platform's 'm_enterprise_1w' table.",
      "Chinese_question": "如何统计在ida_en_one平台的m_enterprise_1w表中不重复的社交账号数量?",
      "PQL_query": "SELECT COUNT(DISTINCT ida_en_one.m_enterprise_1w.socialid) AS unique_socialids FROM ida_en_one.m_enterprise_1w"
    },
    {
      "question": "Aggregate the total balance by social ID prefix in the 'm_enterprise_1w' table on ida_en_two.",
      "Chinese_question": "如何按社交账号前缀统计ida_en_two平台m_enterprise_1w表中的余额总和?",
      "PQL_query": "SELECT LEFT(ida_en_two.m_enterprise_1w.socialid, 3) AS prefix, SUM(ida_en_two.m_enterprise_1w.balance) AS total_balance FROM ida_en_two.m_enterprise_1w GROUP BY prefix"
    },
    {
      "question": "Check whether a user with a given ID exists in ida_en_one's 'm_enterprise_1w' table.",
      "Chinese_question": "如何检测在ida_en_one平台的m_enterprise_1w表中是否存在指定ID的用户?",
      "PQL_query": "SELECT COUNT(*) > 0 AS user_exists FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = $param1"
    },
    {
      "question": "Fetch the sum of balances grouped by social ID's last three characters in ida_en_two's 'm_enterprise_1w' table.",
      "Chinese_question": "如何按社交账号后三位分组统计ida_en_two平台m_enterprise_1w表的余额总和?",
      "PQL_query": "SELECT RIGHT(ida_en_two.m_enterprise_1w.socialid, 3) AS suffix, SUM(ida_en_two.m_enterprise_1w.balance) AS total_balance FROM ida_en_two.m_enterprise_1w GROUP BY suffix"
    },
    {
      "question": "How can I retrieve the total revenue and associated employee count from the 'company_finance' table in the ida_en_two database where the company's ID matches param1?",
      "Chinese_question": "如何从ida_en_two数据库的company_finance表中查询与公司ID匹配的总收入和员工数量?",
      "PQL_query": "SELECT ida_en_two.company_finance.total_revenue, ida_en_two.company_finance.employee_count FROM ida_en_two.company_finance WHERE ida_en_two.company_finance.company_id = $param1"
    },
    {
      "question": "What are the login times and IP addresses of users in the 'user_logs' table on the ida_en_one platform for a given user ID?",
      "Chinese_question": "在ida_en_one平台的user_logs表中,如何查询特定用户ID的登录次数和IP地址?",
      "PQL_query": "SELECT ida_en_one.user_logs.login_time, ida_en_one.user_logs.ip_address FROM ida_en_one.user_logs WHERE ida_en_one.user_logs.user_id = $param1"
    },
    {
      "question": "Fetch the order amount and payment status from the 'orders' table in ida_en_one where the order ID matches a specific parameter.",
      "Chinese_question": "在ida_en_one数据库的orders表中,如何根据订单ID查询订单金额和支付状态?",
      "PQL_query": "SELECT ida_en_one.orders.order_amount, ida_en_one.orders.payment_status FROM ida_en_one.orders WHERE ida_en_one.orders.order_id = $param1"
    },
    {
      "question": "How can we get the product name and category for a specific product code from 'product_catalog' in ida_en_two?",
      "Chinese_question": "如何在ida_en_two的product_catalog表中找到特定产品代码的产品名称和分类?",
      "PQL_query": "SELECT ida_en_two.product_catalog.product_name, ida_en_two.product_catalog.category FROM ida_en_two.product_catalog WHERE ida_en_two.product_catalog.product_code = $param1"
    },
    {
      "question": "What is the age and income of residents listed in 'population_data' table in ida_en_one for a specific resident ID?",
      "Chinese_question": "如何从ida_en_one的population_data表中根据居民ID检索到他们的年龄和收入数据?",
      "PQL_query": "SELECT ida_en_one.population_data.age, ida_en_one.population_data.income FROM ida_en_one.population_data WHERE ida_en_one.population_data.resident_id = $param1"
    },
    {
      "question": "Retrieve the shipment date and delivery status from the 'shipment_details' table in ida_en_two platform for a given tracking number.",
      "Chinese_question": "在ida_en_two平台的shipment_details表中,如何根据特定运单号查询发货日期和交付状态?",
      "PQL_query": "SELECT ida_en_two.shipment_details.shipment_date, ida_en_two.shipment_details.delivery_status FROM ida_en_two.shipment_details WHERE ida_en_two.shipment_details.tracking_number = $param1"
    },
    {
      "question": "How to find the date of enrollment and course name in the 'student_courses' table in ida_en_one for a given student ID?",
      "Chinese_question": "如何在ida_en_one的student_courses表中根据学生ID查看报名日期和课程名称?",
      "PQL_query": "SELECT ida_en_one.student_courses.enrollment_date, ida_en_one.student_courses.course_name FROM ida_en_one.student_courses WHERE ida_en_one.student_courses.student_id = $param1"
    },
    {
      "question": "Fetch the device type and last activity timestamp for a device ID in the 'iot_devices' table in the ida_en_two database.",
      "Chinese_question": "如何在ida_en_two数据库的iot_devices表中通过设备ID获取设备类型和最后活动时间戳?",
      "PQL_query": "SELECT ida_en_two.iot_devices.device_type, ida_en_two.iot_devices.last_activity FROM ida_en_two.iot_devices WHERE ida_en_two.iot_devices.device_id = $param1"
    },
    {
      "question": "What is the email and phone number of the employee listed by their employee ID in 'employment_details' of ida_en_one?",
      "Chinese_question": "如何在ida_en_one的employment_details表中使用员工ID查看员工电子邮件和电话号码?",
      "PQL_query": "SELECT ida_en_one.employment_details.email, ida_en_one.employment_details.phone FROM ida_en_one.employment_details WHERE ida_en_one.employment_details.employee_id = $param1"
    },
    {
      "question": "Get the house location and price for a given property ID from 'housing_registry' in ida_en_two.",
      "Chinese_question": "在ida_en_two的housing_registry表中,如何根据物业ID查询房屋位置和价格?",
      "PQL_query": "SELECT ida_en_two.housing_registry.address, ida_en_two.housing_registry.price FROM ida_en_two.housing_registry WHERE ida_en_two.housing_registry.property_id = $param1"
    },
    {
      "question": "How to query attendance percentage and grade of a student by ID from 'student_attendance' in ida_en_one?",
      "Chinese_question": "如何通过学生ID从ida_en_one的student_attendance表中查询出勤率和学生的成绩?",
      "PQL_query": "SELECT ida_en_one.student_attendance.attendance_percentage, ida_en_one.student_attendance.grade FROM ida_en_one.student_attendance WHERE ida_en_one.student_attendance.student_id = $param1"
    },
    {
      "question": "Retrieve vehicle registration year and owner's name for a vehicle ID from the 'vehicle_registry' in ida_en_two.",
      "Chinese_question": "如何通过车辆ID从ida_en_two的vehicle_registry表中获取车辆注册年份和车主姓名?",
      "PQL_query": "SELECT ida_en_two.vehicle_registry.registration_year, ida_en_two.vehicle_registry.owner_name FROM ida_en_two.vehicle_registry WHERE ida_en_two.vehicle_registry.vehicle_id = $param1"
    },
    {
      "question": "Find the subscription type and the expiration date for a user in the 'user_subscription' table on ida_en_one.",
      "Chinese_question": "如何在ida_en_one的user_subscription表中查找用户的订阅类型及其到期日期?",
      "PQL_query": "SELECT ida_en_one.user_subscription.subscription_type, ida_en_one.user_subscription.expiration_date FROM ida_en_one.user_subscription WHERE ida_en_one.user_subscription.user_id = $param1"
    },
    {
      "question": "Fetch the medical diagnosis and treatment history for a patient ID from 'patient_records' in ida_en_two.",
      "Chinese_question": "如何从ida_en_two的patient_records表中通过患者ID获取医疗诊断和治疗历史?",
      "PQL_query": "SELECT ida_en_two.patient_records.diagnosis, ida_en_two.patient_records.treatment_history FROM ida_en_two.patient_records WHERE ida_en_two.patient_records.patient_id = $param1"
    },
    {
      "question": "What is the user's risk score and fraud status based on their account ID in 'fraud_detection' from ida_en_one?",
      "Chinese_question": "如何通过账户ID从ida_en_one的fraud_detection表中查询用户风险评分和欺诈状态?",
      "PQL_query": "SELECT ida_en_one.fraud_detection.risk_score, ida_en_one.fraud_detection.fraud_status FROM ida_en_one.fraud_detection WHERE ida_en_one.fraud_detection.account_id = $param1"
    },
    {
      "question": "Retrieve the SKU and the stock quantity of products in 'warehouse_stock' from ida_en_two for a specific product ID.",
      "Chinese_question": "如何从ida_en_two的warehouse_stock表中根据产品ID获取SKU及库存数量?",
      "PQL_query": "SELECT ida_en_two.warehouse_stock.sku, ida_en_two.warehouse_stock.stock_quantity FROM ida_en_two.warehouse_stock WHERE ida_en_two.warehouse_stock.product_id = $param1"
    },
    {
      "question": "Get the author and publication year of a book using its ISBN from 'library_books' in ida_en_one.",
      "Chinese_question": "如何通过ISBN从ida_en_one的library_books表中获取书籍的作者和出版年份?",
      "PQL_query": "SELECT ida_en_one.library_books.author, ida_en_one.library_books.publication_year FROM ida_en_one.library_books WHERE ida_en_one.library_books.isbn = $param1"
    },
    {
      "question": "How to find the ticket price and the seat number based on a ticket number from 'event_tickets' in ida_en_two?",
      "Chinese_question": "如何在ida_en_two的event_tickets表中通过票号查询票价及座位号?",
      "PQL_query": "SELECT ida_en_two.event_tickets.ticket_price, ida_en_two.event_tickets.seat_number FROM ida_en_two.event_tickets WHERE ida_en_two.event_tickets.ticket_number = $param1"
    },
    {
      "question": "What are the customer's name and loyalty points from 'customer_loyalty' in ida_en_one for a specific customer ID?",
      "Chinese_question": "如何从ida_en_one的customer_loyalty表中根据客户ID查询客户名称和忠诚积分?",
      "PQL_query": "SELECT ida_en_one.customer_loyalty.customer_name, ida_en_one.customer_loyalty.loyalty_points FROM ida_en_one.customer_loyalty WHERE ida_en_one.customer_loyalty.customer_id = $param1"
    },
    {
      "question": "Fetch the supplier name and contract expiry date for a contract ID from 'supplier_contracts' in ida_en_two platform.",
      "Chinese_question": "如何通过合同ID从ida_en_two的supplier_contracts表中获取供应商名称及合同到期日期?",
      "PQL_query": "SELECT ida_en_two.supplier_contracts.supplier_name, ida_en_two.supplier_contracts.contract_expiry FROM ida_en_two.supplier_contracts WHERE ida_en_two.supplier_contracts.contract_id = $param1"
    },
    {
      "question": "What is the total number of transactions on the ida_en_one platform's m_financial_transactions table where the account_id matches param1?",
      "Chinese_question": "在ida_en_one平台的m_financial_transactions表中,账户ID与param1匹配的交易总数是多少?",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_one.m_financial_transactions WHERE ida_en_one.m_financial_transactions.account_id = $param1"
    },
    {
      "question": "Can you find the sum of all expenses in the m_budget_plans table under ida_en_two where plan status is 'active'?",
      "Chinese_question": "在ida_en_two平台的m_budget_plans表中,状态为“active”的计划总支出是多少?",
      "PQL_query": "SELECT SUM(ida_en_two.m_budget_plans.expense) FROM ida_en_two.m_budget_plans WHERE ida_en_two.m_budget_plans.status = 'active'"
    },
    {
      "question": "Determine the average age of users from the m_user_info table in the ida_en_two database where city_name is specified by param2.",
      "Chinese_question": "从ida_en_two数据库的m_user_info表中确定城市名由param2指定的用户平均年龄。",
      "PQL_query": "SELECT AVG(ida_en_two.m_user_info.age) FROM ida_en_two.m_user_info WHERE ida_en_two.m_user_info.city_name = $param2"
    },
    {
      "question": "How to extract the product descriptions from ida_en_one's m_product_catalog where the product_type equals 'electronics'?",
      "Chinese_question": "如何从ida_en_one的m_product_catalog中提取产品类型为“electronics”的产品描述?",
      "PQL_query": "SELECT ida_en_one.m_product_catalog.description FROM ida_en_one.m_product_catalog WHERE ida_en_one.m_product_catalog.product_type = 'electronics'"
    },
    {
      "question": "Get the list of employee names and their roles from the m_hr_records table of ida_en_two where department_id equals param3.",
      "Chinese_question": "从ida_en_two的平台的m_hr_records表中获取与param3匹配的部门ID对应的员工姓名及其角色。",
      "PQL_query": "SELECT ida_en_two.m_hr_records.employee_name, ida_en_two.m_hr_records.role FROM ida_en_two.m_hr_records WHERE ida_en_two.m_hr_records.department_id = $param3"
    },
    {
      "question": "What are the unique job titles present in the ida_en_one.m_employees table for the division specified by param4?",
      "Chinese_question": "在ida_en_one.m_employees表中,指定分部为param4的唯一职位有哪些?",
      "PQL_query": "SELECT DISTINCT ida_en_one.m_employees.job_title FROM ida_en_one.m_employees WHERE ida_en_one.m_employees.division = $param4"
    },
    {
      "question": "Can the ida_en_two's m_sales_data provide the highest sale amount where sales_region is set to param5?",
      "Chinese_question": "ida_en_two的m_sales_data表中,销售区域为param5的最大销售额是多少?",
      "PQL_query": "SELECT MAX(ida_en_two.m_sales_data.sale_amount) FROM ida_en_two.m_sales_data WHERE ida_en_two.m_sales_data.sales_region = $param5"
    },
    {
      "question": "List the customer IDs and their corresponding spending totals from m_purchase_history in ida_en_two where the date is after param6.",
      "Chinese_question": "列出ida_en_two的m_purchase_history表中在param6之后日期的客户ID及相应的总支出。",
      "PQL_query": "SELECT ida_en_two.m_purchase_history.customer_id, SUM(ida_en_two.m_purchase_history.amount) FROM ida_en_two.m_purchase_history WHERE ida_en_two.m_purchase_history.date > $param6 GROUP BY ida_en_two.m_purchase_history.customer_id"
    },
    {
      "question": "Identify the minimum stock level in the ida_en_one.m_inventory table for items in category 'office_supplies'.",
      "Chinese_question": "识别ida_en_one.m_inventory表中类别为“office_supplies”项目的最低库存水平。",
      "PQL_query": "SELECT MIN(ida_en_one.m_inventory.stock_level) FROM ida_en_one.m_inventory WHERE ida_en_one.m_inventory.category = 'office_supplies'"
    },
    {
      "question": "Fetch the project names and their completion status from the m_project_overview table in ida_en_two database where manager_id equals param7.",
      "Chinese_question": "从ida_en_two数据库的m_project_overview表中,查询经理ID为param7的项目名称及其完成状态。",
      "PQL_query": "SELECT ida_en_two.m_project_overview.project_name, ida_en_two.m_project_overview.completion_status FROM ida_en_two.m_project_overview WHERE ida_en_two.m_project_overview.manager_id = $param7"
    },
    {
      "question": "Can you list the distinct categories in the ida_en_one.m_product_sales table?",
      "Chinese_question": "你能从ida_en_one.m_product_sales表中列出不同的类别吗?",
      "PQL_query": "SELECT DISTINCT ida_en_one.m_product_sales.category FROM ida_en_one.m_product_sales"
    },
    {
      "question": "Find out how many feedback entries have ratings greater than 3 in the m_customer_feedback table at ida_en_two.",
      "Chinese_question": "找出ida_en_two的m_customer_feedback表中评分大于3的反馈记录数量。",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_two.m_customer_feedback WHERE ida_en_two.m_customer_feedback.rating > 3"
    },
    {
      "question": "Retrieve the supplier's names and contact details from m_supplier_info in ida_en_one where country matches param8.",
      "Chinese_question": "从ida_en_one的m_supplier_info表中检索国家与param8匹配的供应商名称和联系方式。",
      "PQL_query": "SELECT ida_en_one.m_supplier_info.supplier_name, ida_en_one.m_supplier_info.contact_details FROM ida_en_one.m_supplier_info WHERE ida_en_one.m_supplier_info.country = $param8"
    },
    {
      "question": "Which product in the m_sales_analytics table at ida_en_two generated the highest revenue in the last quarter?",
      "Chinese_question": "在ida_en_two的m_sales_analytics表中,哪个产品在上季度产生了最高收入?",
      "PQL_query": "SELECT ida_en_two.m_sales_analytics.product_name FROM ida_en_two.m_sales_analytics WHERE ida_en_two.m_sales_analytics.quarter = 'last' ORDER BY ida_en_two.m_sales_analytics.revenue DESC LIMIT 1"
    },
    {
      "question": "How to obtain the average time spent on tasks from the ida_en_one.m_task_logs table where task_id equals param9?",
      "Chinese_question": "如何从ida_en_one.m_task_logs表中获取task_id等于param9的任务的平均花费时间?",
      "PQL_query": "SELECT AVG(ida_en_one.m_task_logs.time_spent) FROM ida_en_one.m_task_logs WHERE ida_en_one.m_task_logs.task_id = $param9"
    },
    {
      "question": "What is the unique count of users subscribed to newsletters in the m_user_preferences table at ida_en_two?",
      "Chinese_question": "ida_en_two的m_user_preferences表中订阅新闻通讯的用户的唯一数量是多少?",
      "PQL_query": "SELECT COUNT(DISTINCT ida_en_two.m_user_preferences.user_id) FROM ida_en_two.m_user_preferences WHERE ida_en_two.m_user_preferences.subscribed_to_newsletter = true"
    },
    {
      "question": "Can you identify the lowest temperature recorded in the ida_en_two.m_weather_statistics where the date falls within the past week?",
      "Chinese_question": "你能确定ida_en_two的m_weather_statistics表中过去一周内记录的最低温度吗?",
      "PQL_query": "SELECT MIN(ida_en_two.m_weather_statistics.temperature) FROM ida_en_two.m_weather_statistics WHERE ida_en_two.m_weather_statistics.date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)"
    },
    {
      "question": "Extract IDs and status from the m_order_details in ida_en_one where delivery_status equals 'pending'.",
      "Chinese_question": "从ida_en_one的m_order_details表中提取交付状态为“pending”的ID和状态。",
      "PQL_query": "SELECT ida_en_one.m_order_details.order_id, ida_en_one.m_order_details.status FROM ida_en_one.m_order_details WHERE ida_en_one.m_order_details.delivery_status = 'pending'"
    },
    {
      "question": "Compute the total number of projects in the m_project_data table on ida_en_two where the budget exceeds param10.",
      "Chinese_question": "计算ida_en_two的m_project_data表中预算超过param10的项目总数。",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_two.m_project_data WHERE ida_en_two.m_project_data.budget > $param10"
    },
    {
      "question": "List all the upcoming event titles in ida_en_one's m_event_schedule table that will occur after today.",
      "Chinese_question": "列出ida_en_one的m_event_schedule表中今天之后将要发生的所有即将到来的事件标题。",
      "PQL_query": "SELECT ida_en_one.m_event_schedule.event_title FROM ida_en_one.m_event_schedule WHERE ida_en_one.m_event_schedule.date > CURDATE()"
    },
    {
      "question": "What is the average balance from the ida_en_two platform's m_enterprise_1w table where the id column matches param1?",
      "Chinese_question": "在ida_en_two平台的m_enterprise_1w表中,id列与param1匹配时的平均余额是多少?",
      "PQL_query": "SELECT AVG(ida_en_two.m_enterprise_1w.balance) FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.id = $param1"
    },
    {
      "question": "Retrieve the socialid and balance columns from the ida_en_one.m_enterprise_1w table where the balance exceeds param1.",
      "Chinese_question": "从ida_en_one.m_enterprise_1w表中获取余额大于param1的socialid和balance列。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.balance FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.balance > $param1"
    },
    {
      "question": "How many rows in the ida_en_two.m_enterprise_1w table have an id matching param1?",
      "Chinese_question": "ida_en_two.m_enterprise_1w表中有多少行的id与param1匹配?",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.id = $param1"
    },
    {
      "question": "List all unique socialid values from the ida_en_two.m_enterprise_1w table where the balance column is below param1.",
      "Chinese_question": "列出ida_en_two.m_enterprise_1w表中余额列小于param1的所有唯一socialid值。",
      "PQL_query": "SELECT DISTINCT ida_en_two.m_enterprise_1w.socialid FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.balance < $param1"
    },
    {
      "question": "What is the maximum balance in the ida_en_one.m_enterprise_1w table for rows where id equals param1?",
      "Chinese_question": "当id等于param1时,ida_en_one.m_enterprise_1w表中的最高余额是多少?",
      "PQL_query": "SELECT MAX(ida_en_one.m_enterprise_1w.balance) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = $param1"
    },
    {
      "question": "Find the minimum balance from the ida_en_two.m_enterprise_1w table for entries where socialid starts with 'A'.",
      "Chinese_question": "查询ida_en_two.m_enterprise_1w表中socialid以'A'开头的记录的最低余额。",
      "PQL_query": "SELECT MIN(ida_en_two.m_enterprise_1w.balance) FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.socialid LIKE 'A%'"
    },
    {
      "question": "Retrieve the total balance for all rows in the ida_en_one.m_enterprise_1w table where socialid matches param1.",
      "Chinese_question": "查询ida_en_one.m_enterprise_1w表中所有socialid与param1匹配的行的余额总和。",
      "PQL_query": "SELECT SUM(ida_en_one.m_enterprise_1w.balance) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.socialid = $param1"
    },
    {
      "question": "How many rows exist in the ida_en_two.m_enterprise_1w table where balance is greater than 1000 and less than param1?",
      "Chinese_question": "ida_en_two.m_enterprise_1w表中余额大于1000且小于param1的行数是多少?",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.balance > 1000 AND ida_en_two.m_enterprise_1w.balance < $param1"
    },
    {
      "question": "Fetch the balance for the ida_en_one.m_enterprise_1w table rows where id differs from param1.",
      "Chinese_question": "获取ida_en_one.m_enterprise_1w表中id不等于param1的行的余额。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id != $param1"
    },
    {
      "question": "Get all rows from ida_en_two.m_enterprise_1w where the balance equals param1 and id starts with '100'.",
      "Chinese_question": "从ida_en_two.m_enterprise_1w表中获取余额等于param1且id以'100'开头的所有行。",
      "PQL_query": "SELECT * FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.balance = $param1 AND ida_en_two.m_enterprise_1w.id LIKE '100%'"
    },
    {
      "question": "List all ids from ida_en_one.m_enterprise_1w where balance falls within the range 500 to param1.",
      "Chinese_question": "列出ida_en_one.m_enterprise_1w表中余额在500到param1之间的所有id。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.balance BETWEEN 500 AND $param1"
    },
    {
      "question": "Count distinct socialid values in ida_en_two.m_enterprise_1w for rows matching param1 in balance.",
      "Chinese_question": "统计ida_en_two.m_enterprise_1w中余额列等于param1的行的不同socialid值数量。",
      "PQL_query": "SELECT COUNT(DISTINCT ida_en_two.m_enterprise_1w.socialid) FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.balance = $param1"
    },
    {
      "question": "Retrieve the id and socialid columns from ida_en_one.m_enterprise_1w where balance is not null.",
      "Chinese_question": "从ida_en_one.m_enterprise_1w表中获取余额非空的行的id和socialid列。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.id, ida_en_one.m_enterprise_1w.socialid FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.balance IS NOT NULL"
    },
    {
      "question": "What is the sum of all balances in the ida_en_two.m_enterprise_1w table where id is greater than param1?",
      "Chinese_question": "ida_en_two.m_enterprise_1w表中id大于param1的所有记录的余额总和是多少?",
      "PQL_query": "SELECT SUM(ida_en_two.m_enterprise_1w.balance) FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.id > $param1"
    },
    {
      "question": "Find the count of rows in ida_en_one.m_enterprise_1w where both id and socialid match param1 and 'S123' respectively.",
      "Chinese_question": "查询ida_en_one.m_enterprise_1w表中id与param1匹配且socialid与'S123'匹配的行数。",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = $param1 AND ida_en_one.m_enterprise_1w.socialid = 'S123'"
    },
    {
      "question": "List all records from ida_en_two.m_enterprise_1w where the socialid contains 'xyz' and the balance is less than param1.",
      "Chinese_question": "列出ida_en_two.m_enterprise_1w中socialid包含'xyz'且余额小于param1的所有记录。",
      "PQL_query": "SELECT * FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.socialid LIKE '%xyz%' AND ida_en_two.m_enterprise_1w.balance < $param1"
    },
    {
      "question": "Extract average balance values from ida_en_one.m_enterprise_1w where id is not equal to param1.",
      "Chinese_question": "提取ida_en_one.m_enterprise_1w表中id不等于param1的记录的平均余额值。",
      "PQL_query": "SELECT AVG(ida_en_one.m_enterprise_1w.balance) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id != $param1"
    },
    {
      "question": "What are the distinct id values in ida_en_two.m_enterprise_1w where balance exceeds 2000?",
      "Chinese_question": "ida_en_two.m_enterprise_1w表中余额超过2000的记录的不同id值是什么?",
      "PQL_query": "SELECT DISTINCT ida_en_two.m_enterprise_1w.id FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.balance > 2000"
    },
    {
      "question": "Retrieve the row count from ida_en_one.m_enterprise_1w where id matches param1 and balance is set to null.",
      "Chinese_question": "从ida_en_one.m_enterprise_1w表中检索id与param1匹配且余额为null的行数。",
      "PQL_query": "SELECT COUNT(*) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = $param1 AND ida_en_one.m_enterprise_1w.balance IS NULL"
    },
    {
      "question": "Find all rows from ida_en_two.m_enterprise_1w where the first character of socialid is 'X' and id matches param1.",
      "Chinese_question": "查询ida_en_two.m_enterprise_1w表中socialid的首字母是'X'且id与param1匹配的记录。",
      "PQL_query": "SELECT * FROM ida_en_two.m_enterprise_1w WHERE ida_en_two.m_enterprise_1w.socialid LIKE 'X%' AND ida_en_two.m_enterprise_1w.id = $param1"
    },
    {
      "question": "What is the total sales amount from the ida_en_one platform's m_sales_1w table where the transaction_id matches param2?",
      "Chinese_question": "ida_en_one平台的m_sales_1w表中transaction_id与param2匹配的总销售金额是多少?",
      "PQL_query": "SELECT SUM(ida_en_one.m_sales_1w.sales_amount) FROM ida_en_one.m_sales_1w WHERE ida_en_one.m_sales_1w.transaction_id = $param2"
    },
    {
      "question": "Can you retrieve the count of employees whose department_id matches param3 in the ida_en_two platform's m_employee_1w table?",
      "Chinese_question": "能否获取ida_en_two平台m_employee_1w表中department_id与param3匹配的员工数量?",
      "PQL_query": "SELECT COUNT(ida_en_two.m_employee_1w.employee_id) FROM ida_en_two.m_employee_1w WHERE ida_en_two.m_employee_1w.department_id = $param3"
    },
    {
      "question": "Show me the average salary from the ida_en_one platform's m_salary_1w table for entries where position matches param4.",
      "Chinese_question": "展示ida_en_one平台m_salary_1w表中职位与param4匹配条目的平均薪资。",
      "PQL_query": "SELECT AVG(ida_en_one.m_salary_1w.salary) FROM ida_en_one.m_salary_1w WHERE ida_en_one.m_salary_1w.position = $param4"
    },
    {
      "question": "Retrieve the list of product names and their corresponding prices from the ida_en_two platform's m_product_1w table where category matches param5.",
      "Chinese_question": "从ida_en_two平台的m_product_1w表中检索类别与param5匹配的产品名称及其价格列表。",
      "PQL_query": "SELECT ida_en_two.m_product_1w.product_name, ida_en_two.m_product_1w.price FROM ida_en_two.m_product_1w WHERE ida_en_two.m_product_1w.category = $param5"
    },
    {
      "question": "Find the maximum order value for the order_id matching param6 in the ida_en_one platform's m_orders_1w table.",
      "Chinese_question": "查找ida_en_one平台m_orders_1w表中order_id匹配param6的最大订单金额。",
      "PQL_query": "SELECT MAX(ida_en_one.m_orders_1w.order_value) FROM ida_en_one.m_orders_1w WHERE ida_en_one.m_orders_1w.order_id = $param6"
    },
    {
      "question": "Retrieve the minimum temperature recorded on the ida_en_two platform's m_weather_1w table where location_id matches param7.",
      "Chinese_question": "检索ida_en_two平台m_weather_1w表中location_id与param7匹配的最低记录温度。",
      "PQL_query": "SELECT MIN(ida_en_two.m_weather_1w.temperature) FROM ida_en_two.m_weather_1w WHERE ida_en_two.m_weather_1w.location_id = $param7"
    },
    {
      "question": "What is the latest entry timestamp from the ida_en_one platform's m_logs_1w table for log_id that matches param8?",
      "Chinese_question": "ida_en_one平台m_logs_1w表中log_id与param8匹配的最新条目时间戳是什么?",
      "PQL_query": "SELECT MAX(ida_en_one.m_logs_1w.entry_timestamp) FROM ida_en_one.m_logs_1w WHERE ida_en_one.m_logs_1w.log_id = $param8"
    },
    {
      "question": "Get the number of visits recorded in the ida_en_two platform's m_visits_1w table where page_id corresponds to param9.",
      "Chinese_question": "获取ida_en_two平台m_visits_1w表中page_id对应param9的访问次数。",
      "PQL_query": "SELECT COUNT(ida_en_two.m_visits_1w.visit_id) FROM ida_en_two.m_visits_1w WHERE ida_en_two.m_visits_1w.page_id = $param9"
    },
    {
      "question": "Extract the user names and their matching emails from the ida_en_one platform's m_users_1w table matching param10 in user_id.",
      "Chinese_question": "从ida_en_one平台m_users_1w表中提取user_id匹配param10的用户名及其对应的电子邮件。",
      "PQL_query": "SELECT ida_en_one.m_users_1w.user_name, ida_en_one.m_users_1w.email FROM ida_en_one.m_users_1w WHERE ida_en_one.m_users_1w.user_id = $param10"
    },
    {
      "question": "Identify the sum of purchase amounts from the ida_en_two platform's m_purchases_1w table where buyer_id matches param11.",
      "Chinese_question": "识别ida_en_two平台m_purchases_1w表中buyer_id匹配param11的购买金额总和。",
      "PQL_query": "SELECT SUM(ida_en_two.m_purchases_1w.purchase_amount) FROM ida_en_two.m_purchases_1w WHERE ida_en_two.m_purchases_1w.buyer_id = $param11"
    },
    {
      "question": "What are the total expenses of a department in the ida_en_one platform's m_finance_1w table whose department_code aligns with param12?",
      "Chinese_question": "ida_en_one平台m_finance_1w表中部门代码与param12一致的部门总开支是多少?",
      "PQL_query": "SELECT SUM(ida_en_one.m_finance_1w.expenses) FROM ida_en_one.m_finance_1w WHERE ida_en_one.m_finance_1w.department_code = $param12"
    },
    {
      "question": "Can you list the IDs and names of machines in the ida_en_two platform's m_machines_1w table where machine_type is param13?",
      "Chinese_question": "您能否列出ida_en_two平台m_machines_1w表中machine_type为param13的机器ID和名称?",
      "PQL_query": "SELECT ida_en_two.m_machines_1w.machine_id, ida_en_two.m_machines_1w.machine_name FROM ida_en_two.m_machines_1w WHERE ida_en_two.m_machines_1w.machine_type = $param13"
    },
    {
      "question": "Fetch the transaction amounts from ida_en_one's m_transactions_1w where transaction_id matches param14.",
      "Chinese_question": "获取ida_en_one平台m_transactions_1w表中transaction_id与param14匹配的交易金额。",
      "PQL_query": "SELECT ida_en_one.m_transactions_1w.transaction_amount FROM ida_en_one.m_transactions_1w WHERE ida_en_one.m_transactions_1w.transaction_id = $param14"
    },
    {
      "question": "Retrieve stock quantities from the ida_en_two platform's m_stock_1w table for items whose item_code matches param15.",
      "Chinese_question": "检索ida_en_two平台m_stock_1w表中item_code匹配param15的商品库存数量。",
      "PQL_query": "SELECT ida_en_two.m_stock_1w.stock_quantity FROM ida_en_two.m_stock_1w WHERE ida_en_two.m_stock_1w.item_code = $param15"
    },
    {
      "question": "Find out the total revenue in the ida_en_one's m_revenue_1w table where revenue_id aligns with param16.",
      "Chinese_question": "在ida_en_one平台的m_revenue_1w表中查找revenue_id与param16一致的总收入。",
      "PQL_query": "SELECT SUM(ida_en_one.m_revenue_1w.revenue_amount) FROM ida_en_one.m_revenue_1w WHERE ida_en_one.m_revenue_1w.revenue_id = $param16"
    },
    {
      "question": "How many products are stored in the ida_en_two's m_inventory_1w table where warehouse_id matches param17?",
      "Chinese_question": "ida_en_two平台m_inventory_1w表中warehouse_id匹配param17的产品数量是多少?",
      "PQL_query": "SELECT COUNT(ida_en_two.m_inventory_1w.product_id) FROM ida_en_two.m_inventory_1w WHERE ida_en_two.m_inventory_1w.warehouse_id = $param17"
    },
    {
      "question": "Extract the order details including order_id and amount from ida_en_one's m_order_details_1w table where customer_id matches param18.",
      "Chinese_question": "提取ida_en_one平台m_order_details_1w表中customer_id与param18匹配的订单详情,包括order_id和金额。",
      "PQL_query": "SELECT ida_en_one.m_order_details_1w.order_id, ida_en_one.m_order_details_1w.amount FROM ida_en_one.m_order_details_1w WHERE ida_en_one.m_order_details_1w.customer_id = $param18"
    },
    {
      "question": "Retrieve the list of active campaigns from ida_en_two's m_campaigns_1w table with campaign_id matching param19.",
      "Chinese_question": "检索ida_en_two平台m_campaigns_1w表中campaign_id匹配param19的活跃活动列表。",
      "PQL_query": "SELECT ida_en_two.m_campaigns_1w.campaign_name, ida_en_two.m_campaigns_1w.status FROM ida_en_two.m_campaigns_1w WHERE ida_en_two.m_campaigns_1w.campaign_id = $param19"
    },
    {
      "question": "Get the feedback scores and comments from the m_feedback_1w table on ida_en_one for feedback_id matching param20.",
      "Chinese_question": "获取ida_en_one平台m_feedback_1w表中feedback_id匹配param20的反馈评分和评论。",
      "PQL_query": "SELECT ida_en_one.m_feedback_1w.feedback_score, ida_en_one.m_feedback_1w.comments FROM ida_en_one.m_feedback_1w WHERE ida_en_one.m_feedback_1w.feedback_id = $param20"
    }
  ],
  "hardware_PSI": [
    {
      "question": "Using hardware TEE, compute the intersection of IDs between the 'ida_en_one' platform's 'm_sales_1w' table and the 'ida_en_two' platform's 'm_marketing_1w' table, and retrieve their names.",
      "Chinese_question": "在使用安全硬件TEE的环境中,计算ida_en_one平台的m_sales_1w表和ida_en_two平台的m_marketing_1w表之间的ID交集,并获取它们的名称。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.m_sales_1w.name FROM ida_en_one.m_sales_1w, ida_en_two.m_marketing_1w WHERE ida_en_one.m_sales_1w.id = ida_en_two.m_marketing_1w.id"
    },
    {
      "question": "Apply TEE hardware to find the intersection of the 'customer_id' from 'ida_en_one' platform's 'm_payments_1w' table and 'ida_en_two' platform's 'm_orders_1w' table and get their transaction amounts.",
      "Chinese_question": "通过TEE硬件查找ida_en_one平台的m_payments_1w表和ida_en_two平台的m_orders_1w表中的customer_id交集,并获取交易金额。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.m_payments_1w.amount FROM ida_en_one.m_payments_1w, ida_en_two.m_orders_1w WHERE ida_en_one.m_payments_1w.customer_id = ida_en_two.m_orders_1w.customer_id"
    },
    {
      "question": "Using TEE technology, perform a privacy-preserving join on the 'ida_en_one' platform's 'employee_records_1w' table and 'ida_en_two' platform's 'security_data_1w' table based on 'emp_id' and find their respective roles.",
      "Chinese_question": "利用TEE技术,在ida_en_one平台的employee_records_1w表和ida_en_two平台的security_data_1w表上基于emp_id进行隐私保护连接,并查找它们的角色。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.employee_records_1w.role FROM ida_en_one.employee_records_1w, ida_en_two.security_data_1w WHERE ida_en_one.employee_records_1w.emp_id = ida_en_two.security_data_1w.emp_id"
    },
    {
      "question": "In a TEE environment, retrieve the balance details by securely joining the 'ida_en_one' platform's 'user_account_1w' table with the 'ida_en_two' platform's 'user_transaction_1w' table using 'account_id'.",
      "Chinese_question": "在TEE环境中,通过将ida_en_one平台的user_account_1w表与ida_en_two平台的user_transaction_1w表使用account_id进行安全连接,检索余额信息。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.user_account_1w.balance FROM ida_en_one.user_account_1w, ida_en_two.user_transaction_1w WHERE ida_en_one.user_account_1w.account_id = ida_en_two.user_transaction_1w.account_id"
    },
    {
      "question": "Leverage hardware TEE to perform a private intersection of product_ids from 'ida_en_one' platform's 'product_inventory_1w' and 'ida_en_two' platform's 'product_sales_1w', and obtain the respective stock levels.",
      "Chinese_question": "利用硬件TEE对ida_en_one平台的product_inventory_1w和ida_en_two平台的product_sales_1w的product_id进行私密交集,并获取相应的库存水平。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.product_inventory_1w.stock_level FROM ida_en_one.product_inventory_1w, ida_en_two.product_sales_1w WHERE ida_en_one.product_inventory_1w.product_id = ida_en_two.product_sales_1w.product_id"
    },
    {
      "question": "Using TEE hardware, discover the overlapping customers between 'ida_en_one' platform's 'customer_data_1w' and 'ida_en_two' platform's 'customer_activity_1w' via 'customer_id' and extract engagement scores.",
      "Chinese_question": "利用TEE硬件,通过customer_id发现ida_en_one平台的customer_data_1w和ida_en_two平台的customer_activity_1w之间的重叠客户,并提取他们的参与评分。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_two.customer_activity_1w.engagement_score FROM ida_en_one.customer_data_1w, ida_en_two.customer_activity_1w WHERE ida_en_one.customer_data_1w.customer_id = ida_en_two.customer_activity_1w.customer_id"
    },
    {
      "question": "Implement a secure intersection of the 'ida_en_one' platform's 'employee_salary_1w' and 'ida_en_two' platform's 'id_verifications_1w' using 'emp_id' in a TEE environment to determine salary records.",
      "Chinese_question": "在TEE环境中,使用emp_id对ida_en_one平台的employee_salary_1w和ida_en_two平台的id_verifications_1w进行安全交集,以确定工资记录。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.employee_salary_1w.salary FROM ida_en_one.employee_salary_1w, ida_en_two.id_verifications_1w WHERE ida_en_one.employee_salary_1w.emp_id = ida_en_two.id_verifications_1w.emp_id"
    },
    {
      "question": "Utilizing TEE for privacy, intersect the 'ida_en_one' platform's 'contract_info_1w' with the 'ida_en_two' platform's 'contract_trials_1w' by 'contract_id' and extract corresponding trial statuses.",
      "Chinese_question": "利用TEE进行隐私保护,通过contract_id交叉ida_en_one平台的contract_info_1w和ida_en_two平台的contract_trials_1w,并提取相应的试验状态。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_two.contract_trials_1w.trial_status FROM ida_en_one.contract_info_1w, ida_en_two.contract_trials_1w WHERE ida_en_one.contract_info_1w.contract_id = ida_en_two.contract_trials_1w.contract_id"
    },
    {
      "question": "Under a TEE setting, fetch department names by securely intersecting 'department_data_1w' from 'ida_en_one' and 'access_logs_1w' from 'ida_en_two' using 'dept_id'.",
      "Chinese_question": "在TEE环境下,通过安全交叉ida_en_one的department_data_1w和ida_en_two的access_logs_1w,使用dept_id来获取部门名称。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.department_data_1w.dept_name FROM ida_en_one.department_data_1w, ida_en_two.access_logs_1w WHERE ida_en_one.department_data_1w.dept_id = ida_en_two.access_logs_1w.dept_id"
    },
    {
      "question": "With the help of TEE, perform a private join on 'ida_en_one' platform's 'm_inventory_1w' and 'ida_en_two' platform's 'm_sales_log_1w' based on 'item_id' to find available quantities.",
      "Chinese_question": "借助TEE,基于item_id对ida_en_one平台的m_inventory_1w和ida_en_two平台的m_sales_log_1w进行私密连接,以查找可用数量。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.m_inventory_1w.quantity FROM ida_en_one.m_inventory_1w, ida_en_two.m_sales_log_1w WHERE ida_en_one.m_inventory_1w.item_id = ida_en_two.m_sales_log_1w.item_id"
    },
    {
      "question": "Employ TEE to securely calculate shared project IDs from 'ida_en_one' platform's 'project_assignments_1w' and 'ida_en_two' platform's 'project_updates_1w', fetching the related update notes.",
      "Chinese_question": "利用TEE以安全方式计算ida_en_one平台的project_assignments_1w和ida_en_two平台的project_updates_1w中的共享项目ID,并获取相关更新备注。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_two.project_updates_1w.update_notes FROM ida_en_one.project_assignments_1w, ida_en_two.project_updates_1w WHERE ida_en_one.project_assignments_1w.project_id = ida_en_two.project_updates_1w.project_id"
    },
    {
      "question": "In a secure hardware environment, identify common 'id' entries from the 'ida_en_one' platform's 'm_products_1w' and 'ida_en_two' platform's 'm_analysis_1w', and retrieve category data.",
      "Chinese_question": "在安全硬件环境中,识别ida_en_one平台的m_products_1w和ida_en_two平台的m_analysis_1w中共同的id条目,并获取类别数据。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.m_products_1w.category FROM ida_en_one.m_products_1w, ida_en_two.m_analysis_1w WHERE ida_en_one.m_products_1w.id = ida_en_two.m_analysis_1w.id"
    },
    {
      "question": "Utilize TEE to find overlapping account numbers from 'ida_en_one' platform's 'account_summary_1w' and 'ida_en_two' platform's 'transaction_records_1w', pulling balance details.",
      "Chinese_question": "利用TEE查找ida_en_one平台的account_summary_1w和ida_en_two平台的transaction_records_1w中重叠的账户号,拉取余额详情。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.account_summary_1w.balance FROM ida_en_one.account_summary_1w, ida_en_two.transaction_records_1w WHERE ida_en_one.account_summary_1w.account_number = ida_en_two.transaction_records_1w.account_number"
    },
    {
      "question": "By utilizing TEE, determine intersecting employee IDs from 'ida_en_one' platform's 'staff_details_1w' and 'ida_en_two' platform's 'staff_performance_1w', and extract performance scores.",
      "Chinese_question": "通过使用TEE,确定ida_en_one平台的staff_details_1w和ida_en_two平台的staff_performance_1w中的交叉员工ID,并提取绩效评分。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_two.staff_performance_1w.performance_score FROM ida_en_one.staff_details_1w, ida_en_two.staff_performance_1w WHERE ida_en_one.staff_details_1w.emp_id = ida_en_two.staff_performance_1w.emp_id"
    },
    {
      "question": "In a TEE setup, acquire order statuses by processing a private join between 'ida_en_one' platform's 'order_list_1w' and 'ida_en_two' platform's 'shipment_info_1w' through 'order_id'.",
      "Chinese_question": "在TEE设置中,通过order_id在ida_en_one平台的order_list_1w和ida_en_two平台的shipment_info_1w之间进行私有连接,以获取订单状态。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.order_list_1w.order_status FROM ida_en_one.order_list_1w, ida_en_two.shipment_info_1w WHERE ida_en_one.order_list_1w.order_id = ida_en_two.shipment_info_1w.order_id"
    },
    {
      "question": "Employing TEE hardware, find shared user IDs between 'ida_en_one' platform's 'user_profiles_1w' and 'ida_en_two' platform's 'user_engagement_1w', and retrieve engagement types.",
      "Chinese_question": "利用TEE硬件,找出ida_en_one平台的user_profiles_1w和ida_en_two平台的user_engagement_1w之间的共享用户ID,并检索参与类型。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_two.user_engagement_1w.engagement_type FROM ida_en_one.user_profiles_1w, ida_en_two.user_engagement_1w WHERE ida_en_one.user_profiles_1w.user_id = ida_en_two.user_engagement_1w.user_id"
    },
    {
      "question": "Leverage TEE hardware to perform a secure intersection task on 'ida_en_one' platform's 'benefit_plan_1w' with 'ida_en_two' platform's 'enrollment_data_1w' using 'plan_id', to gather participant counts.",
      "Chinese_question": "借助TEE硬件,通过plan_id对ida_en_one平台的benefit_plan_1w与ida_en_two平台的enrollment_data_1w进行安全交集任务,以收集参与者数量。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.benefit_plan_1w.participant_count FROM ida_en_one.benefit_plan_1w, ida_en_two.enrollment_data_1w WHERE ida_en_one.benefit_plan_1w.plan_id = ida_en_two.enrollment_data_1w.plan_id"
    },
    {
      "question": "In a confidential computing environment using TEE, intersect 'department_id' from 'ida_en_one' platform's 'm_employment_1w' and 'ida_en_two' platform's 'm_dept_logs_1w', and obtain department names.",
      "Chinese_question": "在使用TEE的机密计算环境中,对ida_en_one平台的m_employment_1w与ida_en_two平台的m_dept_logs_1w的department_id进行交集,并获取部门名称。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_two.m_dept_logs_1w.dept_name FROM ida_en_one.m_employment_1w, ida_en_two.m_dept_logs_1w WHERE ida_en_one.m_employment_1w.department_id = ida_en_two.m_dept_logs_1w.department_id"
    },
    {
      "question": "Execute a private computation through TEE by merging 'project_id' from 'ida_en_one' platform's 'project_partners_1w' and 'ida_en_two' platform's 'project_funding_1w' to view funding values.",
      "Chinese_question": "通过TEE执行一个私密计算,通过合并ida_en_one平台的project_partners_1w和ida_en_two平台的project_funding_1w的project_id以查看资金值。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_two.project_funding_1w.funding_value FROM ida_en_one.project_partners_1w, ida_en_two.project_funding_1w WHERE ida_en_one.project_partners_1w.project_id = ida_en_two.project_funding_1w.project_id"
    },
    {
      "question": "In a hardware TEE setting, compute the intersection of email addresses from the 'customer_db' table at the 'ida_en_one' platform and 'user_db' table at the 'ida_en_two' platform.",
      "Chinese_question": "在TEE硬件环境中,从ida_en_one平台的customer_db表和ida_en_two平台的user_db表计算电子邮件地址的交集。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.customer_db.email FROM ida_en_one.customer_db, ida_en_two.user_db WHERE ida_en_one.customer_db.email = ida_en_two.user_db.email"
    },
    {
      "question": "Use TEE hardware to securely join the 'purchase_history' table from 'ida_en_one' and the 'promotion_tracker' table from 'ida_en_two' based on user_id, and retrieve matching transaction dates.",
      "Chinese_question": "使用TEE硬件,通过user_id安全连接ida_en_one平台的purchase_history表和ida_en_two平台的promotion_tracker表,并检索匹配的交易日期。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.purchase_history.transaction_date FROM ida_en_one.purchase_history, ida_en_two.promotion_tracker WHERE ida_en_one.purchase_history.user_id = ida_en_two.promotion_tracker.user_id"
    },
    {
      "question": "With hardware TEE, fetch phone numbers from the 'contacts' table on 'ida_en_one' that match entries in the 'directory' table on 'ida_en_two'.",
      "Chinese_question": "在硬件TEE环境中,获取ida_en_one平台的contacts表中与ida_en_two平台的directory表相匹配的电话号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.contacts.phone_number FROM ida_en_one.contacts, ida_en_two.directory WHERE ida_en_one.contacts.phone_number = ida_en_two.directory.phone_number"
    },
    {
      "question": "Using TEE, calculate the overlapping 'product_ids' from 'sale_records' on 'ida_en_one' and 'inventory_logs' on 'ida_en_two'.",
      "Chinese_question": "借助TEE计算ida_en_one平台的sale_records表与ida_en_two平台的inventory_logs表中重叠的product_ids。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.sale_records.product_id FROM ida_en_one.sale_records, ida_en_two.inventory_logs WHERE ida_en_one.sale_records.product_id = ida_en_two.inventory_logs.product_id"
    },
    {
      "question": "Find common passport numbers using the TEE between 'travel_records' of 'ida_en_one' and 'visa_reports' of 'ida_en_two'.",
      "Chinese_question": "使用TEE环境查找ida_en_one平台的travel_records表和ida_en_two平台的visa_reports表中的通用护照号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.travel_records.passport_number FROM ida_en_one.travel_records, ida_en_two.visa_reports WHERE ida_en_one.travel_records.passport_number = ida_en_two.visa_reports.passport_number"
    },
    {
      "question": "Securely compute shared license plate numbers between 'vehicle_registry' at 'ida_en_one' and 'parking_records' at 'ida_en_two' using TEE hardware.",
      "Chinese_question": "在TEE硬件环境中安全地计算ida_en_one平台的vehicle_registry表和ida_en_two平台的parking_records表中的共享车牌号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.vehicle_registry.license_plate FROM ida_en_one.vehicle_registry, ida_en_two.parking_records WHERE ida_en_one.vehicle_registry.license_plate = ida_en_two.parking_records.license_plate"
    },
    {
      "question": "Utilize TEE to identify user_id overlaps between 'app_usage' at the 'ida_en_one' platform and 'web_activity' at 'ida_en_two'.",
      "Chinese_question": "利用TEE识别ida_en_one平台的app_usage表与ida_en_two平台的web_activity表中user_id的重叠部分。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.app_usage.user_id FROM ida_en_one.app_usage, ida_en_two.web_activity WHERE ida_en_one.app_usage.user_id = ida_en_two.web_activity.user_id"
    },
    {
      "question": "Using TEE hardware, compute matching order_ids from the 'orders' table at 'ida_en_one' and 'shipment' table at 'ida_en_two'.",
      "Chinese_question": "使用TEE硬件计算ida_en_one平台的orders表和ida_en_two平台的shipment表中的匹配order_ids。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.orders.order_id FROM ida_en_one.orders, ida_en_two.shipment WHERE ida_en_one.orders.order_id = ida_en_two.shipment.order_id"
    },
    {
      "question": "In the TEE setting, retrieve intersecting employee ID lists from 'payroll' of 'ida_en_one' and 'hr_system' of 'ida_en_two'.",
      "Chinese_question": "在TEE环境中检索ida_en_one平台的payroll表和ida_en_two平台的hr_system表中的交叉员工ID列表。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.payroll.employee_id FROM ida_en_one.payroll, ida_en_two.hr_system WHERE ida_en_one.payroll.employee_id = ida_en_two.hr_system.employee_id"
    },
    {
      "question": "Compute social security number overlaps using TEE between 'tax_records' at 'ida_en_one' and 'insurance_claims' at 'ida_en_two'.",
      "Chinese_question": "在TEE环境中计算ida_en_one平台的tax_records表和ida_en_two平台的insurance_claims表的社会保障号码重叠。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.tax_records.ssn FROM ida_en_one.tax_records, ida_en_two.insurance_claims WHERE ida_en_one.tax_records.ssn = ida_en_two.insurance_claims.ssn"
    },
    {
      "question": "Identify the common bank account numbers present in 'transactions' table from 'ida_en_one' and 'bank_db' table from 'ida_en_two' using TEE.",
      "Chinese_question": "使用TEE识别ida_en_one平台的transactions表和ida_en_two平台的bank_db表中存在的银行账户号交集。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.transactions.account_number FROM ida_en_one.transactions, ida_en_two.bank_db WHERE ida_en_one.transactions.account_number = ida_en_two.bank_db.account_number"
    },
    {
      "question": "Employ TEE hardware to find overlapping membership IDs from 'fitness_center' of 'ida_en_one' and 'library_records' of 'ida_en_two'.",
      "Chinese_question": "借助TEE硬件查找ida_en_one平台的fitness_center表和ida_en_two平台的library_records表中的重叠会员ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.fitness_center.membership_id FROM ida_en_one.fitness_center, ida_en_two.library_records WHERE ida_en_one.fitness_center.membership_id = ida_en_two.library_records.membership_id"
    },
    {
      "question": "Determine shared vendor IDs in 'supplier_list' from 'ida_en_one' and 'marketplace' from 'ida_en_two' using TEE technology.",
      "Chinese_question": "使用TEE技术确定ida_en_one平台的supplier_list表和ida_en_two平台的marketplace表中的共同供应商ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.supplier_list.vendor_id FROM ida_en_one.supplier_list, ida_en_two.marketplace WHERE ida_en_one.supplier_list.vendor_id = ida_en_two.marketplace.vendor_id"
    },
    {
      "question": "With the assistance of TEE, retrieve intersecting credit card numbers from 'payment_methods' table of 'ida_en_one' and 'billing_info' of 'ida_en_two'.",
      "Chinese_question": "在TEE硬件的帮助下,从ida_en_one平台的payment_methods表和ida_en_two平台的billing_info表中检索交叉信用卡号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.payment_methods.card_number FROM ida_en_one.payment_methods, ida_en_two.billing_info WHERE ida_en_one.payment_methods.card_number = ida_en_two.billing_info.card_number"
    },
    {
      "question": "Utilize hardware TEE to find overlapping health insurance policy numbers between 'healthcare_records' at 'ida_en_one' and 'insurance_policies' at 'ida_en_two'.",
      "Chinese_question": "使用硬件TEE查找ida_en_one平台的healthcare_records表和ida_en_two平台的insurance_policies表之间重叠的健康保险保单号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.healthcare_records.policy_number FROM ida_en_one.healthcare_records, ida_en_two.insurance_policies WHERE ida_en_one.healthcare_records.policy_number = ida_en_two.insurance_policies.policy_number"
    },
    {
      "question": "Using TEE, compute matching parcel tracking numbers from 'delivery_services' on 'ida_en_one' and 'logistics_info' on 'ida_en_two'.",
      "Chinese_question": "借助TEE计算ida_en_one平台的delivery_services表与ida_en_two平台的logistics_info表中匹配的包裹跟踪号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.delivery_services.tracking_number FROM ida_en_one.delivery_services, ida_en_two.logistics_info WHERE ida_en_one.delivery_services.tracking_number = ida_en_two.logistics_info.tracking_number"
    },
    {
      "question": "In the TEE environment, identify the overlapping study IDs between 'academic_records' of 'ida_en_one' and 'research_data' of 'ida_en_two'.",
      "Chinese_question": "在TEE环境中识别ida_en_one平台的academic_records表和ida_en_two平台的research_data表中的重叠研究ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.academic_records.study_id FROM ida_en_one.academic_records, ida_en_two.research_data WHERE ida_en_one.academic_records.study_id = ida_en_two.research_data.study_id"
    },
    {
      "question": "Securely gather overlapping guest IDs from 'hotel_bookings' on 'ida_en_one' and 'event_attendees' on 'ida_en_two' using TEE.",
      "Chinese_question": "使用TEE安全地从ida_en_one平台的hotel_bookings表和ida_en_two平台的event_attendees表中收集交叉的客人ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.hotel_bookings.guest_id FROM ida_en_one.hotel_bookings, ida_en_two.event_attendees WHERE ida_en_one.hotel_bookings.guest_id = ida_en_two.event_attendees.guest_id"
    },
    {
      "question": "With TEE, calculate the intersecting serial numbers from 'product_inventory' at 'ida_en_one' and 'manufacturing_data' at 'ida_en_two'.",
      "Chinese_question": "使用TEE计算ida_en_one平台的product_inventory表和ida_en_two平台的manufacturing_data表中交叉的序列号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.product_inventory.serial_number FROM ida_en_one.product_inventory, ida_en_two.manufacturing_data WHERE ida_en_one.product_inventory.serial_number = ida_en_two.manufacturing_data.serial_number"
    },
    {
      "question": "In the hardware TEE context, compute overlapping visitor badge numbers from 'visitor_logs' of 'ida_en_one' and 'building_access' of 'ida_en_two'.",
      "Chinese_question": "在硬件TEE环境中计算ida_en_one平台的visitor_logs表和ida_en_two平台的building_access表中的交叉访客徽章号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ida_en_one.visitor_logs.badge_number FROM ida_en_one.visitor_logs, ida_en_two.building_access WHERE ida_en_one.visitor_logs.badge_number = ida_en_two.building_access.badge_number"
    },
    {
      "question": "In a secure TEE environment, determine the common customer names from the 'customer_data' table at 'platform_one' and 'client_info' table at 'platform_two'.",
      "Chinese_question": "在安全的TEE环境下,从platform_one平台的customer_data表和platform_two平台的client_info表中确定共有的客户名称。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ platform_one.customer_data.name FROM platform_one.customer_data, platform_two.client_info WHERE platform_one.customer_data.name = platform_two.client_info.name"
    },
    {
      "question": "Using TEE, find the shared order IDs in 'orders_table' of 'platform_A' and 'sales_data' of 'platform_B'.",
      "Chinese_question": "使用TEE硬件查找platform_A平台的orders_table和platform_B平台的sales_data中共享的订单ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ platform_A.orders_table.order_id FROM platform_A.orders_table, platform_B.sales_data WHERE platform_A.orders_table.order_id = platform_B.sales_data.order_id"
    },
    {
      "question": "Extract overlapping social security numbers from 'employee_info' at 'enterprise_1' and 'worker_data' at 'enterprise_2' in a TEE context.",
      "Chinese_question": "在TEE上下文中提取enterprise_1平台的employee_info和enterprise_2平台的worker_data的重叠社会安全号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ enterprise_1.employee_info.ssn FROM enterprise_1.employee_info, enterprise_2.worker_data WHERE enterprise_1.employee_info.ssn = enterprise_2.worker_data.ssn"
    },
    {
      "question": "Identify shared transaction IDs in 'transactions_2023' from 'platform_alpha' and 'transactions_backup' from 'platform_beta' using TEE.",
      "Chinese_question": "使用TEE识别platform_alpha平台的transactions_2023和platform_beta平台的transactions_backup中的共享交易ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ platform_alpha.transactions_2023.transaction_id FROM platform_alpha.transactions_2023, platform_beta.transactions_backup WHERE platform_alpha.transactions_2023.transaction_id = platform_beta.transactions_backup.transaction_id"
    },
    {
      "question": "Compute the common user logins from 'user_logs' of 'system_one' and 'auth_logs' of 'system_two' within a TEE environment.",
      "Chinese_question": "在TEE环境中计算system_one系统的user_logs和system_two系统的auth_logs的共有用户登录名。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ system_one.user_logs.login FROM system_one.user_logs, system_two.auth_logs WHERE system_one.user_logs.login = system_two.auth_logs.login"
    },
    {
      "question": "In a TEE setting, determine which products are listed both in 'product_catalog' of 'vendor_one' and 'product_list' of 'vendor_two'.",
      "Chinese_question": "在TEE设置下,确定在vendor_one卖家的product_catalog和vendor_two卖家的product_list中都列出的产品。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ vendor_one.product_catalog.product_name FROM vendor_one.product_catalog, vendor_two.product_list WHERE vendor_one.product_catalog.product_name = vendor_two.product_list.product_name"
    },
    {
      "question": "Using TEE, identify employees who appear in both 'staff_records' of 'corp_alpha' and 'hr_database' of 'corp_beta'.",
      "Chinese_question": "使用TEE识别出现在corp_alpha公司的staff_records和corp_beta公司的hr_database中的员工。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ corp_alpha.staff_records.employee_id FROM corp_alpha.staff_records, corp_beta.hr_database WHERE corp_alpha.staff_records.employee_id = corp_beta.hr_database.employee_id"
    },
    {
      "question": "Extract overlapping phone numbers from 'contact_info' at 'enterprise_X' and 'phone_numbers' at 'enterprise_Y' with TEE support.",
      "Chinese_question": "在TEE支持下,从enterprise_X企业的contact_info和enterprise_Y企业的phone_numbers提取重叠的电话号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ enterprise_X.contact_info.phone_number FROM enterprise_X.contact_info, enterprise_Y.phone_numbers WHERE enterprise_X.contact_info.phone_number = enterprise_Y.phone_numbers.phone_number"
    },
    {
      "question": "Find the matching credit card numbers in 'payment_methods' of 'financial_service_one' and 'cards_data' of 'financial_service_two' using TEE.",
      "Chinese_question": "使用TEE查找financial_service_one的payment_methods和financial_service_two的cards_data中的匹配信用卡号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ financial_service_one.payment_methods.card_number FROM financial_service_one.payment_methods, financial_service_two.cards_data WHERE financial_service_one.payment_methods.card_number = financial_service_two.cards_data.card_number"
    },
    {
      "question": "In a secure TEE environment, uncover shared project IDs between 'projects_management' of 'company_A' and 'projects_directory' of 'company_B'.",
      "Chinese_question": "在安全的TEE环境中,揭示company_A的projects_management和company_B的projects_directory之间共享的项目ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ company_A.projects_management.project_id FROM company_A.projects_management, company_B.projects_directory WHERE company_A.projects_management.project_id = company_B.projects_directory.project_id"
    },
    {
      "question": "Using TEE hardware, calculate intersecting contract IDs from 'contracts_db' of 'legal_firm_one' and 'agreements_data' of 'legal_firm_two'.",
      "Chinese_question": "使用TEE硬件计算出现在legal_firm_one的contracts_db和legal_firm_two的agreements_data中的交叉合同ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ legal_firm_one.contracts_db.contract_id FROM legal_firm_one.contracts_db, legal_firm_two.agreements_data WHERE legal_firm_one.contracts_db.contract_id = legal_firm_two.agreements_data.contract_id"
    },
    {
      "question": "In a hardware-assisted TEE environment, find common supplier codes in 'supplier_list' of 'retailer_one' and 'vendor_data' of 'retailer_two'.",
      "Chinese_question": "在硬件支持的TEE环境中,找到retailer_one的supplier_list和retailer_two的vendor_data中的通用供应商代码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ retailer_one.supplier_list.supplier_code FROM retailer_one.supplier_list, retailer_two.vendor_data WHERE retailer_one.supplier_list.supplier_code = retailer_two.vendor_data.supplier_code"
    },
    {
      "question": "Identify customer IDs appearing in both 'loyalty_program' of 'shop_1' and 'reward_list' of 'shop_2' using TEE.",
      "Chinese_question": "使用TEE识别出现在shop_1的loyalty_program和shop_2的reward_list中的客户ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ shop_1.loyalty_program.customer_id FROM shop_1.loyalty_program, shop_2.reward_list WHERE shop_1.loyalty_program.customer_id = shop_2.reward_list.customer_id"
    },
    {
      "question": "In TEE environment, determine which invoice numbers from 'billing_records' of 'accounting_one' match with 'invoice_data' of 'accounting_two'.",
      "Chinese_question": "在TEE环境中,确定accounting_one的billing_records中的哪些发票号码与accounting_two的invoice_data匹配。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ accounting_one.billing_records.invoice_number FROM accounting_one.billing_records, accounting_two.invoice_data WHERE accounting_one.billing_records.invoice_number = accounting_two.invoice_data.invoice_number"
    },
    {
      "question": "Using TEE, compute shared asset tags found in 'inventory_data' of 'warehouse_A' and 'asset_records' of 'warehouse_B'.",
      "Chinese_question": "使用TEE计算在warehouse_A的inventory_data和warehouse_B的asset_records中找到的共享资产标签。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ warehouse_A.inventory_data.asset_tag FROM warehouse_A.inventory_data, warehouse_B.asset_records WHERE warehouse_A.inventory_data.asset_tag = warehouse_B.asset_records.asset_tag"
    },
    {
      "question": "In a TEE context, extract overlapping patent numbers from 'patent_registry' at 'innovation_lab_one' and 'patents_db' at 'innovation_lab_two'.",
      "Chinese_question": "在TEE上下文中提取innovation_lab_one的patent_registry和innovation_lab_two的patents_db中的重叠专利号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ innovation_lab_one.patent_registry.patent_number FROM innovation_lab_one.patent_registry, innovation_lab_two.patents_db WHERE innovation_lab_one.patent_registry.patent_number = innovation_lab_two.patents_db.patent_number"
    },
    {
      "question": "Determine shared access codes in 'access_control' of 'building_1' and 'entry_system' of 'building_2' using TEE hardware.",
      "Chinese_question": "使用TEE硬件确定building_1的access_control和building_2的entry_system中的共享访问代码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ building_1.access_control.access_code FROM building_1.access_control, building_2.entry_system WHERE building_1.access_control.access_code = building_2.entry_system.access_code"
    },
    {
      "question": "Find mutual insurance policy numbers in 'policy_records' from 'insurance_co_one' and 'insurance_db' from 'insurance_co_two' with TEE assistance.",
      "Chinese_question": "在TEE的帮助下,在insurance_co_one的policy_records和insurance_co_two的insurance_db中找到相互的保险单号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ insurance_co_one.policy_records.policy_number FROM insurance_co_one.policy_records, insurance_co_two.insurance_db WHERE insurance_co_one.policy_records.policy_number = insurance_co_two.insurance_db.policy_number"
    },
    {
      "question": "With TEE, discover common student IDs between 'students_registry' of 'university_X' and 'students_database' of 'university_Y'.",
      "Chinese_question": "使用TEE发现university_X的students_registry和university_Y的students_database之间的共同学生ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ university_X.students_registry.student_id FROM university_X.students_registry, university_Y.students_database WHERE university_X.students_registry.student_id = university_Y.students_database.student_id"
    },
    {
      "question": "In a TEE hardware environment, compute the shared serial numbers between 'device_inventory' of 'tech_firm_one' and 'equipment_list' of 'tech_firm_two'.",
      "Chinese_question": "在TEE硬件环境中,计算tech_firm_one的device_inventory和tech_firm_two的equipment_list之间的共享序列号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ tech_firm_one.device_inventory.serial_number FROM tech_firm_one.device_inventory, tech_firm_two.equipment_list WHERE tech_firm_one.device_inventory.serial_number = tech_firm_two.equipment_list.serial_number"
    },
    {
      "question": "In a secure TEE setting, find the intersection of employee IDs from 'employee_database' on 'hr_platform' and 'contractor_records' on 'contractor_platform'.",
      "Chinese_question": "在安全的TEE环境中,从hr_platform平台的employee_database表和contractor_platform平台的contractor_records表中找到共同的员工ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ hr_platform.employee_database.id FROM hr_platform.employee_database, contractor_platform.contractor_records WHERE hr_platform.employee_database.id = contractor_platform.contractor_records.id"
    },
    {
      "question": "Using a TEE environment, retrieve shared product IDs from 'product_inventory' at 'supplier_one' and 'product_sales' at 'supplier_two'.",
      "Chinese_question": "使用TEE环境,从supplier_one平台的product_inventory表和supplier_two平台的product_sales表中检索共享产品ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ supplier_one.product_inventory.product_id FROM supplier_one.product_inventory, supplier_two.product_sales WHERE supplier_one.product_inventory.product_id = supplier_two.product_sales.product_id"
    },
    {
      "question": "In a secure computation using TEE, find common IDs between 'student_list' at 'university_a' and 'alumni_records' at 'university_b'.",
      "Chinese_question": "在安全计算使用TEE的情况下,从university_a平台的student_list表和university_b平台的alumni_records表中找到共有的ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ university_a.student_list.student_id FROM university_a.student_list, university_b.alumni_records WHERE university_a.student_list.student_id = university_b.alumni_records.alumni_id"
    },
    {
      "question": "Determine shared customer emails using TEE between 'customer_emails' on 'shop_platform' and 'subscriber_emails' on 'email_service'.",
      "Chinese_question": "使用TEE确定shop_platform平台的customer_emails表和email_service平台的subscriber_emails表之间的共享客户电子邮件。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ shop_platform.customer_emails.email FROM shop_platform.customer_emails, email_service.subscriber_emails WHERE shop_platform.customer_emails.email = email_service.subscriber_emails.email"
    },
    {
      "question": "Identify common transaction IDs through TEE in 'sales_data' of 'retail_platform' and 'transaction_records' of 'bank_platform'.",
      "Chinese_question": "通过TEE识别retail_platform平台的sales_data表和bank_platform平台的transaction_records表中的共同交易ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ retail_platform.sales_data.transaction_id FROM retail_platform.sales_data, bank_platform.transaction_records WHERE retail_platform.sales_data.transaction_id = bank_platform.transaction_records.transaction_id"
    },
    {
      "question": "In a TEE environment, determine the common project codes from 'project_details' on 'firm_project' and 'research_codes' on 'university_research'.",
      "Chinese_question": "在TEE环境中,确定firm_project平台的project_details表和university_research平台的research_codes表中的共同项目代码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ firm_project.project_details.project_code FROM firm_project.project_details, university_research.research_codes WHERE firm_project.project_details.project_code = university_research.research_codes.code"
    },
    {
      "question": "Retrieve shared account numbers using TEE from 'bank_accounts' on 'local_bank' and 'mobile_payments' on 'payment_gateway'.",
      "Chinese_question": "使用TEE从local_bank平台的bank_accounts表和payment_gateway平台的mobile_payments表中检索共享账号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ local_bank.bank_accounts.account_number FROM local_bank.bank_accounts, payment_gateway.mobile_payments WHERE local_bank.bank_accounts.account_number = payment_gateway.mobile_payments.account_number"
    },
    {
      "question": "Find overlapping tax IDs in TEE from 'company_tax' on 'business_platform' and 'personal_tax' on 'government_service'.",
      "Chinese_question": "在TEE中查找business_platform平台的company_tax表和government_service平台的personal_tax表中的重叠税号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ business_platform.company_tax.tax_id FROM business_platform.company_tax, government_service.personal_tax WHERE business_platform.company_tax.tax_id = government_service.personal_tax.tax_id"
    },
    {
      "question": "Using a TEE, identify common insurance numbers from 'employee_insurance' at 'corporate_insurance' and 'public_insurance_data' at 'insurance_agency'.",
      "Chinese_question": "使用TEE识别corporate_insurance平台的employee_insurance表和insurance_agency平台的public_insurance_data表中的共同保险号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ corporate_insurance.employee_insurance.insurance_number FROM corporate_insurance.employee_insurance, insurance_agency.public_insurance_data WHERE corporate_insurance.employee_insurance.insurance_number = insurance_agency.public_insurance_data.insurance_number"
    },
    {
      "question": "Detect shared vehicle VINs in TEE from 'vehicle_registry' on 'transport_platform' and 'stolen_vehicle_reports' on 'police_database'.",
      "Chinese_question": "在TEE中检测从transport_platform平台的vehicle_registry表和police_database平台的stolen_vehicle_reports表中的共享车辆识别号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ transport_platform.vehicle_registry.vin FROM transport_platform.vehicle_registry, police_database.stolen_vehicle_reports WHERE transport_platform.vehicle_registry.vin = police_database.stolen_vehicle_reports.vin"
    },
    {
      "question": "Discover common supplier IDs using a TEE between 'supplier_list' on 'manufacturing_database' and 'approved_vendors' on 'procurement_system'.",
      "Chinese_question": "使用TEE在manufacturing_database平台的supplier_list表和procurement_system平台的approved_vendors表之间发现共同的供应商ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ manufacturing_database.supplier_list.supplier_id FROM manufacturing_database.supplier_list, procurement_system.approved_vendors WHERE manufacturing_database.supplier_list.supplier_id = procurement_system.approved_vendors.vendor_id"
    },
    {
      "question": "During secure computations with TEE, find customer account IDs in 'client_accounts' on 'finance_platform' and 'service_users' on 'web_service'.",
      "Chinese_question": "在使用TEE的安全计算中,查找finance_platform平台的client_accounts表和web_service平台的service_users表中的客户账户ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ finance_platform.client_accounts.account_id FROM finance_platform.client_accounts, web_service.service_users WHERE finance_platform.client_accounts.account_id = web_service.service_users.user_id"
    },
    {
      "question": "Determine overlapping social security numbers with TEE from 'employee_records' at 'company_HR' and 'government_social_security' at 'social_system'.",
      "Chinese_question": "使用TEE在company_HR平台的employee_records表和social_system平台的government_social_security表中确定重叠的社会保障号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ company_HR.employee_records.ssn FROM company_HR.employee_records, social_system.government_social_security WHERE company_HR.employee_records.ssn = social_system.government_social_security.ssn"
    },
    {
      "question": "Using TEE, find shared client IDs from 'business_clients' at 'client_database' and 'service_members' at 'member_service'.",
      "Chinese_question": "使用TEE从client_database平台的business_clients表和member_service平台的service_members表中查找共享的客户ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ client_database.business_clients.client_id FROM client_database.business_clients, member_service.service_members WHERE client_database.business_clients.client_id = member_service.service_members.member_id"
    },
    {
      "question": "Through TEE, detect mutual student IDs from 'college_students' at 'collegiate_system' and 'online_course_enrollments' at 'e_learning'.",
      "Chinese_question": "通过TEE检测collegiate_system平台的college_students表和e_learning平台的online_course_enrollments表中的共有学生ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ collegiate_system.college_students.student_id FROM collegiate_system.college_students, e_learning.online_course_enrollments WHERE collegiate_system.college_students.student_id = e_learning.online_course_enrollments.student_id"
    },
    {
      "question": "In a TEE context, retrieve common health IDs from 'medical_patients' on 'hospital_records' and 'insurance_claims' on 'insurance_system'.",
      "Chinese_question": "在TEE环境中,从hospital_records平台的medical_patients表和insurance_system平台的insurance_claims表中检索共有的健康ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ hospital_records.medical_patients.health_id FROM hospital_records.medical_patients, insurance_system.insurance_claims WHERE hospital_records.medical_patients.health_id = insurance_system.insurance_claims.claim_id"
    },
    {
      "question": "Identify matching driver licenses using TEE in 'driver_records' at 'transport_authority' and 'rental_agreements' at 'car_rental_service'.",
      "Chinese_question": "使用TEE识别transport_authority平台的driver_records表和car_rental_service平台的rental_agreements表中的匹配驾驶执照。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ transport_authority.driver_records.license_number FROM transport_authority.driver_records, car_rental_service.rental_agreements WHERE transport_authority.driver_records.license_number = car_rental_service.rental_agreements.driver_license_number"
    },
    {
      "question": "In a TEE framework, uncover shared patient IDs from 'clinic_visits' at 'healthcare_provider' and 'pharmacy_orders' at 'drugstore_chain'.",
      "Chinese_question": "在TEE框架中,从healthcare_provider平台的clinic_visits表和drugstore_chain平台的pharmacy_orders表中找出共享的病人ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ healthcare_provider.clinic_visits.patient_id FROM healthcare_provider.clinic_visits, drugstore_chain.pharmacy_orders WHERE healthcare_provider.clinic_visits.patient_id = drugstore_chain.pharmacy_orders.customer_id"
    },
    {
      "question": "Using TEE, identify overlapping frequent flyer numbers from 'flight_bookings' on 'airline_system' and 'loyalty_program' on 'rewards_network'.",
      "Chinese_question": "使用TEE识别airline_system平台的flight_bookings表和rewards_network平台的loyalty_program表中重叠的常旅客号码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ airline_system.flight_bookings.ff_number FROM airline_system.flight_bookings, rewards_network.loyalty_program WHERE airline_system.flight_bookings.ff_number = rewards_network.loyalty_program.member_number"
    },
    {
      "question": "In a TEE setup, discover shared registrant identifiers between 'event_registrations' on 'conference_platform' and 'signup_forms' on 'community_service'.",
      "Chinese_question": "在TEE设置中,发现conference_platform平台的event_registrations表和community_service平台的signup_forms表中的共有注册人标识符。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ conference_platform.event_registrations.registrant_id FROM conference_platform.event_registrations, community_service.signup_forms WHERE conference_platform.event_registrations.registrant_id = community_service.signup_forms.participant_id"
    },
    {
      "question": "Using a TEE setup, compute the intersection of customer IDs from 'customer_info' table on 'retail_platform' and 'loyalty_program' table on 'service_platform'.",
      "Chinese_question": "在TEE环境中,对retail_platform平台的customer_info表和service_platform平台的loyalty_program表的客户ID进行交集计算。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ retail_platform.customer_info.customer_id FROM retail_platform.customer_info, service_platform.loyalty_program WHERE retail_platform.customer_info.customer_id = service_platform.loyalty_program.customer_id"
    },
    {
      "question": "Within a TEE, intersect order numbers from 'orders' table on 'ecommerce_platform' and 'shipment_details' table on 'logistics_platform'.",
      "Chinese_question": "在一个TEE中,对ecommerce_platform平台的orders表和logistics_platform平台的shipment_details表的订单号进行交集操作。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ ecommerce_platform.orders.order_number FROM ecommerce_platform.orders, logistics_platform.shipment_details WHERE ecommerce_platform.orders.order_number = logistics_platform.shipment_details.order_number"
    },
    {
      "question": "Securely compute the shared email addresses in 'user_accounts' on 'social_media_platform' and 'newsletter_subs' on 'marketing_platform' using TEE.",
      "Chinese_question": "通过TEE安全计算social_media_platform平台的user_accounts表和marketing_platform平台的newsletter_subs表的共有邮箱地址。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ social_media_platform.user_accounts.email FROM social_media_platform.user_accounts, marketing_platform.newsletter_subs WHERE social_media_platform.user_accounts.email = marketing_platform.newsletter_subs.email"
    },
    {
      "question": "Under TEE, identify which product IDs overlap in 'inventory' from 'store_platform' and 'sales_records' from 'audit_platform'.",
      "Chinese_question": "利用TEE确定store_platform平台的inventory表和audit_platform平台的sales_records表中重复的产品ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ store_platform.inventory.product_id FROM store_platform.inventory, audit_platform.sales_records WHERE store_platform.inventory.product_id = audit_platform.sales_records.product_id"
    },
    {
      "question": "With a TEE, find matching transaction IDs between 'financial_reports' on 'banking_platform' and 'audit_logs' on 'auditor_platform'.",
      "Chinese_question": "在TEE中,查找banking_platform平台的financial_reports表和auditor_platform平台的audit_logs表之间匹配的交易ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ banking_platform.financial_reports.transaction_id FROM banking_platform.financial_reports, auditor_platform.audit_logs WHERE banking_platform.financial_reports.transaction_id = auditor_platform.audit_logs.transaction_id"
    },
    {
      "question": "Determine common patient IDs in 'hospital_records' at 'health_platform' and 'insurance_claims' at 'insurance_platform' with TEE assistance.",
      "Chinese_question": "通过TEE,确定health_platform平台的hospital_records表和insurance_platform平台的insurance_claims表中共同的病人ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ health_platform.hospital_records.patient_id FROM health_platform.hospital_records, insurance_platform.insurance_claims WHERE health_platform.hospital_records.patient_id = insurance_platform.insurance_claims.patient_id"
    },
    {
      "question": "Identify shared student IDs between 'university_registry' on 'education_platform' and 'alumni_data' on 'network_platform' in TEE environment.",
      "Chinese_question": "在TEE环境中,识别education_platform平台的university_registry表和network_platform平台的alumni_data表之间的共同学生ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ education_platform.university_registry.student_id FROM education_platform.university_registry, network_platform.alumni_data WHERE education_platform.university_registry.student_id = network_platform.alumni_data.student_id"
    },
    {
      "question": "Using TEE, find overlapping vendor IDs from 'supplier_list' in 'manufacturing_platform' and 'vendor_history' in 'procurement_platform'.",
      "Chinese_question": "在TEE中,查找manufacturing_platform平台的supplier_list表和procurement_platform平台的vendor_history表中重叠的供应商ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ manufacturing_platform.supplier_list.vendor_id FROM manufacturing_platform.supplier_list, procurement_platform.vendor_history WHERE manufacturing_platform.supplier_list.vendor_id = procurement_platform.vendor_history.vendor_id"
    },
    {
      "question": "Securely determine cross-platform developer IDs between 'dev_accounts' on 'app_platform' and 'code_repositories' on 'git_platform' using TEE.",
      "Chinese_question": "使用TEE,安全地识别app_platform平台的dev_accounts表和git_platform平台的code_repositories表之间的开发者ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ app_platform.dev_accounts.developer_id FROM app_platform.dev_accounts, git_platform.code_repositories WHERE app_platform.dev_accounts.developer_id = git_platform.code_repositories.developer_id"
    },
    {
      "question": "Find shared building codes in 'construction_projects' from 'engineering_platform' and 'safety_records' from 'regulation_platform' via TEE.",
      "Chinese_question": "通过TEE,查找engineering_platform平台的construction_projects表和regulation_platform平台的safety_records表中共有的建筑代码。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ engineering_platform.construction_projects.building_code FROM engineering_platform.construction_projects, regulation_platform.safety_records WHERE engineering_platform.construction_projects.building_code = regulation_platform.safety_records.building_code"
    },
    {
      "question": "Identify overlapping parcel IDs in 'delivery_orders' from 'courier_platform' and 'warehouse_inventory' from 'storage_platform' under TEE.",
      "Chinese_question": "在TEE中,识别courier_platform平台的delivery_orders表和storage_platform平台的warehouse_inventory表中重合的包裹ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ courier_platform.delivery_orders.parcel_id FROM courier_platform.delivery_orders, storage_platform.warehouse_inventory WHERE courier_platform.delivery_orders.parcel_id = storage_platform.warehouse_inventory.parcel_id"
    },
    {
      "question": "In a TEE scenario, find common session IDs between 'user_activity' on 'analytics_platform' and 'audit_sessions' on 'compliance_platform'.",
      "Chinese_question": "在TEE场景中,找出analytics_platform平台的user_activity表和compliance_platform平台的audit_sessions表中的共同会话ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ analytics_platform.user_activity.session_id FROM analytics_platform.user_activity, compliance_platform.audit_sessions WHERE analytics_platform.user_activity.session_id = compliance_platform.audit_sessions.session_id"
    },
    {
      "question": "Discover the intersection of license plate numbers in 'traffic_fines' from 'municipal_platform' and 'parking_tickets' from 'legal_platform' using TEE.",
      "Chinese_question": "使用TEE,发现municipal_platform平台的traffic_fines表和legal_platform平台的parking_tickets表中车牌号的交集。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ municipal_platform.traffic_fines.plate_number FROM municipal_platform.traffic_fines, legal_platform.parking_tickets WHERE municipal_platform.traffic_fines.plate_number = legal_platform.parking_tickets.plate_number"
    },
    {
      "question": "Using TEE, compute which contract numbers overlap between 'service_contracts' on 'telecom_platform' and 'legal_agreements' on 'lawful_platform'.",
      "Chinese_question": "通过TEE,计算telecom_platform平台的service_contracts表和lawful_platform平台的legal_agreements表中重叠的合同编号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ telecom_platform.service_contracts.contract_number FROM telecom_platform.service_contracts, lawful_platform.legal_agreements WHERE telecom_platform.service_contracts.contract_number = lawful_platform.legal_agreements.contract_number"
    },
    {
      "question": "In TEE, intersect job IDs between 'job_board' on 'employment_platform' and 'application_records' on 'hr_platform'.",
      "Chinese_question": "在TEE中,找出employment_platform平台的job_board表和hr_platform平台的application_records表之间的职位ID交集。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ employment_platform.job_board.job_id FROM employment_platform.job_board, hr_platform.application_records WHERE employment_platform.job_board.job_id = hr_platform.application_records.job_id"
    },
    {
      "question": "Securely identify shared vehicle IDs between 'fleet_management' on 'transport_platform' and 'accident_reports' on 'safety_platform' using TEE.",
      "Chinese_question": "通过TEE安全识别transport_platform平台的fleet_management表和safety_platform平台的accident_reports表中的共同车辆ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ transport_platform.fleet_management.vehicle_id FROM transport_platform.fleet_management, safety_platform.accident_reports WHERE transport_platform.fleet_management.vehicle_id = safety_platform.accident_reports.vehicle_id"
    },
    {
      "question": "In a TEE, determine the shared subscriber IDs between 'user_subs' on 'streaming_platform' and 'billing_info' on 'finance_platform'.",
      "Chinese_question": "在TEE中,确定streaming_platform平台的user_subs表和finance_platform平台的billing_info表中共有的订阅者ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ streaming_platform.user_subs.subscriber_id FROM streaming_platform.user_subs, finance_platform.billing_info WHERE streaming_platform.user_subs.subscriber_id = finance_platform.billing_info.subscriber_id"
    },
    {
      "question": "Utilize TEE to intersect membership IDs in 'gym_members' on 'fitness_platform' and 'event_attendees' on 'events_platform'.",
      "Chinese_question": "利用TEE,找出fitness_platform平台的gym_members表和events_platform平台的event_attendees表中会员ID的交集。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ fitness_platform.gym_members.membership_id FROM fitness_platform.gym_members, events_platform.event_attendees WHERE fitness_platform.gym_members.membership_id = events_platform.event_attendees.membership_id"
    },
    {
      "question": "With TEE assistance, compute intersecting permit numbers between 'building_permits' on 'municipal_platform' and 'environmental_approvals' on 'regulation_platform'.",
      "Chinese_question": "在TEE的帮助下,计算municipal_platform平台的building_permits表和regulation_platform平台的environmental_approvals表中相交的许可编号。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ municipal_platform.building_permits.permit_number FROM municipal_platform.building_permits, regulation_platform.environmental_approvals WHERE municipal_platform.building_permits.permit_number = regulation_platform.environmental_approvals.permit_number"
    },
    {
      "question": "During TEE operation, find mutual project IDs in 'ongoing_projects' from 'corporate_platform' and 'investor_reports' from 'financial_platform'.",
      "Chinese_question": "在TEE操作期间,找出corporate_platform平台的ongoing_projects表和financial_platform平台的investor_reports表中共同的项目ID。",
      "PQL_query": "SELECT /*+ JOIN(TEE) */ corporate_platform.ongoing_projects.project_id FROM corporate_platform.ongoing_projects, financial_platform.investor_reports WHERE corporate_platform.ongoing_projects.project_id = financial_platform.investor_reports.project_id"
    }
  ],
  "hardware_MPC": [
    {
      "question": "How can we securely calculate the product of `id` values from the `m_enterprise_1w` table in `ida_en_one` and the `m_security_1w` table in `ida_en_two` using TEE hardware?",
      "Chinese_question": "如何使用TEE硬件安全地计算ida_en_one的m_enterprise_1w表与ida_en_two的m_security_1w表中的id值的乘积?",
      "PQL_query": "select /*+ FUNC(TEE) */ mulonly02(key = ida_en_one.m_enterprise_1w.id, a = ida_en_one.m_enterprise_1w.id, b = ida_en_two.m_security_1w.id) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w;"
    },
    {
      "question": "Using TEE, compute the intersection where `id` in `m_enterprise_1w` from `ida_en_one` matches `id` in `m_security_1w` in `ida_en_two`. What is the product of these values?",
      "Chinese_question": "在id相等的情况下,如何使用TEE安全计算ida_en_one平台下m_enterprise_1w和ida_en_two平台下m_security_1w表里id的乘积?",
      "PQL_query": "select /*+ FUNC(TEE) JOIN(TEE) */ mulonly02(key = ida_en_one.m_enterprise_1w.id, a = ida_en_one.m_enterprise_1w.id, b = ida_en_two.m_security_1w.id) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w where ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "If the `id` columns in `ida_en_one`'s `m_enterprise_1w` table and `ida_en_two`'s `m_security_1w` table have matching values, how can their product be safely computed using TEE?",
      "Chinese_question": "在ida_en_one的m_enterprise_1w表和ida_en_two的m_security_1w表的id列匹配时,如何使用TEE安全计算它们的乘积?",
      "PQL_query": "select /*+ FUNC(TEE) */ mulonly02(key = ida_en_one.m_enterprise_1w.id, a = ida_en_one.m_enterprise_1w.id, b = ida_en_two.m_security_1w.id) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w where ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "In TEE hardware, compute the sum of `id` values from `ida_en_one.m_enterprise_1w` and `ida_en_two.m_security_1w` for matching entries.",
      "Chinese_question": "如何在TEE硬件中计算匹配情况下ida_en_one.m_enterprise_1w和ida_en_two.m_security_1w表中id值的总和?",
      "PQL_query": "select /*+ FUNC(TEE) JOIN(TEE) */ addition02(key = ida_en_one.m_enterprise_1w.id, a = ida_en_one.m_enterprise_1w.id, b = ida_en_two.m_security_1w.id) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w where ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Can we calculate the average of `id` fields in `m_enterprise_1w` of `ida_en_one` and `m_security_1w` of `ida_en_two` securely in TEE hardware?",
      "Chinese_question": "如何使用TEE硬件安全计算ida_en_one的m_enterprise_1w和ida_en_two的m_security_1w表中id字段的平均值?",
      "PQL_query": "select /*+ FUNC(TEE) */ avg02(key = ida_en_one.m_enterprise_1w.id, a = ida_en_one.m_enterprise_1w.id, b = ida_en_two.m_security_1w.id) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w;"
    },
    {
      "question": "Calculate the maximum product of `id` fields from both `m_enterprise_1w` in `ida_en_one` and `m_security_1w` in `ida_en_two` using TEE.",
      "Chinese_question": "如何通过TEE计算ida_en_one.m_enterprise_1w和ida_en_two.m_security_1w表中id字段乘积的最大值?",
      "PQL_query": "select /*+ FUNC(TEE) */ max(mulonly02(key = ida_en_one.m_enterprise_1w.id, a = ida_en_one.m_enterprise_1w.id, b = ida_en_two.m_security_1w.id)) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w;"
    },
    {
      "question": "Securely determine how many records have matching `id` values in `ida_en_one.m_enterprise_1w` and `ida_en_two.m_security_1w` using TEE.",
      "Chinese_question": "如何使用TEE硬件安全计算ida_en_one.m_enterprise_1w和ida_en_two.m_security_1w表中id匹配的记录数?",
      "PQL_query": "select /*+ FUNC(TEE) JOIN(TEE) */ count(*) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w where ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Compute the sum of product values of `id`s securely across `ida_en_one.m_enterprise_1w` and `ida_en_two.m_security_1w` using TEE hardware.",
      "Chinese_question": "如何通过TEE硬件安全计算ida_en_one.m_enterprise_1w和ida_en_two.m_security_1w表id乘积的总和?",
      "PQL_query": "select /*+ FUNC(TEE) JOIN(TEE) */ sum(mulonly02(key = ida_en_one.m_enterprise_1w.id, a = ida_en_one.m_enterprise_1w.id, b = ida_en_two.m_security_1w.id)) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w where ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "How can the standard deviation of the product of `id` values from `ida_en_one.m_enterprise_1w` and `ida_en_two.m_security_1w` be computed in TEE?",
      "Chinese_question": "如何通过TEE硬件计算ida_en_one.m_enterprise_1w和ida_en_two.m_security_1w表的id字段乘积的标准差?",
      "PQL_query": "select /*+ FUNC(TEE) */ stddev(mulonly02(key = ida_en_one.m_enterprise_1w.id, a = ida_en_one.m_enterprise_1w.id, b = ida_en_two.m_security_1w.id)) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w;"
    },
    {
      "question": "Securely join `ida_en_one.m_enterprise_1w` and `ida_en_two.m_security_1w` and compute the sum of unique ids using TEE hardware.",
      "Chinese_question": "使用TEE硬件安全连接ida_en_one.m_enterprise_1w和ida_en_two.m_security_1w表后,如何计算唯一id的总和?",
      "PQL_query": "select /*+ FUNC(TEE) JOIN(TEE) */ sum(distinct ida_en_one.m_enterprise_1w.id + ida_en_two.m_security_1w.id) from ida_en_one.m_enterprise_1w, ida_en_two.m_security_1w where ida_en_one.m_enterprise_1w.id = ida_en_two.m_security_1w.id;"
    },
    {
      "question": "Using TEE hardware, how can we securely sum the revenues from `finance_data` in `company_a` and `sales_data` in `company_b`?",
      "Chinese_question": "如何使用TEE硬件安全地汇总company_a的finance_data表与company_b的sales_data表中的收入?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = company_a.finance_data.id, a = company_a.finance_data.revenue, b = company_b.sales_data.revenue) from company_a.finance_data, company_b.sales_data;"
    },
    {
      "question": "How can we securely find the total number of employees from `hr_records` in `org_one` and `hr_data` in `org_two` using TEE hardware?",
      "Chinese_question": "使用TEE硬件,如何安全地计算org_one的hr_records表和org_two的hr_data表中的员工总数?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = org_one.hr_records.employee_id, a = org_one.hr_records.employee_count, b = org_two.hr_data.employee_count) from org_one.hr_records, org_two.hr_data;"
    },
    {
      "question": "Securely determine the maximum transaction amounts in `transactions_one` and `transactions_two` using TEE technology.",
      "Chinese_question": "如何使用TEE技术安全地确定transactions_one表和transactions_two表中的最高交易金额?",
      "PQL_query": "select /*+ FUNC(TEE) */ maxonly02(key = transactions_one.transaction_id, a = transactions_one.amount, b = transactions_two.amount) from transactions_one, transactions_two;"
    },
    {
      "question": "How can we securely aggregate mileage data from `fleet_one` and `fleet_two` databases using TEE hardware?",
      "Chinese_question": "如何使用TEE硬件安全地整合fleet_one和fleet_two数据库中的里程数据?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = fleet_one.vehicle_id, a = fleet_one.mileage, b = fleet_two.mileage) from fleet_one, fleet_two;"
    },
    {
      "question": "Using TEE, securely compute the average salaries found in `salary_data_one` and `salary_data_two` tables.",
      "Chinese_question": "如何使用TEE安全地计算salary_data_one和salary_data_two表中的平均工资?",
      "PQL_query": "select /*+ FUNC(TEE) */ avgonly02(key = salary_data_one.employee_id, a = salary_data_one.salary, b = salary_data_two.salary) from salary_data_one, salary_data_two;"
    },
    {
      "question": "Securely calculate the total expenditure using TEE for `budget_one` and `budget_two` data sets.",
      "Chinese_question": "如何使用TEE硬件安全地计算budget_one和budget_two数据集的总支出?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = budget_one.expense_id, a = budget_one.amount, b = budget_two.amount) from budget_one, budget_two;"
    },
    {
      "question": "How can we securely determine the median of scores in `test_data_one` and `test_data_two` using TEE?",
      "Chinese_question": "使用TEE技术,如何安全地确定test_data_one和test_data_two中的分数中值?",
      "PQL_query": "select /*+ FUNC(TEE) */ medianonly02(key = test_data_one.student_id, a = test_data_one.score, b = test_data_two.score) from test_data_one, test_data_two;"
    },
    {
      "question": "Calculate the variance of sales figures securely from `sales_one` and `sales_two` utilizing TEE hardware.",
      "Chinese_question": "如何使用TEE硬件安全地计算sales_one和sales_two中的销售数据方差?",
      "PQL_query": "select /*+ FUNC(TEE) */ varianceonly02(key = sales_one.sale_id, a = sales_one.amount, b = sales_two.amount) from sales_one, sales_two;"
    },
    {
      "question": "Using TEE, determine the minimum inventory levels securely from tables `inventory_one` and `inventory_two`.",
      "Chinese_question": "使用TEE技术,如何安全地确定inventory_one和inventory_two中的最低库存水平?",
      "PQL_query": "select /*+ FUNC(TEE) */ minonly02(key = inventory_one.product_id, a = inventory_one.quantity, b = inventory_two.quantity) from inventory_one, inventory_two;"
    },
    {
      "question": "Securely compute the cumulative interest using TEE from `loans_one` and `loans_two` data.",
      "Chinese_question": "如何使用TEE硬件安全地计算loans_one和loans_two中的累计利息?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = loans_one.loan_id, a = loans_one.interest, b = loans_two.interest) from loans_one, loans_two;"
    },
    {
      "question": "Determine the year-over-year growth securely using TEE from `performance_one` and `performance_two` tables.",
      "Chinese_question": "使用TEE技术,如何安全地确定performance_one和performance_two表中的同比增长率?",
      "PQL_query": "select /*+ FUNC(TEE) */ growthrateonly02(key = performance_one.year_id, a = performance_one.year_growth, b = performance_two.year_growth) from performance_one, performance_two;"
    },
    {
      "question": "Securely adapt monthly budget projections using TEE from `projections_one` and `projections_two` datasets.",
      "Chinese_question": "如何使用TEE硬件安全地调整projections_one和projections_two数据集中的月度预算预测?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = projections_one.projection_id, a = projections_one.amount, b = projections_two.amount) from projections_one, projections_two;"
    },
    {
      "question": "Using TEE hardware, securely aggregate customer satisfaction scores from `feedback_one` and `feedback_two`.",
      "Chinese_question": "如何使用TEE硬件安全地聚合feedback_one和feedback_two中的客户满意度评分?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = feedback_one.feedback_id, a = feedback_one.satisfaction_score, b = feedback_two.satisfaction_score) from feedback_one, feedback_two;"
    },
    {
      "question": "How can we securely balance energy consumption data using TEE from `energy_one` and `energy_two` sources?",
      "Chinese_question": "使用TEE技术,如何安全地平衡来自energy_one和energy_two来源的能源消耗数据?",
      "PQL_query": "select /*+ FUNC(TEE) */ avgonly02(key = energy_one.source_id, a = energy_one.consumption, b = energy_two.consumption) from energy_one, energy_two;"
    },
    {
      "question": "Securely model risk assessment scores using TEE from `assessment_one` and `assessment_two` tables.",
      "Chinese_question": "如何使用TEE硬件安全地建模assessment_one和assessment_two表中的风险评估评分?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = assessment_one.assessment_id, a = assessment_one.risk_score, b = assessment_two.risk_score) from assessment_one, assessment_two;"
    },
    {
      "question": "Using TEE, securely adjust production costs from `production_one` and `production_two` data.",
      "Chinese_question": "使用TEE技术,如何安全地调整production_one和production_two中的生产成本数据?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = production_one.production_id, a = production_one.cost, b = production_two.cost) from production_one, production_two;"
    },
    {
      "question": "Calculate insurance premiums securely using TEE from `policy_one` and `policy_two` datasets.",
      "Chinese_question": "如何使用TEE硬件安全地计算policy_one和policy_two中的保险费?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = policy_one.policy_id, a = policy_one.premium, b = policy_two.premium) from policy_one, policy_two;"
    },
    {
      "question": "Determine net asset values using TEE securely from `asset_one` and `asset_two` records.",
      "Chinese_question": "使用TEE硬件,如何安全地计算asset_one和asset_two记录中的净资产?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = asset_one.asset_id, a = asset_one.value, b = asset_two.value) from asset_one, asset_two;"
    },
    {
      "question": "Securely evaluate loan approvals using TEE from `application_one` and `application_two` tables.",
      "Chinese_question": "如何使用TEE硬件安全地评估application_one和application_two表中的贷款批准?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = application_one.application_id, a = application_one.loan_amount, b = application_two.loan_amount) from application_one, application_two;"
    },
    {
      "question": "Using TEE, securely process daily sales totals from `daily_sales_one` and `daily_sales_two`.",
      "Chinese_question": "如何使用TEE硬件安全地处理daily_sales_one和daily_sales_two中的日销售总额?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = daily_sales_one.transaction_id, a = daily_sales_one.amount, b = daily_sales_two.amount) from daily_sales_one, daily_sales_two;"
    },
    {
      "question": "Using TEE hardware, how can the average salary of employees in `hr_data` table from `company_1` be securely calculated while filtering only employees from the `IT` department?",
      "Chinese_question": "在使用TEE硬件的情况下,如何从company_1的hr_data表中安全地计算仅限IT部门员工的平均工资?",
      "PQL_query": "select /*+ FUNC(TEE) */ avg(a = company_1.hr_data.salary) from company_1.hr_data where company_1.hr_data.department = 'IT';"
    },
    {
      "question": "How can we securely find the maximum sales figure in `sales_data` of `platform_x` while leveraging TEE hardware?",
      "Chinese_question": "在使用TEE硬件的情况下,如何安全地查找platform_x的sales_data里的最高销售额?",
      "PQL_query": "select /*+ FUNC(TEE) */ max(a = platform_x.sales_data.sales_amount) from platform_x.sales_data;"
    },
    {
      "question": "Using TEE hardware, how do we correctly count the number of transactions above $1000 from `transactions` table in `bank_a` platform?",
      "Chinese_question": "使用TEE硬件,如何正确统计bank_a平台的transactions表中交易金额大于1000的记录数?",
      "PQL_query": "select /*+ FUNC(TEE) */ count(a = bank_a.transactions.id) from bank_a.transactions where bank_a.transactions.amount > 1000;"
    },
    {
      "question": "How can the total revenue of `store_data` from `platform_y` and `platform_z` be securely summed using TEE?",
      "Chinese_question": "如何利用TEE硬件安全地计算platform_y的store_data与platform_z的store_data的总收入?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = platform_y.store_data.id, a = platform_y.store_data.revenue, b = platform_z.store_data.revenue) from platform_y.store_data, platform_z.store_data;"
    },
    {
      "question": "How do we securely compute the intersection of customer IDs in `customer_table` of `platform_one` and `platform_two` using TEE hardware?",
      "Chinese_question": "如何通过TEE硬件安全地计算platform_one的customer_table与platform_two的customer_table中的客户ID交集?",
      "PQL_query": "select /*+ FUNC(TEE) */ joinonly02(key_a = platform_one.customer_table.id, key_b = platform_two.customer_table.id) from platform_one.customer_table, platform_two.customer_table;"
    },
    {
      "question": "Using TEE, how can we determine the product of aggregated values of `orders` table between `vendor_a` and `vendor_b`?",
      "Chinese_question": "通过TEE硬件,如何计算vendor_a与vendor_b的orders表汇总数据的乘积?",
      "PQL_query": "select /*+ FUNC(TEE) */ mulonly02(key = vendor_a.orders.id, a = vendor_a.orders.total, b = vendor_b.orders.total) from vendor_a.orders, vendor_b.orders;"
    },
    {
      "question": "How can we securely calculate the mean value of the `scores` column in `exam_results` table from `university_x` using TEE?",
      "Chinese_question": "如何通过TEE硬件安全计算university_x的exam_results表中scores列的平均值?",
      "PQL_query": "select /*+ FUNC(TEE) */ avg(a = university_x.exam_results.scores) from university_x.exam_results;"
    },
    {
      "question": "How can we securely aggregate shared sales data from `data_table_1` in `company_1` and `data_table_2` in `company_2` using TEE?",
      "Chinese_question": "如何通过TEE硬件安全聚合company_1的数据表data_table_1与company_2的数据表data_table_2的共享销售数据?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = company_1.data_table_1.id, a = company_1.data_table_1.sales, b = company_2.data_table_2.sales) from company_1.data_table_1, company_2.data_table_2;"
    },
    {
      "question": "How to use TEE hardware to calculate the count of employees earning over $2000 from `employee_list` in `branch_a`?",
      "Chinese_question": "如何使用TEE硬件计算branch_a中的employee_list表中工资超过2000的员工数量?",
      "PQL_query": "select /*+ FUNC(TEE) */ count(a = branch_a.employee_list.id) from branch_a.employee_list where branch_a.employee_list.salary > 2000;"
    },
    {
      "question": "How can the sum of `expenses` column from `finance_A` of `platform_alpha` and `finance_B` of `platform_beta` be computed securely using TEE?",
      "Chinese_question": "使用TEE硬件,如何聚合platform_alpha的finance_A与platform_beta的finance_B的expenses列总和?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = platform_alpha.finance_A.id, a = platform_alpha.finance_A.expenses, b = platform_beta.finance_B.expenses) from platform_alpha.finance_A, platform_beta.finance_B;"
    },
    {
      "question": "Using TEE, how can we securely determine the maximum value in the `profits` field of `business_data` from `enterprise_t`?",
      "Chinese_question": "通过TEE硬件,如何安全计算enterprise_t的business_data表中profits字段的最大值?",
      "PQL_query": "select /*+ FUNC(TEE) */ max(a = enterprise_t.business_data.profits) from enterprise_t.business_data;"
    },
    {
      "question": "How do we securely compute the sum of credit limits from `table_x` of `bank_y` using TEE hardware?",
      "Chinese_question": "在使用TEE硬件的情况下如何安全汇总bank_y的table_x表中的信用额度?",
      "PQL_query": "select /*+ FUNC(TEE) */ sum(a = bank_y.table_x.credit_limit) from bank_y.table_x;"
    },
    {
      "question": "Using TEE hardware, how can the total number of students in `school_data` of `district_1` be computed?",
      "Chinese_question": "通过TEE硬件,如何计算district_1的school_data表中的学生总数?",
      "PQL_query": "select /*+ FUNC(TEE) */ count(a = district_1.school_data.student_id) from district_1.school_data;"
    },
    {
      "question": "How can we securely find the difference between total sales of `sales_data` in `company_A` and `sales_data` in `company_B` using TEE?",
      "Chinese_question": "使用TEE硬件,如何安全地计算company_A的sales_data表与company_B的sales_data表中总销售额的差?",
      "PQL_query": "select /*+ FUNC(TEE) */ diff(key = company_A.sales_data.id, a = company_A.sales_data.amount, b = company_B.sales_data.amount) from company_A.sales_data, company_B.sales_data;"
    },
    {
      "question": "How can we use TEE to securely compute the product of `grades` and `weighted_scores` in the `student_performance` table of `data_platform_x`?",
      "Chinese_question": "使用TEE硬件,如何在data_platform_x的student_performance表中安全计算grades字段与weighted_scores字段的乘积?",
      "PQL_query": "select /*+ FUNC(TEE) */ mul(a = data_platform_x.student_performance.grades, b = data_platform_x.student_performance.weighted_scores) from data_platform_x.student_performance;"
    },
    {
      "question": "Using TEE hardware, how can we identify the median value of `price` in `market_data` table of `platformShop`?",
      "Chinese_question": "使用TEE硬件,如何找出platformShop的market_data表中价格字段`price`的中位数?",
      "PQL_query": "select /*+ FUNC(TEE) */ median(a = platformShop.market_data.price) from platformShop.market_data;"
    },
    {
      "question": "Using TEE, how can we securely sum the values in `budget` columns from `projects_table` across `company_A` and `company_B`?",
      "Chinese_question": "在利用TEE硬件时,如何汇总company_A与company_B的projects_table表里的budget列值?",
      "PQL_query": "select /*+ FUNC(TEE) */ sumonly02(key = company_A.projects_table.project_id, a = company_A.projects_table.budget, b = company_B.projects_table.budget) from company_A.projects_table, company_B.projects_table;"
    },
    {
      "question": "How can TEE hardware be used to securely count the rows in `attendance_records` from `branchZ`?",
      "Chinese_question": "通过TEE硬件,如何安全统计branchZ的attendance_records数据表中的总行数?",
      "PQL_query": "select /*+ FUNC(TEE) */ count(a = branchZ.attendance_records.id) from branchZ.attendance_records;"
    },
    {
      "question": "How do we securely compute the standard deviation of `salary` for all engineers in `employee_data` of `platform_s` using TEE?",
      "Chinese_question": "如何利用TEE硬件安全计算platform_s的employee_data表中所有工程师的工资标准差?",
      "PQL_query": "select /*+ FUNC(TEE) */ stddev(a = platform_s.employee_data.salary) from platform_s.employee_data where platform_s.employee_data.role = 'Engineer';"
    },
    {
      "question": "Using TEE, how can the data of `clients_table` from `bankX` and `bankY` be aligned for secure computation?",
      "Chinese_question": "通过使用TEE硬件,如何对bankX和bankY的clients_table表中的数据进行对齐并进行安全计算?",
      "PQL_query": "select /*+ FUNC(TEE) */ joinonly02(key_a = bankX.clients_table.client_id, key_b = bankY.clients_table.client_id) from bankX.clients_table, bankY.clients_table;"
    },
    {
      "question": "In the TEE environment, how can we find the intersection of IDs from table `employee_data` in `company_A` and `client_info` in `company_B`?",
      "Chinese_question": "在TEE环境中,如何找到company_A的employee_data表和company_B的client_info表中的ID交集?",
      "PQL_query": "select /*+ FUNC(TEE) */ intersect(a = company_A.employee_data.id, b = company_B.client_info.id) from company_A.employee_data, company_B.client_info;"
    },
    {
      "question": "Using TEE hardware, how would you securely compute the sum of transaction amounts in the `transactions` table for `bank_1` while excluding those marked as 'test'?",
      "Chinese_question": "使用TEE硬件,如何安全地计算bank_1的transactions表中排除标记为'test'的交易总金额?",
      "PQL_query": "select /*+ FUNC(TEE) */ sum(a = bank_1.transactions.amount) from bank_1.transactions where bank_1.transactions.type != 'test';"
    },
    {
      "question": "How can we use TEE to compute the union of customer emails from `customer_db` of `store_1` and `store_2`?",
      "Chinese_question": "我们如何利用TEE来计算store_1和store_2的customer_db中客户邮箱的并集?",
      "PQL_query": "select /*+ FUNC(TEE) */ union(a = store_1.customer_db.email, b = store_2.customer_db.email) from store_1.customer_db, store_2.customer_db;"
    },
    {
      "question": "Using TEE, how can we perform a secure sum of order totals from the `orders` table in `ecommerce_platform` if the status is 'completed'?",
      "Chinese_question": "使用TEE,如何安全地计算ecommerce_platform中orders表状态为'completed'的订单总额?",
      "PQL_query": "select /*+ FUNC(TEE) */ sum(a = ecommerce_platform.orders.total) from ecommerce_platform.orders where ecommerce_platform.orders.status = 'completed';"
    },
    {
      "question": "In a TEE setup, how can you compute the maximum age of users in `user_profiles` table for both `service_1` and `service_2`?",
      "Chinese_question": "在TEE设置中,如何计算service_1和service_2的user_profiles表中用户的最大年龄?",
      "PQL_query": "select /*+ FUNC(TEE) */ max(a = service_1.user_profiles.age, b = service_2.user_profiles.age) from service_1.user_profiles, service_2.user_profiles;"
    },
    {
      "question": "With TEE hardware, calculate the average price from the `product_list` table of `vendor_A` where availability is 'in stock'.",
      "Chinese_question": "通过TEE硬件,计算vendor_A中product_list表中可用性为'在库'的产品的平均价格。",
      "PQL_query": "select /*+ FUNC(TEE) */ avg(a = vendor_A.product_list.price) from vendor_A.product_list where vendor_A.product_list.availability = 'in stock';"
    },
    {
      "question": "How can we determine the total sales for `shop_data` across `branch_x` and `branch_y` using the hardware-supported secure computation with TEE?",
      "Chinese_question": "如何使用TEE支持的硬件安全计算确定branch_x和branch_y中的shop_data的总销售额?",
      "PQL_query": "select /*+ FUNC(TEE) */ sum(a = branch_x.shop_data.sales, b = branch_y.shop_data.sales) from branch_x.shop_data, branch_y.shop_data;"
    },
    {
      "question": "In a TEE environment, find the common product IDs in the `inventory` tables of `warehouse_1` and `warehouse_2`.",
      "Chinese_question": "在TEE环境下,查找warehouse_1和warehouse_2的inventory表中的共同产品ID。",
      "PQL_query": "select /*+ FUNC(TEE) */ intersect(a = warehouse_1.inventory.product_id, b = warehouse_2.inventory.product_id) from warehouse_1.inventory, warehouse_2.inventory;"
    },
    {
      "question": "How could TEE hardware be used to compute the cross-company count of customers in `customer_base` for both `finance_corp` and `insurance_corp`?",
      "Chinese_question": "如何使用TEE硬件计算finance_corp和insurance_corp中的customer_base客户的跨公司总数?",
      "PQL_query": "select /*+ FUNC(TEE) */ count(a = finance_corp.customer_base.id, b = insurance_corp.customer_base.id) from finance_corp.customer_base, insurance_corp.customer_base;"
    },
    {
      "question": "Using TEE, verify if there are overlapping user IDs between `app_usage` in `platform_A` and `platform_B`.",
      "Chinese_question": "使用TEE,验证platform_A和platform_B中的app_usage表用户ID是否存在重叠。",
      "PQL_query": "select /*+ FUNC(TEE) */ intersect(a = platform_A.app_usage.user_id, b = platform_B.app_usage.user_id) from platform_A.app_usage, platform_B.app_usage;"
    },
    {
      "question": "Securely calculate with TEE the sum of all bonuses from the `bonus_list` of `sector_1` where the type is 'annual'.",
      "Chinese_question": "使用TEE安全计算sector_1中bonus_list表类型为'annual'的奖金总和。",
      "PQL_query": "select /*+ FUNC(TEE) */ sum(a = sector_1.bonus_list.bonus) from sector_1.bonus_list where sector_1.bonus_list.type = 'annual';"
    },
    {
      "question": "In a TEE-secured computation, how can we identify shared supplier IDs between `supply_chain` of `factory_A` and `factory_B`?",
      "Chinese_question": "在TEE安全计算中,如何识别factory_A和factory_B的supply_chain中共享的供应商ID?",
      "PQL_query": "select /*+ FUNC(TEE) */ intersect(a = factory_A.supply_chain.supplier_id, b = factory_B.supply_chain.supplier_id) from factory_A.supply_chain, factory_B.supply_chain;"
    },
    {
      "question": "Using TEE compute, how can you avoid double-counting employees in `employee_registry` from both `branch_main` and `branch_secondary`?",
      "Chinese_question": "使用TEE计算,如何避免branch_main和branch_secondary的employee_registry中的员工重复计数?",
      "PQL_query": "select /*+ FUNC(TEE) */ count(distinct a = branch_main.employee_registry.id, b = branch_secondary.employee_registry.id) from branch_main.employee_registry, branch_secondary.employee_registry;"
    },
    {
      "question": "Leveraging TEE, how can we calculate the maximum transaction amount in the `payments` table of `financial_inst`?",
      "Chinese_question": "利用TEE,如何计算financial_inst中payments表的最大交易金额?",
      "PQL_query": "select /*+ FUNC(TEE) */ max(a = financial_inst.payments.amount) from financial_inst.payments;"
    },
    {
      "question": "In TEE hardware, how do we securely ascertain the overlapping project codes in `projects` for `dept_A` and `dept_B`?",
      "Chinese_question": "在TEE硬件中,如何安全地确定dept_A和dept_B的projects表中重叠的项目代码?",
      "PQL_query": "select /*+ FUNC(TEE) */ intersect(a = dept_A.projects.code, b = dept_B.projects.code) from dept_A.projects, dept_B.projects;"
    },
    {
      "question": "Within the TEE environment, find the lowest stock levels from `stock_levels` in `store_main` where status is 'critical'.",
      "Chinese_question": "在TEE环境中,查找store_main中stock_levels表状态为'critical'的最低库存水平。",
      "PQL_query": "select /*+ FUNC(TEE) */ min(a = store_main.stock_levels.level) from store_main.stock_levels where store_main.stock_levels.status = 'critical';"
    },
    {
      "question": "Using TEE, calculate the average scores in `exam_scores` for `university_X` while filtering out 'intro' courses.",
      "Chinese_question": "使用TEE,计算university_X中exam_scores表排除'intro'课程的平均分。",
      "PQL_query": "select /*+ FUNC(TEE) */ avg(a = university_X.exam_scores.score) from university_X.exam_scores where university_X.exam_scores.course != 'intro';"
    },
    {
      "question": "How can we securely find common order numbers in `order_system_A` and `order_system_B` using TEE technology?",
      "Chinese_question": "如何使用TEE技术安全地查找order_system_A和order_system_B中的共同订单号?",
      "PQL_query": "select /*+ FUNC(TEE) */ intersect(a = order_system_A.orders.number, b = order_system_B.orders.number) from order_system_A.orders, order_system_B.orders;"
    },
    {
      "question": "With TEE support, determine the highest revenue day in `daily_income` of `chain_store_1` during the festive season.",
      "Chinese_question": "在节日期间,利用TEE支持确定chain_store_1中daily_income的最高收入日。",
      "PQL_query": "select /*+ FUNC(TEE) */ max(a = chain_store_1.daily_income.amount) from chain_store_1.daily_income where chain_store_1.daily_income.period = 'festive';"
    },
    {
      "question": "Leveraging TEE, how can we calculate the unique visitor count to `web_portal` from `network_A` and `network_B`?",
      "Chinese_question": "利用TEE,如何计算network_A和network_B中web_portal的唯一访问者数量?",
      "PQL_query": "select /*+ FUNC(TEE) */ count(distinct a = network_A.web_portal.visitor_id, b = network_B.web_portal.visitor_id) from network_A.web_portal, network_B.web_portal;"
    }
  ],
  "hardware_PIR": [
    {
      "question": "Retrieve balance and social ID where the ID matches param1 using hardware TEE on platform ida_en_one's table m_enterprise_1w.",
      "Chinese_question": "在平台ida_en_one的m_enterprise_1w表中,使用硬件TEE获取与param1匹配的ID的余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Fetch the social ID and balance from ida_en_one's m_enterprise_1w table using TEE, where ID equals param1.",
      "Chinese_question": "从ida_en_one的平台的m_enterprise_1w表中使用硬件TEE获取ID等于param1的社会ID和余额。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.balance WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "In ida_en_one's m_enterprise_1w, extract balance and socialid using hardware-specific computation when ID equals param1.",
      "Chinese_question": "在ida_en_one的m_enterprise_1w中,当ID等于param1时,使用硬件特定的计算提取余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Use TEE to securely query the balance and socialid on ida_en_one's m_enterprise_1w table where the ID matches param1.",
      "Chinese_question": "使用TEE去安全地查询平台ida_en_one的m_enterprise_1w表中ID匹配param1的余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Query for socialid and balance from m_enterprise_1w on platform ida_en_one where ID equals param1 using TEE.",
      "Chinese_question": "在平台ida_en_one的m_enterprise_1w表中使用TEE,查询ID等于param1的社会ID和余额。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.balance WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "On ida_en_one, use secure computation to obtain the balance and socialid from m_enterprise_1w with an ID of param1.",
      "Chinese_question": "在ida_en_one的平台上,使用安全计算从m_enterprise_1w获取ID为param1的余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Find balance and social ID from ida_en_one's m_enterprise_1w where the ID matches param1 using hardware TEE.",
      "Chinese_question": "使用硬件TEE在ida_en_one的平台m_enterprise_1w表中查找与param1匹配的ID的余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Securely access balance and socialid on ida_en_one.m_enterprise_1w when ID equals param1 using TEE support.",
      "Chinese_question": "使用TEE支持,安全地访问ida_en_one.m_enterprise_1w表中ID等于param1的余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Obtain social ID and balance securely using TEE on ida_en_one's m_enterprise_1w, matched by param1 ID.",
      "Chinese_question": "使用硬件TEE在ida_en_one的平台的m_enterprise_1w表中通过ID匹配param1取得社会ID和余额。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.balance WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Access m_enterprise_1w table for balance and social ID using TEE on ida_en_one with ID set to param1.",
      "Chinese_question": "在ida_en_one的平台上使用TEE访问m_enterprise_1w表以获取ID为param1的余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Perform hardware-based extraction for balance and social ID on ida_en_one's m_enterprise_1w where ID matches param1.",
      "Chinese_question": "在ida_en_one的平台的m_enterprise_1w表中进行硬件基础的提取,当ID匹配param1时提取余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Secure query on ida_en_one.m_enterprise_1w for socialid and balance when ID matches param1, utilizing TEE.",
      "Chinese_question": "在ida_en_one.m_enterprise_1w表中安全查询社会ID和余额,当ID匹配param1时,使用TEE。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.balance WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Extract balance and social_id securely using TEE on ida_en_one platform's m_enterprise_1w, where ID is param1.",
      "Chinese_question": "使用TEE时在ida_en_one平台的m_enterprise_1w表上安全地提取余额和社会_ID,其中ID为param1。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Use TEE to securely obtain the balance and social ID from ida_en_one's m_enterprise_1w where ID equals param1.",
      "Chinese_question": "使用硬件TEE在平台ida_en_one的m_enterprise_1w表中获取ID等于param1的余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Securely query ida_en_one's m_enterprise_1w for balance and socialid using TEE with ID set to param1.",
      "Chinese_question": "设计算法查询ida_en_one的m_enterprise_1w表,使用TEE和参数param1的ID来安全地获取余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Use TEE hardware to fetch the balance and social ID from m_enterprise_1w on ida_en_one when ID equals param1.",
      "Chinese_question": "使用TEE硬件从ida_en_one的m_enterprise_1w表中获取ID等于param1的余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Query balance and social ID from ida_en_one's m_enterprise_1w table with secure computation as ID matches param1 using TEE.",
      "Chinese_question": "当ID与param1匹配时使用TEE在平台ida_en_one的m_enterprise_1w表中用安全运算查询余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Fetch social ID and balance from m_enterprise_1w on platform ida_en_one using TEE when ID equals param1.",
      "Chinese_question": "在平台ida_en_one的m_enterprise_1w表中使用TEE当ID等于param1时获取社会ID和余额。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.balance WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Extract socialid and balance from ida_en_one's m_enterprise_1w table using TEE, where ID equals param1.",
      "Chinese_question": "从ida_en_one的平台的m_enterprise_1w表中使用TEE提取ID等于param1的社会ID和余额。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.socialid, ida_en_one.m_enterprise_1w.balance WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Securely retrieve balance and socialid on ida_en_one.m_enterprise_1w when ID matches param1 using hardware TEE.",
      "Chinese_question": "当ID与param1匹配时在ida_en_one.m_enterprise_1w上使用硬件TEE安全地获取余额和社会ID。",
      "PQL_query": "SELECT ida_en_one.m_enterprise_1w.balance, ida_en_one.m_enterprise_1w.socialid WHERE ida_en_one.m_enterprise_1w.id = param1 USING TEE;"
    },
    {
      "question": "Using hardware TEE on ida_en_two platform, obtain the email and age for entries in m_customer_info where the email matches param1.",
      "Chinese_question": "在ida_en_two平台上使用硬件TEE,获取m_customer_info表中与param1匹配的邮箱对应的电子邮件和年龄。",
      "PQL_query": "SELECT ida_en_two.m_customer_info.email, ida_en_two.m_customer_info.age WHERE ida_en_two.m_customer_info.email = param1 USING TEE;"
    },
    {
      "question": "Securely compute the total sales and city for records with a sales_id equal to param2 using hardware TEE in ida_en_one's m_sales_data.",
      "Chinese_question": "使用硬件TEE在ida_en_one的m_sales_data表中安全计算sales_id与param2相等的记录的总销售额和城市。",
      "PQL_query": "SELECT ida_en_one.m_sales_data.sales_total, ida_en_one.m_sales_data.city WHERE ida_en_one.m_sales_data.sales_id = param2 USING TEE;"
    },
    {
      "question": "Fetch the transaction date and product name where product_id matches param3 in ida_en_two's m_product_transactions with TEE hardware.",
      "Chinese_question": "在ida_en_two的平台上,通过TEE硬件获取m_product_transactions表中与param3匹配的product_id的交易日期和产品名称。",
      "PQL_query": "SELECT ida_en_two.m_product_transactions.transaction_date, ida_en_two.m_product_transactions.product_name WHERE ida_en_two.m_product_transactions.product_id = param3 USING TEE;"
    },
    {
      "question": "Retrieve safely using hardware TEE on ida_en_one, the department name and employee count in m_employee_details for id equal to param4.",
      "Chinese_question": "在ida_en_one平台上使用硬件TEE安全地提取id等于param4的m_employee_details表中的部门名称和员工数量。",
      "PQL_query": "SELECT ida_en_one.m_employee_details.department_name, ida_en_one.m_employee_details.employee_count WHERE ida_en_one.m_employee_details.id = param4 USING TEE;"
    },
    {
      "question": "Access education_level and graduation_year in ida_en_two's m_academic_records where student_id matches param5 via TEE mechanism.",
      "Chinese_question": "通过TEE机制在ida_en_two的平台上访问m_academic_records表中student_id与param5匹配的教育水平和毕业年份。",
      "PQL_query": "SELECT ida_en_two.m_academic_records.education_level, ida_en_two.m_academic_records.graduation_year WHERE ida_en_two.m_academic_records.student_id = param5 USING TEE;"
    },
    {
      "question": "Utilize hardware TEE at ida_en_one to gather salary and last promotion date for employee_id set as param6 from m_employee_salaries table.",
      "Chinese_question": "在ida_en_one平台上使用硬件TEE从m_employee_salaries表中获取employee_id为param6的工资和上次晋升日期。",
      "PQL_query": "SELECT ida_en_one.m_employee_salaries.salary, ida_en_one.m_employee_salaries.last_promotion_date WHERE ida_en_one.m_employee_salaries.employee_id = param6 USING TEE;"
    },
    {
      "question": "In ida_en_two's environment, via TEE hardware, query the total inventory and item_name where item_code matches param7 in m_inventory_records.",
      "Chinese_question": "通过TEE硬件在ida_en_two的环境中,查询m_inventory_records表中与param7匹配的item_code的总库存和项目名称。",
      "PQL_query": "SELECT ida_en_two.m_inventory_records.total_inventory, ida_en_two.m_inventory_records.item_name WHERE ida_en_two.m_inventory_records.item_code = param7 USING TEE;"
    },
    {
      "question": "Extract contract_duration and client_name securely with TEE hardware from ida_en_one's m_contract_details where contract_id is param8.",
      "Chinese_question": "在ida_en_one平台上使用TEE硬件安全地提取合同id为param8的m_contract_details表中的合同持续时间和客户名称。",
      "PQL_query": "SELECT ida_en_one.m_contract_details.contract_duration, ida_en_one.m_contract_details.client_name WHERE ida_en_one.m_contract_details.contract_id = param8 USING TEE;"
    },
    {
      "question": "On ida_en_two, apply TEE to get the project deadline and manager name for team_id corresponding to param9 in m_project_info.",
      "Chinese_question": "在ida_en_two平台上,应用TEE获取m_project_info表中与param9相对应的team_id的项目截止日期和经理姓名。",
      "PQL_query": "SELECT ida_en_two.m_project_info.project_deadline, ida_en_two.m_project_info.manager_name WHERE ida_en_two.m_project_info.team_id = param9 USING TEE;"
    },
    {
      "question": "Retrieve safely using TEE on ida_en_one, the investor's share and country for investor_id referred to by param10 in m_investor_profile.",
      "Chinese_question": "在ida_en_one平台上使用TEE硬件安全地提取m_investor_profile表中投资人id为param10的投资人股份和国家信息。",
      "PQL_query": "SELECT ida_en_one.m_investor_profile.investor_share, ida_en_one.m_investor_profile.country WHERE ida_en_one.m_investor_profile.investor_id = param10 USING TEE;"
    },
    {
      "question": "Utilize TEE hardware on platform ida_en_two to access insurance_policy and coverage_amount where policy_number equals param11 in table m_insurance_details.",
      "Chinese_question": "在平台ida_en_two上使用TEE硬件访问m_insurance_details表中policy_number与param11相等的保险政策和覆盖金额。",
      "PQL_query": "SELECT ida_en_two.m_insurance_details.insurance_policy, ida_en_two.m_insurance_details.coverage_amount WHERE ida_en_two.m_insurance_details.policy_number = param11 USING TEE;"
    },
    {
      "question": "Query with TEE in ida_en_one's system for rental_period and tenant_name in m_rental_agreements where agreement_id matches param12.",
      "Chinese_question": "使用TEE在ida_en_one系统中查询m_rental_agreements表中与param12匹配的agreement_id的租赁期和租户名称。",
      "PQL_query": "SELECT ida_en_one.m_rental_agreements.rental_period, ida_en_one.m_rental_agreements.tenant_name WHERE ida_en_one.m_rental_agreements.agreement_id = param12 USING TEE;"
    },
    {
      "question": "Discover account_type and account_balance in ida_en_two's m_account_info where account_number matches param13 using hardware TEE.",
      "Chinese_question": "在ida_en_two的平台上,使用硬件TEE查找m_account_info表中与param13匹配的account_number的账户类型和账户余额。",
      "PQL_query": "SELECT ida_en_two.m_account_info.account_type, ida_en_two.m_account_info.account_balance WHERE ida_en_two.m_account_info.account_number = param13 USING TEE;"
    },
    {
      "question": "Securely extract supplier_name and contact_information from ida_en_one's m_supplier_contacts where supplier_id corresponds to param14 using TEE.",
      "Chinese_question": "使用TEE从ida_en_one的平台上安全提取m_supplier_contacts表中与param14相对应的供应商名称和联系信息。",
      "PQL_query": "SELECT ida_en_one.m_supplier_contacts.supplier_name, ida_en_one.m_supplier_contacts.contact_information WHERE ida_en_one.m_supplier_contacts.supplier_id = param14 USING TEE;"
    },
    {
      "question": "Perform secure access via TEE on ida_en_two for the order_total and shipment_status where order_id matches param15 in m_order_records.",
      "Chinese_question": "通过TEE在ida_en_two平台上安全访问m_order_records表中与param15匹配的order_id的订单总额和物流状态。",
      "PQL_query": "SELECT ida_en_two.m_order_records.order_total, ida_en_two.m_order_records.shipment_status WHERE ida_en_two.m_order_records.order_id = param15 USING TEE;"
    },
    {
      "question": "Utilize TEE hardware on ida_en_one to obtain store_location and opening_date for store_id set as param16 from m_store_info table.",
      "Chinese_question": "在ida_en_one平台上使用TEE硬件从m_store_info表中获取store_id为param16的商店位置和开业日期。",
      "PQL_query": "SELECT ida_en_one.m_store_info.store_location, ida_en_one.m_store_info.opening_date WHERE ida_en_one.m_store_info.store_id = param16 USING TEE;"
    },
    {
      "question": "Extract market_share and partner_name using TEE in ida_en_two from m_market_data where market_id equals param17.",
      "Chinese_question": "在ida_en_two平台上使用TEE从m_market_data表中提取market_id与param17相等的市场份额和合作伙伴名称。",
      "PQL_query": "SELECT ida_en_two.m_market_data.market_share, ida_en_two.m_market_data.partner_name WHERE ida_en_two.m_market_data.market_id = param17 USING TEE;"
    },
    {
      "question": "Get the course_title and instructor_name via TEE on platform ida_en_one from m_course_catalog where course_code matches param18.",
      "Chinese_question": "通过TEE在平台ida_en_one上从m_course_catalog表中获取与param18匹配的课程代码的课程标题和讲师名称。",
      "PQL_query": "SELECT ida_en_one.m_course_catalog.course_title, ida_en_one.m_course_catalog.instructor_name WHERE ida_en_one.m_course_catalog.course_code = param18 USING TEE;"
    },
    {
      "question": "Securely retrieve flight_number and passenger_count on ida_en_two using TEE for flight_id matching param19 in m_flight_details.",
      "Chinese_question": "在ida_en_two平台上使用TEE安全检索m_flight_details表中flight_id与param19匹配的航班号和乘客数量。",
      "PQL_query": "SELECT ida_en_two.m_flight_details.flight_number, ida_en_two.m_flight_details.passenger_count WHERE ida_en_two.m_flight_details.flight_id = param19 USING TEE;"
    },
    {
      "question": "Access registration_date and vehicle_model through TEE in ida_en_one's environment from m_vehicle_registry where vehicle_id equals param20.",
      "Chinese_question": "在ida_en_one环境中通过TEE从m_vehicle_registry表中访问vehicle_id与param20相等的注册日期和车辆型号。",
      "PQL_query": "SELECT ida_en_one.m_vehicle_registry.registration_date, ida_en_one.m_vehicle_registry.vehicle_model WHERE ida_en_one.m_vehicle_registry.vehicle_id = param20 USING TEE;"
    },
    {
      "question": "Utilize TEE hardware to retrieve salary details from ida_en_one's m_employee_salaries table where the employee_id matches param_eid.",
      "Chinese_question": "使用TEE硬件从ida_en_one平台的m_employee_salaries表中获取与param_eid匹配的员工编号的工资信息。",
      "PQL_query": "SELECT ida_en_one.m_employee_salaries.salary WHERE ida_en_one.m_employee_salaries.employee_id = param_eid USING TEE;"
    },
    {
      "question": "On ida_en_two's platform, fetch the purchase history from m_sales_records table for customers whose customer_id equals param_cust using TEE.",
      "Chinese_question": "在ida_en_two平台上,通过TEE方式获取m_sales_records表中与param_cust匹配的客户的购买历史。",
      "PQL_query": "SELECT ida_en_two.m_sales_records.purchase_history WHERE ida_en_two.m_sales_records.customer_id = param_cust USING TEE;"
    },
    {
      "question": "Using TEE on ida_en_three platform, get product names and prices from m_product_catalog where product_code matches param_code.",
      "Chinese_question": "利用TEE硬件在ida_en_three平台上获取m_product_catalog表中与param_code匹配的产品名称和价格。",
      "PQL_query": "SELECT ida_en_three.m_product_catalog.product_name, ida_en_three.m_product_catalog.price WHERE ida_en_three.m_product_catalog.product_code = param_code USING TEE;"
    },
    {
      "question": "Employ TEE to extract transaction details from ida_en_four's m_transaction_logs where transaction_id matches with param_tid.",
      "Chinese_question": "使用TEE从ida_en_four平台的m_transaction_logs表中提取与param_tid相匹配的交易详情。",
      "PQL_query": "SELECT ida_en_four.m_transaction_logs.transaction_details WHERE ida_en_four.m_transaction_logs.transaction_id = param_tid USING TEE;"
    },
    {
      "question": "Leverage TEE on ida_en_five platform to obtain vehicle registration numbers from m_vehicle_registry for matching owner_id param_oid.",
      "Chinese_question": "在ida_en_five平台使用TEE,以获得m_vehicle_registry中与param_oid匹配的车主编号对应的车辆注册信息。",
      "PQL_query": "SELECT ida_en_five.m_vehicle_registry.registration_number WHERE ida_en_five.m_vehicle_registry.owner_id = param_oid USING TEE;"
    },
    {
      "question": "On ida_en_six's system, find addresses and names from m_user_profiles table where username is equal to param_uname using TEE.",
      "Chinese_question": "在ida_en_six系统上,通过TEE方式从m_user_profiles表中查找与param_uname匹配的用户名的地址和名字。",
      "PQL_query": "SELECT ida_en_six.m_user_profiles.address, ida_en_six.m_user_profiles.name WHERE ida_en_six.m_user_profiles.username = param_uname USING TEE;"
    },
    {
      "question": "Extract healthcare records from ida_en_seven's m_health_records table where patient_id equals param_pid using TEE hardware.",
      "Chinese_question": "使用TEE硬件从ida_en_seven平台的m_health_records表中提取与param_pid匹配的患者编号的健康记录。",
      "PQL_query": "SELECT ida_en_seven.m_health_records.records WHERE ida_en_seven.m_health_records.patient_id = param_pid USING TEE;"
    },
    {
      "question": "Fetch educational qualifications from m_education_background on ida_en_eight's platform for entries matching student_id param_sid via TEE.",
      "Chinese_question": "通过TEE,从ida_en_eight平台上的m_education_background表中获取与param_sid匹配的学生编号的教育资历。",
      "PQL_query": "SELECT ida_en_eight.m_education_background.qualifications WHERE ida_en_eight.m_education_background.student_id = param_sid USING TEE;"
    },
    {
      "question": "Obtain insurance policy details from ida_en_nine's m_insurance_policy where policy_number matches the param_policy_num using TEE.",
      "Chinese_question": "通过TEE从ida_en_nine平台的m_insurance_policy表中获取与param_policy_num匹配的保单编号的保险政策详情。",
      "PQL_query": "SELECT ida_en_nine.m_insurance_policy.policy_details WHERE ida_en_nine.m_insurance_policy.policy_number = param_policy_num USING TEE;"
    },
    {
      "question": "Retrieve loan information from m_loan_accounts on ida_en_ten's platform where account_id equals param_account using TEE.",
      "Chinese_question": "使用TEE从ida_en_ten平台的m_loan_accounts表中检索与param_account匹配的帐户编号的贷款信息。",
      "PQL_query": "SELECT ida_en_ten.m_loan_accounts.loan_info WHERE ida_en_ten.m_loan_accounts.account_id = param_account USING TEE;"
    },
    {
      "question": "Utilize TEE to access shipment tracking from ida_en_eleven's m_shipment_tracker where tracking_id matches param_tracking.",
      "Chinese_question": "使用TEE从ida_en_eleven平台的m_shipment_tracker表中获取与param_tracking匹配的追踪编号对应的货运跟踪信息。",
      "PQL_query": "SELECT ida_en_eleven.m_shipment_tracker.tracking_info WHERE ida_en_eleven.m_shipment_tracker.tracking_id = param_tracking USING TEE;"
    },
    {
      "question": "On ida_en_twelve, use TEE to gather customer feedback from m_feedback_data for entries with customer_id as param_feedback_id.",
      "Chinese_question": "在ida_en_twelve上使用TEE,从m_feedback_data表中收集客户编号为param_feedback_id的反馈信息。",
      "PQL_query": "SELECT ida_en_twelve.m_feedback_data.feedback WHERE ida_en_twelve.m_feedback_data.customer_id = param_feedback_id USING TEE;"
    },
    {
      "question": "Leverage TEE to obtain rental agreements from ida_en_thirteen's m_rental_agreements table for ids matching param_rent_id.",
      "Chinese_question": "利用TEE从ida_en_thirteen平台的m_rental_agreements表中获取与param_rent_id匹配的租赁协议。",
      "PQL_query": "SELECT ida_en_thirteen.m_rental_agreements.agreement WHERE ida_en_thirteen.m_rental_agreements.rent_id = param_rent_id USING TEE;"
    },
    {
      "question": "Extract legal documents from m_legal_docs on ida_en_fourteen's system for doc_id equivalent to param_doc_id using TEE.",
      "Chinese_question": "使用TEE从ida_en_fourteen系统的m_legal_docs表中提取与param_doc_id相等的文档编号对应的法律文件。",
      "PQL_query": "SELECT ida_en_fourteen.m_legal_docs.documents WHERE ida_en_fourteen.m_legal_docs.doc_id = param_doc_id USING TEE;"
    },
    {
      "question": "Gain access to employment contracts from ida_en_fifteen's m_employment_contracts where contract_id matches param_contract_id using TEE.",
      "Chinese_question": "通过TEE访问ida_en_fifteen平台的m_employment_contracts表中与param_contract_id匹配的合同编号的雇佣合同。",
      "PQL_query": "SELECT ida_en_fifteen.m_employment_contracts.contract WHERE ida_en_fifteen.m_employment_contracts.contract_id = param_contract_id USING TEE;"
    },
    {
      "question": "Fetch academic records from ida_en_sixteen's m_academic_records table for entries with student_id equal to param_student_id using TEE.",
      "Chinese_question": "使用TEE从ida_en_sixteen平台的m_academic_records表中获取与param_student_id相等的学生编号的学术记录。",
      "PQL_query": "SELECT ida_en_sixteen.m_academic_records.records WHERE ida_en_sixteen.m_academic_records.student_id = param_student_id USING TEE;"
    },
    {
      "question": "Retrieve budget allocations from ida_en_seventeen's m_budget_data table for department_id matching param_dept_id using TEE.",
      "Chinese_question": "使用TEE从ida_en_seventeen平台的m_budget_data表中检索与param_dept_id匹配的部门编号的预算分配。",
      "PQL_query": "SELECT ida_en_seventeen.m_budget_data.allocations WHERE ida_en_seventeen.m_budget_data.department_id = param_dept_id USING TEE;"
    },
    {
      "question": "Obtain bank statements from ida_en_eighteen's m_bank_statements where account_number matches param_account_num using TEE.",
      "Chinese_question": "通过TEE从ida_en_eighteen平台的m_bank_statements表中获取与param_account_num匹配的账户号码的银行结算单。",
      "PQL_query": "SELECT ida_en_eighteen.m_bank_statements.statement WHERE ida_en_eighteen.m_bank_statements.account_number = param_account_num USING TEE;"
    },
    {
      "question": "Access student attendance records from m_attendance_data on ida_en_nineteen's platform using TEE where student_id matches param_att_id.",
      "Chinese_question": "在ida_en_nineteen平台上使用TEE,从m_attendance_data表获取与param_att_id相匹配的学生编号的出勤记录。",
      "PQL_query": "SELECT ida_en_nineteen.m_attendance_data.attendance WHERE ida_en_nineteen.m_attendance_data.student_id = param_att_id USING TEE;"
    },
    {
      "question": "Utilize TEE to extract audit logs from ida_en_twenty's m_audit_logs table where log_id corresponds to param_log_id.",
      "Chinese_question": "使用TEE从ida_en_twenty平台的m_audit_logs表中提取与param_log_id对应的日志编号的审计日志。",
      "PQL_query": "SELECT ida_en_twenty.m_audit_logs.logs WHERE ida_en_twenty.m_audit_logs.log_id = param_log_id USING TEE;"
    },
    {
      "question": "Using secure TEE hardware, query the temperature values and timestamps from the t_sensor_readings table on platform ida_en_sensor for sensor ids matching param_sensor_id.",
      "Chinese_question": "利用安全TEE硬件,从ida_en_sensor平台的t_sensor_readings表中查询匹配param_sensor_id的传感器温度值和时间戳。",
      "PQL_query": "SELECT ida_en_sensor.t_sensor_readings.temperature, ida_en_sensor.t_sensor_readings.timestamp WHERE ida_en_sensor.t_sensor_readings.sensor_id = param_sensor_id USING TEE;"
    },
    {
      "question": "Retrieve the total sales and region information from the t_sales_data table on platform ida_sales_team where the record corresponds to param_sales_rep_id using secure TEE hardware.",
      "Chinese_question": "通过TEE硬件,从ida_sales_team平台的t_sales_data表中获取与param_sales_rep_id对应的销售总额和区域信息。",
      "PQL_query": "SELECT ida_sales_team.t_sales_data.total_sales, ida_sales_team.t_sales_data.region WHERE ida_sales_team.t_sales_data.sales_rep_id = param_sales_rep_id USING TEE;"
    },
    {
      "question": "In the ida_hardware_logs platform, extract records from the h_security_events table where the event_id matches param_event_id using TEE hardware.",
      "Chinese_question": "在ida_hardware_logs平台中,使用TEE硬件从h_security_events表提取event_id与param_event_id匹配的记录。",
      "PQL_query": "SELECT ida_hardware_logs.h_security_events.* WHERE ida_hardware_logs.h_security_events.event_id = param_event_id USING TEE;"
    },
    {
      "question": "Extract user details including name and phone number from ida_userbase.t_users_secure where user_id matches param_user_id using TEE hardware.",
      "Chinese_question": "从ida_userbase平台的t_users_secure表中提取user_id与param_user_id匹配的用户名和电话号码,使用TEE硬件。",
      "PQL_query": "SELECT ida_userbase.t_users_secure.name, ida_userbase.t_users_secure.phone_number WHERE ida_userbase.t_users_secure.user_id = param_user_id USING TEE;"
    },
    {
      "question": "Through TEE, fetch access logs with ip addresses and timestamps from the ida_logs_console.platform_logins table where tenant matches param_tenant_id.",
      "Chinese_question": "通过TEE,从ida_logs_console平台的platform_logins表中提取tenant与param_tenant_id匹配的访问日志,包括ip地址和时间戳。",
      "PQL_query": "SELECT ida_logs_console.platform_logins.ip_address, ida_logs_console.platform_logins.timestamp WHERE ida_logs_console.platform_logins.tenant = param_tenant_id USING TEE;"
    },
    {
      "question": "Using TEE technology, retrieve failure rate and manufacturing date details from ida_factory_mgmt.product_inspections for product_id matching param_product_id.",
      "Chinese_question": "使用TEE技术,从ida_factory_mgmt平台的product_inspections表中查询与param_product_id匹配的故障率和生产日期。",
      "PQL_query": "SELECT ida_factory_mgmt.product_inspections.failure_rate, ida_factory_mgmt.product_inspections.manufacturing_date WHERE ida_factory_mgmt.product_inspections.product_id = param_product_id USING TEE;"
    },
    {
      "question": "Extract the last maintenance date and assigned technician information from ida_fleet_logs.f_vehicles_secure where vin equals param_vin using TEE hardware.",
      "Chinese_question": "通过TEE,从ida_fleet_logs平台的f_vehicles_secure表中提取vin等于param_vin的最后维护日期和分配的技师信息。",
      "PQL_query": "SELECT ida_fleet_logs.f_vehicles_secure.last_maintenance_date, ida_fleet_logs.f_vehicles_secure.assigned_technician WHERE ida_fleet_logs.f_vehicles_secure.vin = param_vin USING TEE;"
    },
    {
      "question": "Securely retrieve training progress and hours for user_id matching param_user_id from ida_training.t_progress_logs using TEE.",
      "Chinese_question": "安全地使用TEE查询ida_training平台的t_progress_logs表中与param_user_id匹配的训练进度和训练时长信息。",
      "PQL_query": "SELECT ida_training.t_progress_logs.training_progress, ida_training.t_progress_logs.hours_spent WHERE ida_training.t_progress_logs.user_id = param_user_id USING TEE;"
    },
    {
      "question": "Query sensor status and battery levels securely using TEE for sensor_id from param_sensor_id in the ida_iot_devices.wireless_sensors table.",
      "Chinese_question": "通过TEE安全地从ida_iot_devices平台中的wireless_sensors表查询与param_sensor_id相符的传感器状态和电池电量。",
      "PQL_query": "SELECT ida_iot_devices.wireless_sensors.status, ida_iot_devices.wireless_sensors.battery_level WHERE ida_iot_devices.wireless_sensors.sensor_id = param_sensor_id USING TEE;"
    },
    {
      "question": "Fetch student grades and attendance records from ida_school_data.student_records where student_id matches param_student_id using TEE.",
      "Chinese_question": "利用TEE从ida_school_data平台的student_records表中提取与param_student_id匹配的学生成绩和出勤记录。",
      "PQL_query": "SELECT ida_school_data.student_records.grades, ida_school_data.student_records.attendance WHERE ida_school_data.student_records.student_id = param_student_id USING TEE;"
    },
    {
      "question": "Retrieve cardholder transactions securely with TEE from ida_banking.t_card_transactions where card_number matches param_card.",
      "Chinese_question": "通过TEE从ida_banking平台的t_card_transactions表安全地提取与param_card匹配的持卡人交易记录。",
      "PQL_query": "SELECT ida_banking.t_card_transactions.* WHERE ida_banking.t_card_transactions.card_number = param_card USING TEE;"
    },
    {
      "question": "Access warehouse inventory details for items matching param_item_code from ida_inventory.logs_table using TEE.",
      "Chinese_question": "使用TEE从ida_inventory平台的logs_table中获取与param_item_code一致的仓库库存详情。",
      "PQL_query": "SELECT ida_inventory.logs_table.* WHERE ida_inventory.logs_table.item_code = param_item_code USING TEE;"
    },
    {
      "question": "Fetch IoT device logs for failed connections using TEE from ida_iot_core.t_connectivity_logs where device_id matches param_device.",
      "Chinese_question": "利用TEE从ida_iot_core平台的t_connectivity_logs表中查询与param_device对应的IoT设备连接失败日志。",
      "PQL_query": "SELECT ida_iot_core.t_connectivity_logs.failure_reason, ida_iot_core.t_connectivity_logs.timestamp WHERE ida_iot_core.t_connectivity_logs.device_id = param_device USING TEE;"
    },
    {
      "question": "Extract medical patient data securely from ida_hospitals.t_patient_records using TEE where patient_id equals param_patient_id.",
      "Chinese_question": "通过TEE从ida_hospitals平台的t_patient_records表中提取patient_id等于param_patient_id的医疗患者数据。",
      "PQL_query": "SELECT ida_hospitals.t_patient_records.medical_history, ida_hospitals.t_patient_records.contact_info WHERE ida_hospitals.t_patient_records.patient_id = param_patient_id USING TEE;"
    },
    {
      "question": "Use TEE technology to query billing records from ida_bills.t_invoices where invoice_id matches param_invoice_id for outstanding balances.",
      "Chinese_question": "使用TEE技术查询ida_bills平台t_invoices表中与param_invoice_id匹配的未付账单的账单记录。",
      "PQL_query": "SELECT ida_bills.t_invoices.outstanding_balance WHERE ida_bills.t_invoices.invoice_id = param_invoice_id USING TEE;"
    },
    {
      "question": "Retrieve school attendance logs for class matching param_class_id from ida_edu_core.attendance_logs table using TEE processing.",
      "Chinese_question": "通过TEE处理,从ida_edu_core平台的attendance_logs表中检索与param_class_id匹配的课堂出勤日志。",
      "PQL_query": "SELECT ida_edu_core.attendance_logs.entry_time, ida_edu_core.attendance_logs.student_id WHERE ida_edu_core.attendance_logs.class_id = param_class_id USING TEE;"
    },
    {
      "question": "Using TEE, fetch energy consumption data from ida_powergrid.consumption_logs for meter_id matching param_meter_id.",
      "Chinese_question": "通过TEE从ida_powergrid平台的consumption_logs表中获取与param_meter_id匹配的能源消耗数据。",
      "PQL_query": "SELECT ida_powergrid.consumption_logs.energy_usage, ida_powergrid.consumption_logs.date WHERE ida_powergrid.consumption_logs.meter_id = param_meter_id USING TEE;"
    },
    {
      "question": "Securely extract network traffic patterns for session matching param_session_id using TEE on ida_network_analytics.usage_logs.",
      "Chinese_question": "使用TEE从ida_network_analytics平台的usage_logs表中提取与param_session_id匹配的网络流量模式。",
      "PQL_query": "SELECT ida_network_analytics.usage_logs.packet_count, ida_network_analytics.usage_logs.duration WHERE ida_network_analytics.usage_logs.session_id = param_session_id USING TEE;"
    },
    {
      "question": "Through secure TEE operations, retrieve property tax records from ida_localgov.property_taxes matching tax_id as param_tax_id.",
      "Chinese_question": "利用TEE从ida_localgov平台的property_taxes表中提取与param_tax_id匹配的不动产税记录。",
      "PQL_query": "SELECT ida_localgov.property_taxes.tax_amount, ida_localgov.property_taxes.due_date WHERE ida_localgov.property_taxes.tax_id = param_tax_id USING TEE;"
    },
    {
      "question": "Access employee benefits data for employee_id matching param_emp_id via TEE in ida_hr.t_benefits.",
      "Chinese_question": "通过TEE从ida_hr平台的t_benefits表中查找与param_emp_id一致的雇员福利数据。",
      "PQL_query": "SELECT ida_hr.t_benefits.health_plan, ida_hr.t_benefits.pension_scheme WHERE ida_hr.t_benefits.employee_id = param_emp_id USING TEE;"
    },
    {
      "question": "Utilize secure TEE hardware to extract names and addresses from the t_customer_details table for customer numbers specified in param_customer_num within the platform ida_en_customers.",
      "Chinese_question": "使用安全TEE硬件,从ida_en_customers平台的t_customer_details表中提取与param_customer_num匹配的客户姓名和地址。",
      "PQL_query": "SELECT ida_en_customers.t_customer_details.name, ida_en_customers.t_customer_details.address WHERE ida_en_customers.t_customer_details.customer_num = param_customer_num USING TEE;"
    },
    {
      "question": "Retrieve encrypted email addresses and phone numbers using secure TEE from the table t_user_contact in tenant ida_en_users for user keys listed as param_user_key.",
      "Chinese_question": "通过安全TEE硬件从ida_en_users租户的t_user_contact表中检索与param_user_key匹配的用户的加密电子邮件地址和电话号码。",
      "PQL_query": "SELECT ida_en_users.t_user_contact.email, ida_en_users.t_user_contact.phone WHERE ida_en_users.t_user_contact.user_key = param_user_key USING TEE;"
    },
    {
      "question": "Query via TEE environment for order ids and their total amounts from m_order_info table on ida_en_orders platform matching param_order_ref.",
      "Chinese_question": "通过TEE环境查询ida_en_orders平台的m_order_info表中与param_order_ref匹配的订单id和总金额。",
      "PQL_query": "SELECT ida_en_orders.m_order_info.order_id, ida_en_orders.m_order_info.total_amount WHERE ida_en_orders.m_order_info.order_ref = param_order_ref USING TEE;"
    },
    {
      "question": "Using TEE hardware, access salary data and employee ids from the ida_en_hr platform's t_employment table where employee badges are param_badge_id.",
      "Chinese_question": "利用TEE硬件,从ida_en_hr平台的t_employment表中获取与param_badge_id匹配的员工工资数据和员工id。",
      "PQL_query": "SELECT ida_en_hr.t_employment.salary, ida_en_hr.t_employment.employee_id WHERE ida_en_hr.t_employment.badge_id = param_badge_id USING TEE;"
    },
    {
      "question": "Extract product details and serial numbers from m_inventory_list in the ida_en_inventory using secure TEE for given product codes param_product_code.",
      "Chinese_question": "使用安全TEE,从ida_en_inventory平台的m_inventory_list表中提取与param_product_code匹配的产品详细信息和序列号。",
      "PQL_query": "SELECT ida_en_inventory.m_inventory_list.product_detail, ida_en_inventory.m_inventory_list.serial_number WHERE ida_en_inventory.m_inventory_list.product_code = param_product_code USING TEE;"
    },
    {
      "question": "Retrieve secure location info and timestamps from ida_en_location's t_event_log for event ids matching param_event_id using TEE hardware.",
      "Chinese_question": "通过TEE硬件从ida_en_location平台的t_event_log表中检索与param_event_id匹配的事件的安全位置信息和时间戳。",
      "PQL_query": "SELECT ida_en_location.t_event_log.location_info, ida_en_location.t_event_log.timestamp WHERE ida_en_location.t_event_log.event_id = param_event_id USING TEE;"
    },
    {
      "question": "Use TEE to access transaction types and amounts in m_transaction_data for transaction IDs in ida_en_finance identified by param_trans_id.",
      "Chinese_question": "使用TEE访问ida_en_finance平台m_transaction_data表中与param_trans_id匹配的交易类型和金额。",
      "PQL_query": "SELECT ida_en_finance.m_transaction_data.type, ida_en_finance.m_transaction_data.amount WHERE ida_en_finance.m_transaction_data.trans_id = param_trans_id USING TEE;"
    },
    {
      "question": "Retrieve encrypted payment information from t_payment_records in ida_en_billing for records key matching param_record_key using secure TEE.",
      "Chinese_question": "通过安全TEE从ida_en_billing平台的t_payment_records表中检索与param_record_key匹配的加密支付信息。",
      "PQL_query": "SELECT ida_en_billing.t_payment_records.payment_info WHERE ida_en_billing.t_payment_records.record_key = param_record_key USING TEE;"
    },
    {
      "question": "Access client feedback scores and comments from m_client_feedback in ida_en_feedback employing TEE for client IDs equating param_client_id.",
      "Chinese_question": "利用TEE从ida_en_feedback平台的m_client_feedback表中访问与param_client_id匹配的客户反馈评分和评论。",
      "PQL_query": "SELECT ida_en_feedback.m_client_feedback.score, ida_en_feedback.m_client_feedback.comments WHERE ida_en_feedback.m_client_feedback.client_id = param_client_id USING TEE;"
    },
    {
      "question": "Query secure TEE for contractor details and project codes from t_project_contractors on ida_en_projects for contractor numbers indicated by param_contractor_num.",
      "Chinese_question": "通过安全TEE从ida_en_projects平台的t_project_contractors表中查询与param_contractor_num匹配的承包商详细信息和项目代码。",
      "PQL_query": "SELECT ida_en_projects.t_project_contractors.details, ida_en_projects.t_project_contractors.project_code WHERE ida_en_projects.t_project_contractors.contractor_num = param_contractor_num USING TEE;"
    },
    {
      "question": "Using TEE, obtain account types and balances from m_account_summary in ida_en_accounts for account IDs stated as param_account_id.",
      "Chinese_question": "使用TEE从ida_en_accounts平台的m_account_summary表中获取与param_account_id匹配的账户类型和余额。",
      "PQL_query": "SELECT ida_en_accounts.m_account_summary.account_type, ida_en_accounts.m_account_summary.balance WHERE ida_en_accounts.m_account_summary.account_id = param_account_id USING TEE;"
    },
    {
      "question": "Securely retrieve environmental readings and timestamps with TEE from t_monitor_data in ida_en_environment, matching param_reading_id.",
      "Chinese_question": "使用TEE安全地从ida_en_environment平台的t_monitor_data表中检索与param_reading_id匹配的环境读数和时间戳。",
      "PQL_query": "SELECT ida_en_environment.t_monitor_data.reading, ida_en_environment.t_monitor_data.timestamp WHERE ida_en_environment.t_monitor_data.reading_id = param_reading_id USING TEE;"
    },
    {
      "question": "Extract secure device logs and errors using TEE hardware from m_device_logs within ida_en_devops, identified by device IDs param_device_id.",
      "Chinese_question": "利用TEE硬件从ida_en_devops平台的m_device_logs表中提取与param_device_id匹配的安全设备日志和错误。",
      "PQL_query": "SELECT ida_en_devops.m_device_logs.device_log, ida_en_devops.m_device_logs.error WHERE ida_en_devops.m_device_logs.device_id = param_device_id USING TEE;"
    },
    {
      "question": "Access product names and categories using TEE from ida_en_products's t_product_catalog for catalog numbers marked by param_catalog_num.",
      "Chinese_question": "通过TEE从ida_en_products平台的t_product_catalog表中访问与param_catalog_num匹配的产品名称和类别。",
      "PQL_query": "SELECT ida_en_products.t_product_catalog.product_name, ida_en_products.t_product_catalog.category WHERE ida_en_products.t_product_catalog.catalog_num = param_catalog_num USING TEE;"
    },
    {
      "question": "Retrieve student ids and grades from m_student_records on platform ida_en_education for roll numbers aligned with param_roll_num using TEE hardware.",
      "Chinese_question": "通过TEE硬件从ida_en_education平台m_student_records表中检索与param_roll_num匹配的学生id和成绩。",
      "PQL_query": "SELECT ida_en_education.m_student_records.student_id, ida_en_education.m_student_records.grade WHERE ida_en_education.m_student_records.roll_num = param_roll_num USING TEE;"
    },
    {
      "question": "Extract patient diagnoses and treatment plans from t_medical_history within ida_en_healthcare using TEE aligned with patient IDs param_patient_id.",
      "Chinese_question": "使用TEE从ida_en_healthcare平台t_medical_history表中提取与param_patient_id匹配的患者诊断和治疗方案。",
      "PQL_query": "SELECT ida_en_healthcare.t_medical_history.diagnosis, ida_en_healthcare.t_medical_history.treatment WHERE ida_en_healthcare.t_medical_history.patient_id = param_patient_id USING TEE;"
    },
    {
      "question": "Using secure TEE, access flight numbers and departure times from m_flight_schedule in ida_en_airlines for flight codes matching param_flight_code.",
      "Chinese_question": "利用安全TEE从ida_en_airlines平台的m_flight_schedule表中访问与param_flight_code匹配的航班号和起飞时间。",
      "PQL_query": "SELECT ida_en_airlines.m_flight_schedule.flight_number, ida_en_airlines.m_flight_schedule.departure_time WHERE ida_en_airlines.m_flight_schedule.flight_code = param_flight_code USING TEE;"
    },
    {
      "question": "Use secure TEE to gather book titles and author names from ida_en_library's m_book_inventory table for ISBNs specifying param_isbn.",
      "Chinese_question": "使用安全TEE从ida_en_library平台的m_book_inventory表中获取与param_isbn匹配的书名和作者名。",
      "PQL_query": "SELECT ida_en_library.m_book_inventory.title, ida_en_library.m_book_inventory.author WHERE ida_en_library.m_book_inventory.isbn = param_isbn USING TEE;"
    },
    {
      "question": "Access vehicle registrations and owner details using TEE from ida_en_vehicle's t_registration_list for vehicle IDs depicted by param_vehicle_id.",
      "Chinese_question": "通过TEE从ida_en_vehicle平台的t_registration_list表中访问与param_vehicle_id匹配的车辆登记和车主信息。",
      "PQL_query": "SELECT ida_en_vehicle.t_registration_list.registration, ida_en_vehicle.t_registration_list.owner WHERE ida_en_vehicle.t_registration_list.vehicle_id = param_vehicle_id USING TEE;"
    },
    {
      "question": "Retrieve secure access logs and user IDs within ida_en_security from t_access_records where record IDs equal param_record_id using TEE.",
      "Chinese_question": "通过TEE从ida_en_security平台的t_access_records表中检索与param_record_id匹配的安全访问日志和用户id。",
      "PQL_query": "SELECT ida_en_security.t_access_records.access_log, ida_en_security.t_access_records.user_id WHERE ida_en_security.t_access_records.record_id = param_record_id USING TEE;"
    }
  ],
  "hardware_PIRMPC": [
    {
      "question": "Using TEE hardware, calculate the sum of the balance field and variable t2 from the m_enterprise_1w table of the ida_en_one platform, for records where the id matches the value t1.",
      "Chinese_question": "在使用TEE硬件的情况下,计算ida_en_one平台的m_enterprise_1w表中id字段与t1值相等记录的balance字段与变量t2的和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Find out the total balance added with t2 for the rows in ida_en_one's m_enterprise_1w table with the id matching t1 using TEE.",
      "Chinese_question": "使用TEE硬件,找出ida_en_one平台的m_enterprise_1w表中id值为t1的行的balance加上t2的总和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Compute the value of the balance field plus t2 across all records with matching id t1 in the m_enterprise_1w table using the platform ida_en_one via TEE.",
      "Chinese_question": "通过TEE硬件计算ida_en_one平台m_enterprise_1w表中id值为t1的记录balance字段与t2之和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Using TEE hardware, determine the sum of the balances plus t2 for entries in ida_en_one's m_enterprise_1w table where id equals t1.",
      "Chinese_question": "在使用TEE硬件时,确定ida_en_one平台m_enterprise_1w表中id等于t1的记录balance加上t2的和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "In a TEE setting, calculate the adjusted balance by adding t2 for records where id is equal to t1 in ida_en_one's m_enterprise_1w table.",
      "Chinese_question": "在TEE环境下,计算ida_en_one平台m_enterprise_1w表中id等于t1的记录balance加上t2后的调整值。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Determine the sum of the balance field and t2 using TEE for records in m_enterprise_1w table of ida_en_one with id matching t1.",
      "Chinese_question": "使用TEE硬件,计算ida_en_one平台m_enterprise_1w表中id字段与t1值匹配记录的balance字段与t2的和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Use TEE to add t2 to the balance of entries in ida_en_one's m_enterprise_1w table where id equals t1.",
      "Chinese_question": "使用TEE硬件,将ida_en_one平台m_enterprise_1w表中id值等于t1的记录balance与t2相加。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Find the sum of balance plus t2 for each record where id matches t1 in the ida_en_one m_enterprise_1w table using TEE.",
      "Chinese_question": "使用TEE硬件,找出ida_en_one平台m_enterprise_1w表中id与t1匹配记录的balance加上t2的和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Calculating via TEE, determine the value resulting from the balance field added to t2 for records where id equals t1 in the m_enterprise_1w table on platform ida_en_one.",
      "Chinese_question": "通过TEE硬件计算ida_en_one平台m_enterprise_1w表中id等于t1的记录balance字段加上t2后的值。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "In the TEE hardware environment, sum the balance with t2 from ida_en_one's m_enterprise_1w table for rows where id is t1.",
      "Chinese_question": "在TEE硬件环境中,针对ida_en_one平台m_enterprise_1w表中id为t1的行,将balance与t2相加。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Using TEE, compute the balance plus t2 from the m_enterprise_1w table for ids that match t1 in ida_en_one.",
      "Chinese_question": "使用TEE计算ida_en_one平台m_enterprise_1w表中id匹配t1的balance加上t2。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Securely, via TEE, find the sum of each balance and t2 for entries where id equals t1 in ida_en_one's m_enterprise_1w table.",
      "Chinese_question": "通过TEE安全地找到ida_en_one平台m_enterprise_1w表中id等于t1的记录的balance与t2的和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Sum the balance field and t2 for all rows in the m_enterprise_1w table with id matching t1 on ida_en_one using TEE hardware.",
      "Chinese_question": "使用TEE硬件,将ida_en_one平台m_enterprise_1w表中id匹配t1的行的balance字段与t2相加。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Using a TEE setup, calculate the total balance added with t2 for id equals t1 in ida_en_one's m_enterprise_1w table.",
      "Chinese_question": "在TEE设置中,计算ida_en_one平台m_enterprise_1w表中id等于t1的balance加上t2的总和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Determine via TEE the combined total of balance and t2 for records in the m_enterprise_1w table of ida_en_one where id equals t1.",
      "Chinese_question": "通过TEE硬件确定ida_en_one平台m_enterprise_1w表中id等于t1记录的balance与t2的总和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Via TEE, find the sum of balance and t2 for entries where id matches t1 in ida_en_one's m_enterprise_1w table.",
      "Chinese_question": "通过TEE找到ida_en_one平台m_enterprise_1w表中id匹配t1记录的balance与t2的和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Using TEE hardware, calculate the balance field increased by t2 for rows where id equals t1 in ida_en_one's m_enterprise_1w table.",
      "Chinese_question": "使用TEE硬件计算ida_en_one平台m_enterprise_1w表中id等于t1的行的balance字段加上t2后的值。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Calculate the combined balance and t2 for all entries with matching id t1 in ida_en_one's m_enterprise_1w table using TEE.",
      "Chinese_question": "使用TEE计算ida_en_one平台m_enterprise_1w表中id与你匹配t1的记录的balance与t2的合计。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Sum the balance column and t2 for rows where id equals t1 in the m_enterprise_1w table on ida_en_one platform using TEE.",
      "Chinese_question": "使用TEE硬件,将ida_en_one平台m_enterprise_1w表中id等于t1的行的balance列与t2相加。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Using TEE, identify the sum of balance plus t2 for rows in ida_en_one's m_enterprise_1w table where the id matches t1.",
      "Chinese_question": "使用TEE识别ida_en_one平台m_enterprise_1w表中id匹配t1的行的balance与t2的和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "In a TEE context, compute the total of balance plus t2 for entries where id equals t1 in ida_en_one's m_enterprise_1w table.",
      "Chinese_question": "在TEE环境中计算ida_en_one平台m_enterprise_1w表中id等于t1的记录的balance加上t2的总和。",
      "PQL_query": "SET t1 = ?; SET t2 = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc001(ida_en_one.m_enterprise_1w.balance, t2) FROM ida_en_one.m_enterprise_1w WHERE ida_en_one.m_enterprise_1w.id = t1"
    },
    {
      "question": "Using TEE hardware, determine the average salary of employees from the emp_data table on the hr_records platform where the department equals to the variable dep.",
      "Chinese_question": "在TEE硬件环境中,计算hr_records平台的emp_data表中部门字段与变量dep相等的员工的平均薪资。",
      "PQL_query": "SET dep = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(avg(hr_records.emp_data.salary)) FROM hr_records.emp_data WHERE hr_records.emp_data.department = dep"
    },
    {
      "question": "In a TEE environment, compute the total sales from the sales_figures table of the sales_db platform for the specific month variable mon.",
      "Chinese_question": "在TEE环境中,计算sales_db平台的sales_figures表中指定月份变量mon的总销售额。",
      "PQL_query": "SET mon = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc003(sum(sales_db.sales_figures.sales)) FROM sales_db.sales_figures WHERE sales_db.sales_figures.month = mon"
    },
    {
      "question": "Using TEE hardware, find out the maximum temperature recorded in the climate_data table on the env_monitor platform for the given city identifier city_id.",
      "Chinese_question": "借助TEE硬件,查找env_monitor平台的climate_data表中给定城市标识符city_id的最高温度记录。",
      "PQL_query": "SET city_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc004(max(env_monitor.climate_data.temperature)) FROM env_monitor.climate_data WHERE env_monitor.climate_data.city_id = city_id"
    },
    {
      "question": "In the context of TEE, calculate the number of transactions from user_transactions table in the account_ledger platform where account_type matches the variable acc_type.",
      "Chinese_question": "在TEE上下文中,计算account_ledger平台的user_transactions表中账户类型与变量acc_type匹配的交易数量。",
      "PQL_query": "SET acc_type = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc005(count(account_ledger.user_transactions.transaction_id)) FROM account_ledger.user_transactions WHERE account_ledger.user_transactions.account_type = acc_type"
    },
    {
      "question": "On TEE hardware, evaluate the variance of stock prices from the equity_data table in the market_insights platform for stock with symbol ticker.",
      "Chinese_question": "在TEE硬件上,评价market_insights平台的equity_data表中符号为ticker的股票价格的方差。",
      "PQL_query": "SET ticker = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc006(variance(market_insights.equity_data.price)) FROM market_insights.equity_data WHERE market_insights.equity_data.symbol = ticker"
    },
    {
      "question": "Using TEE, ascertain the total number of patients listed in the hospital_data table from healthcare_records platform whose age is greater than a certain age_limit variable.",
      "Chinese_question": "在TEE环境中,确认healthcare_records平台的hospital_data表中年龄大于age_limit变量的总病人数。",
      "PQL_query": "SET age_limit = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc007(count(healthcare_records.hospital_data.patient_id)) FROM healthcare_records.hospital_data WHERE healthcare_records.hospital_data.age > age_limit"
    },
    {
      "question": "Within a TEE protected environment, calculate the standard deviation of heights in the student_info table on the education_db platform for students in the class specified by class_id.",
      "Chinese_question": "在受TEE保护的环境中,计算education_db平台的student_info表中指定class_id班级的学生身高的标准差。",
      "PQL_query": "SET class_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc008(stddev(education_db.student_info.height)) FROM education_db.student_info WHERE education_db.student_info.class = class_id"
    },
    {
      "question": "Find the sum of all discounts from the promotions table on the retail_sys platform during the event coded by event_id using TEE.",
      "Chinese_question": "在TEE环境中,查找retail_sys平台的promotions表中事件编码为event_id期间的所有折扣的总和。",
      "PQL_query": "SET event_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc009(sum(retail_sys.promotions.discount)) FROM retail_sys.promotions WHERE retail_sys.promotions.event_code = event_id"
    },
    {
      "question": "With TEE technology, retrieve the average score from the exam_results table on test_portal platform where the subject equals to the subject_code variable.",
      "Chinese_question": "使用TEE技术,检索test_portal平台的exam_results表中科目字段等于subject_code变量的平均分。",
      "PQL_query": "SET subject_code = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc010(avg(test_portal.exam_results.score)) FROM test_portal.exam_results WHERE test_portal.exam_results.subject = subject_code"
    },
    {
      "question": "Under TEE, evaluate the median of property values from the realty_info table on the housing_data platform for the specified region region_name.",
      "Chinese_question": "在TEE下,评估housing_data平台的realty_info表中指定地区region_name的房产价值中位数。",
      "PQL_query": "SET region_name = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc011(median(housing_data.realty_info.price)) FROM housing_data.realty_info WHERE housing_data.realty_info.region = region_name"
    },
    {
      "question": "Using TEE hardware, discover the lowest price in the market_data table on the commodity_info platform for commodities of type commodity_type.",
      "Chinese_question": "使用TEE硬件,找出commodity_info平台的market_data表中商品类型为commodity_type的最低价格。",
      "PQL_query": "SET commodity_type = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc012(min(commodity_info.market_data.price)) FROM commodity_info.market_data WHERE commodity_info.market_data.type = commodity_type"
    },
    {
      "question": "In a TEE setting, compute the total revenue for products from product_sales table on ecommerce_db platform with category matching the category_id.",
      "Chinese_question": "在TEE设置中,计算ecommerce_db平台的product_sales表中匹配category_id的产品的总收入。",
      "PQL_query": "SET category_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc013(sum(ecommerce_db.product_sales.revenue)) FROM ecommerce_db.product_sales WHERE ecommerce_db.product_sales.category = category_id"
    },
    {
      "question": "Leverage TEE hardware to determine the average mileage for vehicles in the vehicle_registry table on the auto_records platform where the model matches model_name.",
      "Chinese_question": "利用TEE硬件,确定auto_records平台的vehicle_registry表中车型匹配model_name的车辆的平均里程。",
      "PQL_query": "SET model_name = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc014(avg(auto_records.vehicle_registry.mileage)) FROM auto_records.vehicle_registry WHERE auto_records.vehicle_registry.model = model_name"
    },
    {
      "question": "On TEE hardware, find the number of flights in the flight_schedule table of airline_system platform where the destination is specified by airport_code.",
      "Chinese_question": "在TEE硬件上,找出airline_system平台的flight_schedule表中目的地指定为airport_code的航班数量。",
      "PQL_query": "SET airport_code = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc015(count(airline_system.flight_schedule.flight_id)) FROM airline_system.flight_schedule WHERE airline_system.flight_schedule.destination = airport_code"
    },
    {
      "question": "In the context of TEE, identify the highest grossing movie from movie_revenue table on entertainment_db platform where genre equals genre_var.",
      "Chinese_question": "在TEE环境中,识别entertainment_db平台的movie_revenue表中类型等于genre_var的票房最高电影。",
      "PQL_query": "SET genre_var = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc016(max(entertainment_db.movie_revenue.gross)) FROM entertainment_db.movie_revenue WHERE entertainment_db.movie_revenue.genre = genre_var"
    },
    {
      "question": "Using TEE, calculate the percentage of passed exams from student_scores table in the education_system platform where passing_criteria is a predefined threshold.",
      "Chinese_question": "使用TEE,计算education_system平台的student_scores表中通过考试的百分比,其中通过标准为预定义门槛。",
      "PQL_query": "SELECT /*+ FULLY_COV(TEE) */ pirmpc017(100.0*sum(case when education_system.student_scores.score >= passing_criteria then 1 else 0 end) / count(*)) FROM education_system.student_scores"
    },
    {
      "question": "Under TEE protection, find the total number of new users registered in the user_base table on digital_platform platform during the month specified by mon_var.",
      "Chinese_question": "在TEE保护下,查找digital_platform平台的user_base表中指定月份mon_var的新注册用户总数。",
      "PQL_query": "SET mon_var = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc018(count(digital_platform.user_base.user_id)) FROM digital_platform.user_base WHERE digital_platform.user_base.registration_month = mon_var"
    },
    {
      "question": "With TEE technology, compute the sum of all outstanding loans from the loan_portfolio table of the bank_records platform for loans with interest rate above rate_thr.",
      "Chinese_question": "使用TEE技术,计算bank_records平台的loan_portfolio表中利息率高于rate_thr的所有未偿还贷款总和。",
      "PQL_query": "SET rate_thr = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc019(sum(bank_records.loan_portfolio.loan_amount)) FROM bank_records.loan_portfolio WHERE bank_records.loan_portfolio.interest_rate > rate_thr"
    },
    {
      "question": "Using TEE hardware, derive the average age of customers from the client_list table on the crm_database platform for those with status matching cust_status.",
      "Chinese_question": "使用TEE硬件,从crm_database平台的client_list表中,得出状态匹配cust_status的客户的平均年龄。",
      "PQL_query": "SET cust_status = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc020(avg(crm_database.client_list.age)) FROM crm_database.client_list WHERE crm_database.client_list.status = cust_status"
    },
    {
      "question": "In a TEE environment, retrieve the total sales from the sales_data table on the sales_platform where the category matches the variable cat.",
      "Chinese_question": "通过TEE硬件,查询sales_platform平台中sales_data表里类别字段与变量cat相同的销售总额。",
      "PQL_query": "SET cat = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(sales_platform.sales_data.sales_amount)) FROM sales_platform.sales_data WHERE sales_platform.sales_data.category = cat"
    },
    {
      "question": "Find the number of transactions from the transaction_records table on the finance_platform where the date is equal to the parameter transaction_date, using TEE.",
      "Chinese_question": "在TEE硬件中计算finance_platform平台的transaction_records表中过滤掉交易日期等于给定参数transaction_date的交易数量。",
      "PQL_query": "SET transaction_date = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(count(finance_platform.transaction_records.transaction_id)) FROM finance_platform.transaction_records WHERE finance_platform.transaction_records.transaction_date = transaction_date"
    },
    {
      "question": "Using the TEE, calculate the maximum price from the products table in the inventory_platform where the supplier_id equals input supplier.",
      "Chinese_question": "利用TEE硬件计算,查询inventory_platform平台下的products表中供货商ID字段等于输入参数supplier的最大商品价格。",
      "PQL_query": "SET supplier = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(max(inventory_platform.products.price)) FROM inventory_platform.products WHERE inventory_platform.products.supplier_id = supplier"
    },
    {
      "question": "In a TEE context, compute the median score from the scores table on the edu_platform where the class_id aligns with the variable class_code.",
      "Chinese_question": "通过TEE环境,在edu_platform平台的scores表中过滤出班级ID与参数class_code匹配的中位数分数。",
      "PQL_query": "SET class_code = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(median(edu_platform.scores.score)) FROM edu_platform.scores WHERE edu_platform.scores.class_id = class_code"
    },
    {
      "question": "Use TEE to identify the earliest transaction date from the payments table in the commerce_platform where the customer matches the value of cust.",
      "Chinese_question": "通过TEE查找,确定commerce_platform平台的payments表中customer字段等于值cust的最早交易日期。",
      "PQL_query": "SET cust = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(min(commerce_platform.payments.transaction_date)) FROM commerce_platform.payments WHERE commerce_platform.payments.customer = cust"
    },
    {
      "question": "Retrieve the distinct product names from the catalog table in the retail_platform where the product_type equals a specific type, using TEE.",
      "Chinese_question": "在TEE环境中查询retail_platform的catalog表中产品类型等于某一特定类型的不同产品名称。",
      "PQL_query": "SET type = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(distinct retail_platform.catalog.product_name) FROM retail_platform.catalog WHERE retail_platform.catalog.product_type = type"
    },
    {
      "question": "Using TEE, calculate the total hours worked from the timesheets table on the hr_platform when employee_id equals the given emp_id.",
      "Chinese_question": "通过TEE计算hr_platform平台上的timesheets表中员工ID字段与给定参数emp_id相同的工作总时数。",
      "PQL_query": "SET emp_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(hr_platform.timesheets.hours_worked)) FROM hr_platform.timesheets WHERE hr_platform.timesheets.employee_id = emp_id"
    },
    {
      "question": "In a secure TEE setup, determine the count of active users from the user_data table in the user_platform whose status matches the stat variable.",
      "Chinese_question": "在TEE环境中查找user_platform下的user_data表中状态与参数stat一致的活跃用户数量。",
      "PQL_query": "SET stat = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(count(user_platform.user_data.user_id)) FROM user_platform.user_data WHERE user_platform.user_data.status = stat"
    },
    {
      "question": "Utilize the TEE to find the average rating from the reviews table in the entertainment_platform where movie_id is equivalent to mov.",
      "Chinese_question": "通过TEE查找,计算entertainment_platform的reviews表中电影ID字段等于参数mov的平均评分。",
      "PQL_query": "SET mov = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(avg(entertainment_platform.reviews.rating)) FROM entertainment_platform.reviews WHERE entertainment_platform.reviews.movie_id = mov"
    },
    {
      "question": "Calculate, using TEE, the sum of all bonuses from the compensation table in the employment_platform when the department_id matches dep.",
      "Chinese_question": "利用TEE计算employment_platform平台的compensation表中部门ID字段与参数dep匹配的所有奖金总和。",
      "PQL_query": "SET dep = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(employment_platform.compensation.bonus)) FROM employment_platform.compensation WHERE employment_platform.compensation.department_id = dep"
    },
    {
      "question": "In a TEE hardware setting, find the maximum order_quantity from the orders table on the supply_platform for a specified product_id.",
      "Chinese_question": "利用TEE硬件,在supply_platform的orders表中查找特定product_id的最大订单数量。",
      "PQL_query": "SET product_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(max(supply_platform.orders.order_quantity)) FROM supply_platform.orders WHERE supply_platform.orders.product_id = product_id"
    },
    {
      "question": "Determine the sum of scores in the exams table from the education_platform where subject matches the given subj, utilizing TEE.",
      "Chinese_question": "在TEE环境中,计算education_platform下的exams表中科目字段等于给定subj的分数总和。",
      "PQL_query": "SET subj = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(education_platform.exams.score)) FROM education_platform.exams WHERE education_platform.exams.subject = subj"
    },
    {
      "question": "Using TEE, find how many customers there are in the customer_table on the biz_platform whose age exceeds the inputted age param.",
      "Chinese_question": "在TEE硬件中计算biz_platform平台的customer_table中年龄大于输入年龄参数的顾客数量。",
      "PQL_query": "SET age_param = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(count(biz_platform.customer_table.customer_id)) FROM biz_platform.customer_table WHERE biz_platform.customer_table.age > age_param"
    },
    {
      "question": "Retrieve the total expenses from the expense_table in the accounts_platform where the project_id equals the input prj_id using TEE.",
      "Chinese_question": "通过TEE硬件,取得accounts_platform的expense_table中项目ID字段与输入prj_id相符的总开支。",
      "PQL_query": "SET prj_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(accounts_platform.expense_table.expense_amount)) FROM accounts_platform.expense_table WHERE accounts_platform.expense_table.project_id = prj_id"
    },
    {
      "question": "In the TEE system, fetch the count of employees earning over a certain salary from the payroll table on finance_system.",
      "Chinese_question": "利用TEE系统,在finance_system的平台上查找payroll表中收入高于某一工资的员工数量。",
      "PQL_query": "SET certain_salary = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(count(finance_system.payroll.employee_id)) FROM finance_system.payroll WHERE finance_system.payroll.salary > certain_salary"
    },
    {
      "question": "Using TEE, determine the lowest sale price from the sales_inventory table in the sales_platform when region_id equals input region.",
      "Chinese_question": "通过TEE硬件,查询sales_platform的sales_inventory表中地区ID等于输入region的最低销售价格。",
      "PQL_query": "SET region = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(min(sales_platform.sales_inventory.sale_price)) FROM sales_platform.sales_inventory WHERE sales_platform.sales_inventory.region_id = region"
    },
    {
      "question": "In a TEE setup, compute the total hours from the shift_data table in the operations_platform for an employee given by emp_num.",
      "Chinese_question": "利用TEE硬件,从operations_platform的平台的shift_data表中计算指定emp_num员工的总工作时数。",
      "PQL_query": "SET emp_num = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(operations_platform.shift_data.hours)) FROM operations_platform.shift_data WHERE operations_platform.shift_data.employee_number = emp_num"
    },
    {
      "question": "Retrieve the distinct project names from the project_list table in the projects_platform where manager_id matches a given manager in TEE.",
      "Chinese_question": "在TEE环境中查询projects_platform中project_list表中manager_id与给定manager相符的不重复项目名称。",
      "PQL_query": "SET manager = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(distinct projects_platform.project_list.project_name) FROM projects_platform.project_list WHERE projects_platform.project_list.manager_id = manager"
    },
    {
      "question": "Find the total revenue from the revenue_stream table in the business_platform where sector equals a certain sec, using TEE.",
      "Chinese_question": "利用TEE硬件,在business_platform的revenue_stream表中计算行业字段等于给定sec的总收入。",
      "PQL_query": "SET sec = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(business_platform.revenue_stream.revenue)) FROM business_platform.revenue_stream WHERE business_platform.revenue_stream.sector = sec"
    },
    {
      "question": "Using TEE, calculate the number of orders greater than a specific order_value from the orders_data table in orders_platform.",
      "Chinese_question": "通过TEE计算orders_platform中的orders_data表中订单额度超过特定order_value的订单数量。",
      "PQL_query": "SET order_value = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(count(orders_platform.orders_data.order_id)) FROM orders_platform.orders_data WHERE orders_platform.orders_data.order_value > order_value"
    },
    {
      "question": "In the secure TEE environment, find the average salary from the payroll_table on the employee_platform where the department matches the provided dept_id.",
      "Chinese_question": "在TEE硬件环境中,从employee_platform平台上的payroll_table表找到与提供的部门ID匹配的平均工资。",
      "PQL_query": "SET dept_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc003(avg(employee_platform.payroll_table.salary)) FROM employee_platform.payroll_table WHERE employee_platform.payroll_table.department = dept_id"
    },
    {
      "question": "Using TEE, extract the max temperature from the weather_records on weather_station where city corresponds to city_code.",
      "Chinese_question": "通过TEE硬件,从weather_station平台的weather_records表中提取城市代码对应城市的最高气温。",
      "PQL_query": "SET city_code = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc004(max(weather_station.weather_records.temperature)) FROM weather_station.weather_records WHERE weather_station.weather_records.city = city_code"
    },
    {
      "question": "With TEE, determine the total score from student_scores on the education_platform when the student ID matches the variable student_id.",
      "Chinese_question": "在TEE环境中,当学生ID与变量student_id匹配时,从education_platform平台上的student_scores表中确定总分。",
      "PQL_query": "SET student_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc005(sum(education_platform.student_scores.score)) FROM education_platform.student_scores WHERE education_platform.student_scores.student_id = student_id"
    },
    {
      "question": "Within the secure TEE setup, retrieve the total revenue from transactions_table on ecommerce_platform where the product_id equals given product.",
      "Chinese_question": "在安全的TEE设置中,检索ecommerce_platform平台transactions_table表中产品ID与给定产品相等的总收入。",
      "PQL_query": "SET product = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc006(sum(ecommerce_platform.transactions_table.revenue)) FROM ecommerce_platform.transactions_table WHERE ecommerce_platform.transactions_table.product_id = product"
    },
    {
      "question": "Using TEE hardware, compute the average age from user_data on social_network where group_id matches the variable group.",
      "Chinese_question": "利用TEE硬件计算social_network平台user_data表中group字段与变量group相匹配的平均年龄。",
      "PQL_query": "SET group = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc007(avg(social_network.user_data.age)) FROM social_network.user_data WHERE social_network.user_data.group_id = group"
    },
    {
      "question": "In TEE, find the maximum speed from vehicle_info on transport_platform where the model corresponds to model_id.",
      "Chinese_question": "在TEE环境中,从transport_platform平台的vehicle_info表中找到车辆型号与model_id对应的最高时速。",
      "PQL_query": "SET model_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc008(max(transport_platform.vehicle_info.speed)) FROM transport_platform.vehicle_info WHERE transport_platform.vehicle_info.model = model_id"
    },
    {
      "question": "Utilizing TEE, fetch the minimal cost from project_budget on corporate_db where project_code matches code.",
      "Chinese_question": "利用TEE,从corporate_db平台project_budget表中提取项目代码与code相匹配的最低费用。",
      "PQL_query": "SET code = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc009(min(corporate_db.project_budget.cost)) FROM corporate_db.project_budget WHERE corporate_db.project_budget.project_code = code"
    },
    {
      "question": "With TEE security, calculate the sum of distances from travel_data on travel_platform where the destination is dest.",
      "Chinese_question": "在TEE安全环境下,计算travel_platform平台travel_data表中目的地字段等于变量dest的距离总和。",
      "PQL_query": "SET dest = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc010(sum(travel_platform.travel_data.distance)) FROM travel_platform.travel_data WHERE travel_platform.travel_data.destination = dest"
    },
    {
      "question": "In TEE mode, derive the average price from market_table on commerce_platform where category_id matches the given category.",
      "Chinese_question": "在TEE模式中,推导出commerce_platform平台market_table表中category_id与给定类别匹配的平均价格。",
      "PQL_query": "SET category = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc011(avg(commerce_platform.market_table.price)) FROM commerce_platform.market_table WHERE commerce_platform.market_table.category_id = category"
    },
    {
      "question": "Using TEE, sum the weights from inventory_table on logistics_platform where item_id corresponds to item.",
      "Chinese_question": "使用TEE,将logistics_platform平台inventory_table表中item_id等于item的重量进行求和。",
      "PQL_query": "SET item = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc012(sum(logistics_platform.inventory_table.weight)) FROM logistics_platform.inventory_table WHERE logistics_platform.inventory_table.item_id = item"
    },
    {
      "question": "In the secure TEE environment, find the total attendance from events_register on event_platform where the event_code matches code.",
      "Chinese_question": "在TEE硬件环境中,从event_platform平台的events_register表中找到与提供的事件代码code匹配的总出勤。",
      "PQL_query": "SET code = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc013(sum(event_platform.events_register.attendance)) FROM event_platform.events_register WHERE event_platform.events_register.event_code = code"
    },
    {
      "question": "Using TEE, calculate the average score from games_scoreboard on gaming_system where level_id matches given level.",
      "Chinese_question": "通过TEE硬件,从gaming_system平台games_scoreboard表中计算关卡ID与给定关卡匹配的平均成绩。",
      "PQL_query": "SET level = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc014(avg(gaming_system.games_scoreboard.score)) FROM gaming_system.games_scoreboard WHERE gaming_system.games_scoreboard.level_id = level"
    },
    {
      "question": "With TEE, find the highest rating from movie_reviews on film_database where genre corresponds to genre_code.",
      "Chinese_question": "使用TEE硬件,从film_database平台movie_reviews表中找到与genre_code对应的最高评分。",
      "PQL_query": "SET genre_code = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc015(max(film_database.movie_reviews.rating)) FROM film_database.movie_reviews WHERE film_database.movie_reviews.genre = genre_code"
    },
    {
      "question": "Within the TEE context, derive the average review length from book_reviews on literature_platform where author_id matches author.",
      "Chinese_question": "在TEE环境中,从literature_platform平台book_reviews表中找出作者ID与变量author相匹配的评论平均长度。",
      "PQL_query": "SET author = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc016(avg(literature_platform.book_reviews.review_length)) FROM literature_platform.book_reviews WHERE literature_platform.book_reviews.author_id = author"
    },
    {
      "question": "Using TEE, select the total carbon emissions from environment_data on green_platform where the region corresponds to region_id.",
      "Chinese_question": "利用TEE硬件选择green_platform平台environment_data表中与region_id相对应的总碳排放量。",
      "PQL_query": "SET region_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc017(sum(green_platform.environment_data.carbon_emissions)) FROM green_platform.environment_data WHERE green_platform.environment_data.region = region_id"
    },
    {
      "question": "In TEE, compute the total orders from order_table on retail_db where customer_id matches customer.",
      "Chinese_question": "在TEE环境中,计算retail_db平台order_table表中客户ID与customer匹配的总订单量。",
      "PQL_query": "SET customer = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc018(sum(retail_db.order_table.orders)) FROM retail_db.order_table WHERE retail_db.order_table.customer_id = customer"
    },
    {
      "question": "With TEE hardware, obtain the total number of pages read from reading_log on library_system where book_id matches book.",
      "Chinese_question": "使用TEE硬件,从library_system平台的reading_log表中获得与书本ID匹配的已读页数总数。",
      "PQL_query": "SET book = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc019(sum(library_system.reading_log.pages_read)) FROM library_system.reading_log WHERE library_system.reading_log.book_id = book"
    },
    {
      "question": "Using TEE, identify the highest altitude from mountain_records on exploration_platform where peak_id corresponds to the variable peak.",
      "Chinese_question": "通过TEE硬件,从exploration_platform平台的mountain_records表中识别与变量peak对应的最高海拔。",
      "PQL_query": "SET peak = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc020(max(exploration_platform.mountain_records.altitude)) FROM exploration_platform.mountain_records WHERE exploration_platform.mountain_records.peak_id = peak"
    },
    {
      "question": "Within the TEE environment, compute the sum of all expenditures from finance_table on accounting_platform where account_id is account.",
      "Chinese_question": "在TEE环境中,从accounting_platform平台finance_table表中计算与变量account匹配的所有支出的总额。",
      "PQL_query": "SET account = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc021(sum(accounting_platform.finance_table.expenditure)) FROM accounting_platform.finance_table WHERE accounting_platform.finance_table.account_id = account"
    },
    {
      "question": "Using TEE setup, calculate the average success rate from performance_metrics on business_intelligence where team_id equals team.",
      "Chinese_question": "通过TEE设置,从business_intelligence平台performance_metrics表中计算与变量team相等的团队ID的平均成功率。",
      "PQL_query": "SET team = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc022(avg(business_intelligence.performance_metrics.success_rate)) FROM business_intelligence.performance_metrics WHERE business_intelligence.performance_metrics.team_id = team"
    },
    {
      "question": "Using a TEE, compute the total sales amount from the sales_data table on commerce_platform where the category matches the given category_id.",
      "Chinese_question": "在TEE中,计算commerce_platform平台上sales_data表中与给定类别ID匹配的总销售金额。",
      "PQL_query": "SET category_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc007(sum(commerce_platform.sales_data.amount)) FROM commerce_platform.sales_data WHERE commerce_platform.sales_data.category = category_id"
    },
    {
      "question": "In a TEE setting, retrieve the highest score from the student_scores table on education_platform where the course_id matches the specified ID.",
      "Chinese_question": "在TEE环境中,从education_platform平台上的student_scores表中获取与指定课程ID匹配的最高分。",
      "PQL_query": "SET course_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc009(max(education_platform.student_scores.score)) FROM education_platform.student_scores WHERE education_platform.student_scores.course_id = course_id"
    },
    {
      "question": "Find the total number of transactions in the financial_platform's transaction_log table in the TEE environment for a given account_id.",
      "Chinese_question": "在TEE环境中,查找financial_platform平台的transaction_log表中给定账户ID的总交易数。",
      "PQL_query": "SET account_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc005(count(financial_platform.transaction_log.transaction_id)) FROM financial_platform.transaction_log WHERE financial_platform.transaction_log.account_id = account_id"
    },
    {
      "question": "Using TEE, calculate the average age from the client_list table on the healthcare_platform for clients with a specified condition_id.",
      "Chinese_question": "在TEE中,计算healthcare_platform平台的client_list表中具有指定条件ID的客户的平均年龄。",
      "PQL_query": "SET condition_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc003(avg(healthcare_platform.client_list.age)) FROM healthcare_platform.client_list WHERE healthcare_platform.client_list.condition_id = condition_id"
    },
    {
      "question": "Securely find the least expensive product from the products table on the retail_platform within a TEE environment that belongs to the specified category_id.",
      "Chinese_question": "在TEE环境中,从retail_platform平台的products表中找到属于指定类别ID的最便宜产品。",
      "PQL_query": "SET category_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc008(min(retail_platform.products.price)) FROM retail_platform.products WHERE retail_platform.products.category_id = category_id"
    },
    {
      "question": "In the TEE, determine the total number of enrolled students from the enrollment_info table of the university_platform for a specific semester_id.",
      "Chinese_question": "在TEE中,确定university_platform平台的enrollment_info表中一个特定学期ID的总注册学生人数。",
      "PQL_query": "SET semester_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc005(count(university_platform.enrollment_info.student_id)) FROM university_platform.enrollment_info WHERE university_platform.enrollment_info.semester_id = semester_id"
    },
    {
      "question": "Use the TEE to calculate the sum of all expenses in the company_expense table on the corporate_platform for a particular project_id.",
      "Chinese_question": "使用TEE计算corporate_platform平台的company_expense表中特定项目ID的所有费用之和。",
      "PQL_query": "SET project_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(corporate_platform.company_expense.amount)) FROM corporate_platform.company_expense WHERE corporate_platform.company_expense.project_id = project_id"
    },
    {
      "question": "In a TEE framework, extract the maximum temperature recorded in the weather_data table on the climate_platform for a given station_id.",
      "Chinese_question": "在TEE框架中,从climate_platform平台的weather_data表中提取给定站点ID记录的最高温度。",
      "PQL_query": "SET station_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc009(max(climate_platform.weather_data.temperature)) FROM climate_platform.weather_data WHERE climate_platform.weather_data.station_id = station_id"
    },
    {
      "question": "Calculate the total revenue from the sales_records table on the online_marketplace within a TEE environment for the specified store_id.",
      "Chinese_question": "在TEE环境中,计算online_marketplace平台的sales_records表中指定商店ID的总收入。",
      "PQL_query": "SET store_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc007(sum(online_marketplace.sales_records.revenue)) FROM online_marketplace.sales_records WHERE online_marketplace.sales_records.store_id = store_id"
    },
    {
      "question": "In a TEE setting, identify the minimum age from the patient_database table on the hospital_system where the condition matches the input condition_id.",
      "Chinese_question": "在TEE环境中,从hospital_system平台的patient_database表中确定与输入条件ID匹配的最小年龄。",
      "PQL_query": "SET condition_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc008(min(hospital_system.patient_database.age)) FROM hospital_system.patient_database WHERE hospital_system.patient_database.condition_id = condition_id"
    },
    {
      "question": "Using TEE, assess the average rating from the feedback_table on the service_portal for services that match the given service_id.",
      "Chinese_question": "使用TEE,评估service_portal平台上的feedback_table中与给定服务ID匹配的平均评分。",
      "PQL_query": "SET service_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc003(avg(service_portal.feedback_table.rating)) FROM service_portal.feedback_table WHERE service_portal.feedback_table.service_id = service_id"
    },
    {
      "question": "Securely compute the sum of donations from the charity_records table on the foundation_platform within a TEE for a specific campaign_id.",
      "Chinese_question": "在TEE中,安全地计算foundation_platform平台的charity_records表中某个特定活动ID的捐赠总额。",
      "PQL_query": "SET campaign_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(foundation_platform.charity_records.amount)) FROM foundation_platform.charity_records WHERE foundation_platform.charity_records.campaign_id = campaign_id"
    },
    {
      "question": "Utilizing TEE, get the count of unique books from the library_records table on the library_platform that are of a certain genre_id.",
      "Chinese_question": "借助TEE,从library_platform平台上的library_records表中获取属于某个特定类型ID的独特书籍数量。",
      "PQL_query": "SET genre_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc006(count(distinct library_platform.library_records.book_id)) FROM library_platform.library_records WHERE library_platform.library_records.genre_id = genre_id"
    },
    {
      "question": "In a TEE environment, find the median income from the demographic_stats table on the census_platform for entries with a given region_id.",
      "Chinese_question": "在TEE环境中,从census_platform平台的demographic_stats表中查找具有给定区域ID的条目的收入中位数。",
      "PQL_query": "SET region_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc004(median(census_platform.demographic_stats.income)) FROM census_platform.demographic_stats WHERE census_platform.demographic_stats.region_id = region_id"
    },
    {
      "question": "Using a TEE setup, determine the total mobility score from the commute_data table on the urban_platform for a specified route_id.",
      "Chinese_question": "在TEE环境中,确定urban_platform平台的commute_data表中指定路线ID的总移动分数。",
      "PQL_query": "SET route_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc007(sum(urban_platform.commute_data.score)) FROM urban_platform.commute_data WHERE urban_platform.commute_data.route_id = route_id"
    },
    {
      "question": "Securely fetch the highest performance score from the project_evaluation table on the enterprise_platform within the TEE for a specified department_id.",
      "Chinese_question": "在TEE中,从enterprise_platform平台的project_evaluation表中安全地获取指定部门ID的最高绩效分数。",
      "PQL_query": "SET department_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc009(max(enterprise_platform.project_evaluation.performance_score)) FROM enterprise_platform.project_evaluation WHERE enterprise_platform.project_evaluation.department_id = department_id"
    },
    {
      "question": "Use TEE to find the total feedback count from the user_reviews table on product_platform where product equals the provided product_id.",
      "Chinese_question": "使用TEE从product_platform平台的user_reviews表中找出产品等于提供的product_id的总反馈数量。",
      "PQL_query": "SET product_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc005(count(product_platform.user_reviews.review_id)) FROM product_platform.user_reviews WHERE product_platform.user_reviews.product_id = product_id"
    },
    {
      "question": "Find the mean value of scores in the exam_results table on the education_platform under TEE, filtered by a specified student_id.",
      "Chinese_question": "在TEE中,查找education_platform平台上的exam_results表中由指定学生ID过滤的分数平均值。",
      "PQL_query": "SET student_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc003(avg(education_platform.exam_results.score)) FROM education_platform.exam_results WHERE education_platform.exam_results.student_id = student_id"
    },
    {
      "question": "In the TEE, calculate the sum of all project costs in the project_funding table on the innovation_platform for a given funding_round.",
      "Chinese_question": "在TEE中,计算innovation_platform平台的project_funding表中给定融资轮次的所有项目成本之和。",
      "PQL_query": "SET funding_round = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc002(sum(innovation_platform.project_funding.cost)) FROM innovation_platform.project_funding WHERE innovation_platform.project_funding.funding_round = funding_round"
    },
    {
      "question": "Using TEE, derive the total count of active users from the user_activity table on social_platform where the status matches the given status_id.",
      "Chinese_question": "使用TEE,从social_platform平台的user_activity表中获取状态与给定status_id匹配的活跃用户总数。",
      "PQL_query": "SET status_id = ?; SELECT /*+ FULLY_COV(TEE) */ pirmpc005(count(social_platform.user_activity.user_id)) FROM social_platform.user_activity WHERE social_platform.user_activity.status_id = status_id"
    }
  ],
  "Federated_learning": [
    {
      "question": "Use HELR federated learning to train a model on plat1's atest table and plat2's btest table with plat2.btest.y as the label.",
      "Chinese_question": "在plat1的atest表和plat2的btest表上使用HELR联邦学习进行训练,标签是plat2.btest.y。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.btest.y, features=[plat1.atest.*, plat2.btest.*]) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Evaluate the trained HELR model using binary settings after training with atest and btest tables from plat1 and plat2 respectively.",
      "Chinese_question": "使用plat1和plat2平台上的atest和btest表进行训练后,用二分类评估设置评估HELR模型。",
      "PQL_query": "SELECT Sequence(TRAIN(model_name=HELR,label=plat2.btest.y), EVAL(default_eval_setting=binary)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Perform federated prediction using HESB model trained on plat2's btest with model ID 202303231004509428550.",
      "Chinese_question": "使用HESB模型进行联邦预测,该模型在plat2的btest表上训练过,模型ID为202303231004509428550。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.btest, model_id=202303231004509428550) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Use HESB to train a model on tables atest and btest from plat1 and plat2, setting y from btest as the label and custom parameters.",
      "Chinese_question": "在plat1和plat2平台的atest和btest表上使用HESB进行模型训练,以btest的y为标签并设置自定义参数。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.btest.y, params=(num_trees=3,max_depth=3,learning_rate=0.2)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Initiate a federated training process with HELR model using feature engineering on plat1's atest and plat2's btest tables.",
      "Chinese_question": "在plat1的atest和plat2的btest表上使用特征工程启动HELR模型的联邦训练过程。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE,label=plat2.btest.y), TRAIN(model_name=HELR,label=plat2.btest.y)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Train a HESB model using the full features from plat1's atest and plat2's btest with btest.y as the outcome variable.",
      "Chinese_question": "使用plat1的atest和plat2的btest的所有特征训练HESB模型,btest.y作为结果变量。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.btest.y, features=[plat1.atest.*, plat2.btest.*]) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Use feature engineering followed by training with HELR on plat1's and plat2's datasets, specifying btest.y as label.",
      "Chinese_question": "在plat1和plat2的数据集上进行特征工程,然后使用HELR进行训练,指定btest.y为标签。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE,label=plat2.btest.y), TRAIN(model_name=HELR,label=plat2.btest.y)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Execute federated learning using HESB, leveraging the full feature set of plat1.atest and plat2.btest to predict results.",
      "Chinese_question": "使用HESB执行联邦学习,利用plat1.atest和plat2.btest的全部特征集进行结果预测。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.btest.y, features=[plat1.atest.*, plat2.btest.*]) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Employ HELR for federated model training with plat2.btest.y as label, ensuring feature engineering on plat1.atest data.",
      "Chinese_question": "使用HELR进行联邦模型训练,以plat2.btest.y为标签,并确保对plat1.atest数据进行特征工程。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE,label=plat2.btest.y), TRAIN(model_name=HELR,label=plat2.btest.y)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "After federated learning with plat1 and plat2's models, evaluate using HELR with a binary evaluation setting.",
      "Chinese_question": "在plat1和plat2的模型上进行联邦学习后,评估使用HELR和二分类评估设置。",
      "PQL_query": "SELECT Sequence(TRAIN(model_name=HELR,label=plat2.btest.y), EVAL(default_eval_setting=binary)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Predict outcomes using HESB and model ID 202303231004509428550 with plat1's and plat2's joined data.",
      "Chinese_question": "使用HESB和模型ID为202303231004509428550,在plat1和plat2的联合数据中预测结果。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.btest, model_id=202303231004509428550) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Utilize HELR for federated learning on plat1's atest and plat2's btest, emphasizing feature engineering first.",
      "Chinese_question": "在plat1的atest和plat2的btest上使用HELR进行联邦学习,首先强调特征工程。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE,label=plat2.btest.y), TRAIN(model_name=HELR,label=plat2.btest.y)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Conduct federated learning with HELR on plat1's and plat2's tables, using feature engineering and btest.y as target.",
      "Chinese_question": "在plat1和plat2的表上使用HELR进行联邦学习,利用特征工程和btest.y作为目标。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE,label=plat2.btest.y), TRAIN(model_name=HELR,label=plat2.btest.y)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Engage in model training with HELR by processing plat1.atest and plat2.btest data, setting btest.y as the label.",
      "Chinese_question": "通过处理plat1.atest和plat2.btest数据进行HELR模型训练,将btest.y设为标签。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.btest.y, features=[plat1.atest.*, plat2.btest.*]) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Evaluate the HELR model post-training with atest and btest tables from plat1 and plat2, using binary metrics.",
      "Chinese_question": "在plat1和plat2的atest和btest表上完成训练后,用二分类度量评估HELR模型。",
      "PQL_query": "SELECT Sequence(TRAIN(model_name=HELR,label=plat2.btest.y), EVAL(default_eval_setting=binary)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Make predictions with a HESB model using plat1 and plat2 data combined, based on a given model ID.",
      "Chinese_question": "结合使用plat1和plat2数据,基于给定的模型ID进行HESB模型预测。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.btest, model_id=202303231004509428550) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Employ cross-platform feature engineering and HELR training on plat1.atest and plat2.btest datasets.",
      "Chinese_question": "在plat1.atest和plat2.btest数据集上进行跨平台特征工程和HELR训练。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE,label=plat2.btest.y), TRAIN(model_name=HELR,label=plat2.btest.y)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Use federated learning with HESB to train a model on plat1.atest and plat2.btest, applying custom parameters.",
      "Chinese_question": "使用HESB进行联邦学习,在plat1.atest和plat2.btest上训练模型,应用自定义参数。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.btest.y, params=(num_trees=3,max_depth=3,learning_rate=0.2)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Evaluate federated learning outcomes on plat1's and plat2's data using binary assessment with HELR.",
      "Chinese_question": "使用HELR通过二进制评估对plat1和plat2的数据进行联邦学习结果评估。",
      "PQL_query": "SELECT Sequence(TRAIN(model_name=HELR,label=plat2.btest.y), EVAL(default_eval_setting=binary)) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Predict values using a federated model created by HESB based on data from plat1 and plat2, focusing on specific identifiers.",
      "Chinese_question": "根据来自plat1和plat2数据的HESB创建的联邦模型预测值,关注具体标识符。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.btest, model_id=202303231004509428550) FROM plat1.atest, plat2.btest WHERE plat1.atest.id = plat2.btest.id;"
    },
    {
      "question": "Train a HELR federated learning model using plat1's sales_data table and plat2's customer_info table, with plat2.customer_info.purchase as the label and columns from both tables as features.",
      "Chinese_question": "使用HELR联邦学习模型,基于plat1的sales_data表和plat2的customer_info表进行训练,标签为plat2.customer_info.purchase,两个表中的所有列为特征。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.customer_info.purchase, features=[plat1.sales_data.*, plat2.customer_info.*]) FROM plat1.sales_data, plat2.customer_info WHERE plat1.sales_data.customer_id = plat2.customer_info.customer_id;"
    },
    {
      "question": "Perform HESB federated learning training on plat1's transaction table and plat2's profile table, using plat2.profile.churn as the label with max_depth set to 5.",
      "Chinese_question": "在plat1的transaction表和plat2的profile表上执行HESB联邦学习,标签是plat2.profile.churn,并设置最大深度为5。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.profile.churn, params=(max_depth=5), features=[plat1.transaction.*, plat2.profile.*]) FROM plat1.transaction, plat2.profile WHERE plat1.transaction.user_id = plat2.profile.user_id;"
    },
    {
      "question": "Run a federated prediction using HESB on plat1's testing_data table and the model hosted by plat2, with model_id 2023091009380013.",
      "Chinese_question": "使用HESB联邦预测,在plat1的testing_data表和由plat2托管的模型(model_id为2023091009380013)上进行。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2, model_id=2023091009380013) FROM plat1.testing_data;"
    },
    {
      "question": "Evaluate an HELR model trained on plat1's marketing_data table and plat2's user_activity table with default binary evaluation settings.",
      "Chinese_question": "在plat1的marketing_data表和plat2的user_activity表上对训练好的HELR模型使用默认的二分类评估设置进行评估。",
      "PQL_query": "SELECT Sequence(TRAIN(model_name=HELR, label=plat2.user_activity.activity_score, features=[plat1.marketing_data.*, plat2.user_activity.*]), EVAL(default_eval_setting=binary)) FROM plat1.marketing_data, plat2.user_activity WHERE plat1.marketing_data.id = plat2.user_activity.id;"
    },
    {
      "question": "Compute HELR federated learning with feature scaling enabled on plat1's accounts table and plat2's records table, using plat2.records.profit as target.",
      "Chinese_question": "在plat1的accounts表和plat2的records表上使用HELR联邦学习,同时启用特征缩放,目标变量为plat2.records.profit。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE, label=plat2.records.profit, features=[plat1.accounts.*, plat2.records.*]), TRAIN(model_name=HELR, label=plat2.records.profit, features=[plat1.accounts.*, plat2.records.*])) FROM plat1.accounts, plat2.records WHERE plat1.accounts.record_id = plat2.records.record_id;"
    },
    {
      "question": "Use HESB federated learning to train a model with num_trees set to 6, based on plat1's comments table and plat2's review table, with label from plat2.review.sentiment.",
      "Chinese_question": "使用HESB联邦学习模型训练,基于plat1的comments表和plat2的review表,标签为plat2.review.sentiment,并设置树数量为6。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.review.sentiment, params=(num_trees=6), features=[plat1.comments.*, plat2.review.*]) FROM plat1.comments, plat2.review WHERE plat1.comments.comment_id = plat2.review.review_id;"
    },
    {
      "question": "Train an HESB federated model on plat1's inventory table and plat2's sales table, using plat2.sales.sales_volume as the label with a learning rate of 0.1.",
      "Chinese_question": "在plat1的inventory表和plat2的sales表上使用HESB联邦模型进行训练,标签为plat2.sales.sales_volume,学习率为0.1。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.sales.sales_volume, params=(learning_rate=0.1), features=[plat1.inventory.*, plat2.sales.*]) FROM plat1.inventory, plat2.sales WHERE plat1.inventory.product_id = plat2.sales.product_id;"
    },
    {
      "question": "Run federated inference on plat1's survey_data using an HESB model from plat2 with model_id 20221012FED.",
      "Chinese_question": "在plat1的survey_data表上运行联邦推断,使用plat2的HESB模型,模型ID为20221012FED。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2, model_id=20221012FED) FROM plat1.survey_data;"
    },
    {
      "question": "Apply feature scaling followed by HELR training on plat1's scores table and plat2's feedback table, with plat2.feedback.rating as the target variable.",
      "Chinese_question": "先执行特征缩放,然后在plat1的scores表和plat2的feedback表上进行HELR训练,目标变量是plat2.feedback.rating。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE, label=plat2.feedback.rating, features=[plat1.scores.*, plat2.feedback.*]), TRAIN(model_name=HELR, label=plat2.feedback.rating, features=[plat1.scores.*, plat2.feedback.*])) FROM plat1.scores, plat2.feedback WHERE plat1.scores.id = plat2.feedback.id;"
    },
    {
      "question": "Train a HELR model using plat1's user_logs table and plat2's purchases table, with purchases.amount as the label.",
      "Chinese_question": "基于plat1的user_logs表和plat2的purchases表训练一个HELR模型,标签为plat2.purchases.amount。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.purchases.amount, features=[plat1.user_logs.*, plat2.purchases.*]) FROM plat1.user_logs, plat2.purchases WHERE plat1.user_logs.session_id = plat2.purchases.session_id;"
    },
    {
      "question": "Use federated learning to predict outcomes in plat1's project table using an HESB model hosted by plat2 with a model_id of 2023ML0928.",
      "Chinese_question": "使用联邦学习,在plat1的project表上通过plat2托管的HESB模型预测结果,模型ID为2023ML0928。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2, model_id=2023ML0928) FROM plat1.project;"
    },
    {
      "question": "Evaluate a federated model's performance on plat1's employee_data and plat2's payroll table after HELR training with accuracy metrics.",
      "Chinese_question": "基于plat1的employee_data表和plat2的payroll表对HELR模型进行训练后,通过准确率评估模型性能。",
      "PQL_query": "SELECT Sequence(TRAIN(model_name=HELR, label=plat2.payroll.salary, features=[plat1.employee_data.*, plat2.payroll.*]), EVAL(default_eval_setting=accuracy)) FROM plat1.employee_data, plat2.payroll WHERE plat1.employee_data.emp_id = plat2.payroll.emp_id;"
    },
    {
      "question": "Conduct federated feature engineering and HELR training on plat1.orders and plat2.shipments data with shipments.status as the target.",
      "Chinese_question": "对plat1.orders和plat2.shipments数据执行联邦特征工程并进行HELR训练,其中目标是plat2.shipments.status。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE, label=plat2.shipments.status, features=[plat1.orders.*, plat2.shipments.*]), TRAIN(model_name=HELR, label=plat2.shipments.status, features=[plat1.orders.*, plat2.shipments.*])) FROM plat1.orders, plat2.shipments WHERE plat1.orders.order_id = plat2.shipments.shipment_id;"
    },
    {
      "question": "Use HESB federated learning on plat1.revenue_data and plat2.expenses_data, training with plat2.expenses_data.loss as label, using 3 trees in the model.",
      "Chinese_question": "基于plat1.revenue_data和plat2.expenses_data使用HESB联邦学习进行训练,标签为plat2.expenses_data.loss,模型设置为3棵树。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.expenses_data.loss, params=(num_trees=3), features=[plat1.revenue_data.*, plat2.expenses_data.*]) FROM plat1.revenue_data, plat2.expenses_data WHERE plat1.revenue_data.id = plat2.expenses_data.id;"
    },
    {
      "question": "Run federated training with HELR on plat1.inventory and plat2.orders tables using orders.total as label and all columns as features.",
      "Chinese_question": "在plat1.inventory和plat2.orders表上使用HELR进行联邦训练,标签为plat2.orders.total,所有列为特征。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.orders.total, features=[plat1.inventory.*, plat2.orders.*]) FROM plat1.inventory, plat2.orders WHERE plat1.inventory.product_id = plat2.orders.product_id;"
    },
    {
      "question": "Train a federated HELR model with feature engineering enabled on plat1.ad_data and plat2.user_behavior, targeting user_behavior.click_rate.",
      "Chinese_question": "在进行特征工程后,基于plat1.ad_data和plat2.user_behavior训练联邦HELR模型,并将user_behavior.click_rate作为目标。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE, label=plat2.user_behavior.click_rate, features=[plat1.ad_data.*, plat2.user_behavior.*]), TRAIN(model_name=HELR, label=plat2.user_behavior.click_rate, features=[plat1.ad_data.*, plat2.user_behavior.*])) FROM plat1.ad_data, plat2.user_behavior WHERE plat1.ad_data.ad_id = plat2.user_behavior.ad_id;"
    },
    {
      "question": "Perform federated prediction with an HELR model on plat1.activity_log using a model from plat2 (model_id: 20250315).",
      "Chinese_question": "使用HELR模型在plat1.activity_log上进行联邦预测,模型来自于plat2 (model_id: 20250315)。",
      "PQL_query": "SELECT PREDICT(model_name=HELR, model_guest=plat2, model_id=20250315) FROM plat1.activity_log;"
    },
    {
      "question": "Run federated HELR training on plat1.demographics and plat2.product_usage data, predicting plat2.product_usage.freq.",
      "Chinese_question": "基于plat1.demographics和plat2.product_usage数据进行HELR联邦训练,预测plat2.product_usage.freq。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.product_usage.freq, features=[plat1.demographics.*, plat2.product_usage.*]) FROM plat1.demographics, plat2.product_usage WHERE plat1.demographics.user_id = plat2.product_usage.user_id;"
    },
    {
      "question": "Perform federated evaluation after HESB training on plat1.membership and plat2.purchases data with plat2.purchases.value as the label.",
      "Chinese_question": "在plat1.membership和plat2.purchases上基于HESB训练后对模型进行评估,标签为plat2.purchases.value。",
      "PQL_query": "SELECT Sequence(TRAIN(model_name=HESB, label=plat2.purchases.value, features=[plat1.membership.*, plat2.purchases.*]), EVAL(default_eval_setting=binary)) FROM plat1.membership, plat2.purchases WHERE plat1.membership.member_id = plat2.purchases.member_id;"
    },
    {
      "question": "Evaluate the performance of a HELR model using employee_data from plat1 and performance_metrics from plat2, targeting plat2.performance_metrics.success_rate as the label.",
      "Chinese_question": "评估使用员工数据(plat1.employee_data)和绩效指标(plat2.performance_metrics)训练的HELR模型,目标标签是plat2.performance_metrics.success_rate。",
      "PQL_query": "SELECT SEQUENCE(TRAIN(model_name=HELR, label=plat2.performance_metrics.success_rate, features=[plat1.employee_data.*, plat2.performance_metrics.*]), EVAL(default_eval_setting=binary)) FROM plat1.employee_data, plat2.performance_metrics WHERE plat1.employee_data.employee_id = plat2.performance_metrics.employee_id;"
    },
    {
      "question": "Train a HESB federated learning model using financials_data from plat1 and target_info from plat2, with plat2.target_info.target_value as the label.",
      "Chinese_question": "使用plat1的financials_data和plat2的target_info数据训练HESB联邦学习模型,标签为plat2.target_info.target_value。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.target_info.target_value, features=[plat1.financials_data.*, plat2.target_info.*]) FROM plat1.financials_data, plat2.target_info WHERE plat1.financials_data.client_id = plat2.target_info.client_id;"
    },
    {
      "question": "Conduct feature engineering and train a HELR model on transaction_data from plat1 and user_profile from plat2, with plat2.user_profile.rating as the label.",
      "Chinese_question": "对plat1的transaction_data和plat2的user_profile进行特征工程,并训练HELR模型,标签是plat2.user_profile.rating。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.user_profile.rating), TRAIN(model_name=HELR, label=plat2.user_profile.rating)) FROM plat1.transaction_data, plat2.user_profile WHERE plat1.transaction_data.user_id = plat2.user_profile.user_id;"
    },
    {
      "question": "Predict outcomes using a HESB model from study_results on plat1 and exam_scores on plat2, focusing on plat2.exam_scores.final_score as the label.",
      "Chinese_question": "使用plat1的study_results和plat2的exam_scores进行预测,聚焦于plat2.exam_scores.final_score作为标签。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.exam_scores, model_id=202303231004509428550, label=plat2.exam_scores.final_score) FROM plat1.study_results, plat2.exam_scores WHERE plat1.study_results.student_id = plat2.exam_scores.student_id;"
    },
    {
      "question": "Use plat1's health_records and plat2's patient_tests to train a HELR model, taking plat2.patient_tests.test_result as the label.",
      "Chinese_question": "使用plat1的health_records和plat2的patient_tests训练HELR模型,标签为plat2.patient_tests.test_result。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.patient_tests.test_result, features=[plat1.health_records.*, plat2.patient_tests.*]) FROM plat1.health_records, plat2.patient_tests WHERE plat1.health_records.patient_id = plat2.patient_tests.patient_id;"
    },
    {
      "question": "Evaluate a federated learning model trained on sensor_data from plat1 and device_stats from plat2, using plat2.device_stats.operation_duration as the label.",
      "Chinese_question": "评估在plat1的sensor_data和plat2的device_stats上训练的联邦学习模型,使用plat2.device_stats.operation_duration作为标签。",
      "PQL_query": "SELECT SEQUENCE(TRAIN(model_name=HELR, label=plat2.device_stats.operation_duration, features=[plat1.sensor_data.*, plat2.device_stats.*]), EVAL(default_eval_setting=binary)) FROM plat1.sensor_data, plat2.device_stats WHERE plat1.sensor_data.device_id = plat2.device_stats.device_id;"
    },
    {
      "question": "Exploit feature engineering and train a hybrid federated model on plat1's activity_log and plat2's fitness_stats, with plat2.fitness_stats.calories_burned as the label.",
      "Chinese_question": "利用特征工程,并在plat1的activity_log和plat2的fitness_stats上训练混合联邦模型,标签为plat2.fitness_stats.calories_burned。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.fitness_stats.calories_burned), TRAIN(model_name=HESB, label=plat2.fitness_stats.calories_burned)) FROM plat1.activity_log, plat2.fitness_stats WHERE plat1.activity_log.user_id = plat2.fitness_stats.user_id;"
    },
    {
      "question": "Train a HELR model using plat1's market_data and plat2's product_feedback, setting plat2.product_feedback.satisfaction_score as the label.",
      "Chinese_question": "使用plat1的market_data和plat2的product_feedback训练HELR模型,设置plat2.product_feedback.satisfaction_score为标签。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.product_feedback.satisfaction_score, features=[plat1.market_data.*, plat2.product_feedback.*]) FROM plat1.market_data, plat2.product_feedback WHERE plat1.market_data.product_id = plat2.product_feedback.product_id;"
    },
    {
      "question": "Predict future events using a pre-trained HESB model with plat1's weather_reports and plat2's agriculture_data, focusing on plat2.agriculture_data.crop_yield as the label.",
      "Chinese_question": "使用训练好的HESB模型预测未来事件,数据来自plat1的weather_reports和plat2的agriculture_data,标签为plat2.agriculture_data.crop_yield。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.agriculture_data, model_id=202303231004509428550, label=plat2.agriculture_data.crop_yield) FROM plat1.weather_reports, plat2.agriculture_data WHERE plat1.weather_reports.region_id = plat2.agriculture_data.region_id;"
    },
    {
      "question": "Utilize federated learning with HELR to train a model on plat1's checkups and plat2's diagnosis_data, choosing plat2.diagnosis_data.condition_severity as the label.",
      "Chinese_question": "使用HEL联邦学习训练模型,数据源于plat1的checkups和plat2的diagnosis_data,标签为plat2.diagnosis_data.condition_severity。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.diagnosis_data.condition_severity, features=[plat1.checkups.*, plat2.diagnosis_data.*]) FROM plat1.checkups, plat2.diagnosis_data WHERE plat1.checkups.patient_id = plat2.diagnosis_data.patient_id;"
    },
    {
      "question": "Engage in feature engineering and federated training on plat1's manufacturing_stats and plat2's quality_control using HELR, with plat2.quality_control.defect_rate as the label.",
      "Chinese_question": "利用特征工程和联邦训练对plat1的manufacturing_stats和plat2的quality_control进行HELR处理,标签为plat2.quality_control.defect_rate。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.quality_control.defect_rate), TRAIN(model_name=HELR, label=plat2.quality_control.defect_rate)) FROM plat1.manufacturing_stats, plat2.quality_control WHERE plat1.manufacturing_stats.batch_id = plat2.quality_control.batch_id;"
    },
    {
      "question": "Perform predictive analysis using a federated model on plat1's energy_consumption and plat2's sustainability_metrics, focusing on plat2.sustainability_metrics.green_score as the label.",
      "Chinese_question": "使用联邦模型进行预测分析,数据来自plat1的energy_consumption和plat2的sustainability_metrics,标签为plat2.sustainability_metrics.green_score。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.sustainability_metrics, model_id=202303231004509428550, label=plat2.sustainability_metrics.green_score) FROM plat1.energy_consumption, plat2.sustainability_metrics WHERE plat1.energy_consumption.site_id = plat2.sustainability_metrics.site_id;"
    },
    {
      "question": "Use a federated learning strategy to train a HELR model with plat1's ecommerce_activity and plat2's return_data, setting plat2.return_data.refund_rate as the label.",
      "Chinese_question": "通过联邦学习策略训练HELR模型,数据包括plat1的ecommerce_activity和plat2的return_data,标签是plat2.return_data.refund_rate。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.return_data.refund_rate, features=[plat1.ecommerce_activity.*, plat2.return_data.*]) FROM plat1.ecommerce_activity, plat2.return_data WHERE plat1.ecommerce_activity.order_id = plat2.return_data.order_id;"
    },
    {
      "question": "Implement feature engineering and train a HELR model using plat1's financial_statements and plat2's audit_results, with plat2.audit_results.risk_rating as the label.",
      "Chinese_question": "实现特征工程并在plat1的financial_statements和plat2的audit_results上训练HELR模型,标签为plat2.audit_results.risk_rating。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.audit_results.risk_rating), TRAIN(model_name=HELR, label=plat2.audit_results.risk_rating)) FROM plat1.financial_statements, plat2.audit_results WHERE plat1.financial_statements.company_id = plat2.audit_results.company_id;"
    },
    {
      "question": "Predict future sales using a trained federated model on plat1's customer_behavior and plat2's sales_forecasts, with plat2.sales_forecasts.prediction_value as the label.",
      "Chinese_question": "使用训练好的联邦模型预测未来销售,数据来自plat1的customer_behavior和plat2的sales_forecasts,标签为plat2.sales_forecasts.prediction_value。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.sales_forecasts, model_id=202303231004509428550, label=plat2.sales_forecasts.prediction_value) FROM plat1.customer_behavior, plat2.sales_forecasts WHERE plat1.customer_behavior.client_id = plat2.sales_forecasts.client_id;"
    },
    {
      "question": "Integrate feature engineering with federated learning to train a model on plat1's inventory_logs and plat2's supply_chain_metrics using HELR, with plat2.supply_chain_metrics.delay_index as the label.",
      "Chinese_question": "结合特征工程与联邦学习,使用HELR训练模型,数据来自plat1的inventory_logs和plat2的supply_chain_metrics,标签为plat2.supply_chain_metrics.delay_index。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.supply_chain_metrics.delay_index), TRAIN(model_name=HELR, label=plat2.supply_chain_metrics.delay_index)) FROM plat1.inventory_logs, plat2.supply_chain_metrics WHERE plat1.inventory_logs.item_id = plat2.supply_chain_metrics.item_id;"
    },
    {
      "question": "In a TEE environment, train a HELR federated learning model using plat1's user_interactions and plat2's response_data, with plat2.response_data.engagement_level as the label.",
      "Chinese_question": "在TEE环境中,通过plat1的user_interactions和plat2的response_data训练HELR联邦学习模型,标签为plat2.response_data.engagement_level。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.response_data.engagement_level, features=[plat1.user_interactions.*, plat2.response_data.*]) FROM plat1.user_interactions, plat2.response_data WHERE plat1.user_interactions.interaction_id = plat2.response_data.interaction_id;"
    },
    {
      "question": "Evaluate the efficiency of a federated learning model trained on plat1's shipping_data and plat2's delivery_tracking, using plat2.delivery_tracking.success_ratio as the label.",
      "Chinese_question": "评估在plat1的shipping_data和plat2的delivery_tracking上训练的联邦学习模型效率,使用plat2.delivery_tracking.success_ratio作为标签。",
      "PQL_query": "SELECT SEQUENCE(TRAIN(model_name=HELR, label=plat2.delivery_tracking.success_ratio, features=[plat1.shipping_data.*, plat2.delivery_tracking.*]), EVAL(default_eval_setting=binary)) FROM plat1.shipping_data, plat2.delivery_tracking WHERE plat1.shipping_data.shipment_id = plat2.delivery_tracking.shipment_id;"
    },
    {
      "question": "Conduct federated predictive analysis using plat1's trade_activity and plat2's risk_management_data, focusing on plat2.risk_management_data.exposure_level as the label.",
      "Chinese_question": "进行联邦预测分析,使用plat1的trade_activity和plat2的risk_management_data,重点关注plat2.risk_management_data.exposure_level作为标签。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.risk_management_data, model_id=202303231004509428550, label=plat2.risk_management_data.exposure_level) FROM plat1.trade_activity, plat2.risk_management_data WHERE plat1.trade_activity.transaction_id = plat2.risk_management_data.transaction_id;"
    },
    {
      "question": "Utilize federated learning in a secure TEE to train a HELR model on plat1's healthcare_activity and plat2's treatment_outcomes, with plat2.treatment_outcomes.success_ratio as the label.",
      "Chinese_question": "在安全TEE中利用联邦学习训练HELR模型,数据来自plat1的healthcare_activity和plat2的treatment_outcomes,标签为plat2.treatment_outcomes.success_ratio。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.treatment_outcomes.success_ratio, features=[plat1.healthcare_activity.*, plat2.treatment_outcomes.*]) FROM plat1.healthcare_activity, plat2.treatment_outcomes WHERE plat1.healthcare_activity.patient_id = plat2.treatment_outcomes.patient_id;"
    },
    {
      "question": "Train a HESB model using user_profile from plat1 and purchase_history from plat2, where the label is plat2.purchase_history.purchase_amount and features include all columns from both tables.",
      "Chinese_question": "使用plat1的用户资料(user_profile)和plat2的购买记录(purchase_history)训练HESB模型,目标标签是plat2.purchase_history.purchase_amount,特征包括两张表的所有列。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.purchase_history.purchase_amount, features=[plat1.user_profile.*, plat2.purchase_history.*]) FROM plat1.user_profile, plat2.purchase_history WHERE plat1.user_profile.user_id = plat2.purchase_history.user_id;"
    },
    {
      "question": "Evaluate a HELR model trained with transaction_data from plat1 and product_data from plat2, using plat2.transaction_data.purchased as the target label.",
      "Chinese_question": "评估由plat1的交易数据(transaction_data)和plat2的产品数据(product_data)训练的HELR模型,目标标签是plat2.transaction_data.purchased。",
      "PQL_query": "SELECT SEQUENCE(TRAIN(model_name=HELR, label=plat2.transaction_data.purchased, features=[plat1.transaction_data.*, plat2.product_data.*]), EVAL(default_eval_setting=binary)) FROM plat1.transaction_data, plat2.product_data WHERE plat1.transaction_data.transaction_id = plat2.product_data.transaction_id;"
    },
    {
      "question": "Construct a feature engineering pipeline using sales_data from plat1 and customer_feedback from plat2, and then train an HELR model with plat2.customer_feedback.score as the label.",
      "Chinese_question": "构建一个基于plat1销售数据(sales_data)和plat2客户反馈(customer_feedback)的特征工程流水线,然后用plat2.customer_feedback.score作为标签训练HELR模型。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.customer_feedback.score, features=[plat1.sales_data.*, plat2.customer_feedback.*]), TRAIN(model_name=HELR, label=plat2.customer_feedback.score)) FROM plat1.sales_data, plat2.customer_feedback WHERE plat1.sales_data.customer_id = plat2.customer_feedback.customer_id;"
    },
    {
      "question": "Use t1_data from plat1 and t2_data from plat2 to predict results, using a pre-trained HESB model identified by model_id 202303310101010101.",
      "Chinese_question": "使用plat1的t1数据(t1_data)和plat2的t2数据(t2_data),通过HESB预训练模型(model_id: 202303310101010101)进行预测。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.t2_data, model_id=202303310101010101) FROM plat1.t1_data, plat2.t2_data WHERE plat1.t1_data.key_id = plat2.t2_data.key_id;"
    },
    {
      "question": "Perform feature engineering on banking_transactions from plat1 and credit_score from plat2, followed by HELR training and binary evaluation using plat2.credit_score.rating as the label.",
      "Chinese_question": "对plat1的银行交易数据(banking_transactions)和plat2的信用评分数据(credit_score)进行特征工程,然后以plat2.credit_score.rating作为标签进行HELR训练以及二分类评估。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.credit_score.rating, features=[plat1.banking_transactions.*, plat2.credit_score.*]), TRAIN(model_name=HELR, label=plat2.credit_score.rating), EVAL(default_eval_setting=binary)) FROM plat1.banking_transactions, plat2.credit_score WHERE plat1.banking_transactions.account_id = plat2.credit_score.account_id;"
    },
    {
      "question": "Train a federated HESB model with sales_records from plat1 and marketing_campaigns from plat2, using plat2.marketing_campaigns.conversion_rate as the label.",
      "Chinese_question": "使用plat1的销售记录(sales_records)和plat2的营销活动(marketing_campaigns),以plat2.marketing_campaigns.conversion_rate作为标签训练HESB联邦模型。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.marketing_campaigns.conversion_rate, features=[plat1.sales_records.*, plat2.marketing_campaigns.*]) FROM plat1.sales_records, plat2.marketing_campaigns WHERE plat1.sales_records.campaign_id = plat2.marketing_campaigns.campaign_id;"
    },
    {
      "question": "Use educational_data from plat1 and exam_scores from plat2 for a federated logistic regression (HELR) model prediction task.",
      "Chinese_question": "利用plat1的教育数据(educational_data)和plat2的考试分数(exam_scores)进行HELR模型预测任务。",
      "PQL_query": "SELECT PREDICT(model_name=HELR, model_guest=plat2.exam_scores, model_id=202303310505050505) FROM plat1.educational_data, plat2.exam_scores WHERE plat1.educational_data.student_id = plat2.exam_scores.student_id;"
    },
    {
      "question": "Optimize features on product_reviews from plat1 and sales_leads from plat2, followed by HESB training targeting plat2.sales_leads.outcome.",
      "Chinese_question": "优化plat1的产品评论(product_reviews)与plat2的销售线索(sales_leads)的特征,然后以plat2.sales_leads.outcome为目标训练HESB。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.sales_leads.outcome, features=[plat1.product_reviews.*, plat2.sales_leads.*]), TRAIN(model_name=HESB, label=plat2.sales_leads.outcome)) FROM plat1.product_reviews, plat2.sales_leads WHERE plat1.product_reviews.lead_id = plat2.sales_leads.lead_id;"
    },
    {
      "question": "Train and evaluate a logistic regression (HELR) model using medical_records from plat1 and insurance_claims from plat2, with plat2.insurance_claims.approved as the label.",
      "Chinese_question": "使用plat1的医疗记录(medical_records)和plat2的保险理赔数据(insurance_claims),以plat2.insurance_claims.approved为标签训练并评估一个HELR模型。",
      "PQL_query": "SELECT SEQUENCE(TRAIN(model_name=HELR, label=plat2.insurance_claims.approved, features=[plat1.medical_records.*, plat2.insurance_claims.*]), EVAL(default_eval_setting=binary)) FROM plat1.medical_records, plat2.insurance_claims WHERE plat1.medical_records.record_id = plat2.insurance_claims.record_id;"
    },
    {
      "question": "Combine plat1.customer_demographics with plat2.purchase_history via feature engineering, followed by HELR training using plat2.purchase_history.purchased as the label.",
      "Chinese_question": "将plat1的客户信息(customer_demographics)和plat2的购买记录(purchase_history)结合进行特征工程,然后以plat2.purchase_history.purchased为标签训练HELR模型。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.purchase_history.purchased, features=[plat1.customer_demographics.*, plat2.purchase_history.*]), TRAIN(model_name=HELR, label=plat2.purchase_history.purchased)) FROM plat1.customer_demographics, plat2.purchase_history WHERE plat1.customer_demographics.user_id = plat2.purchase_history.user_id;"
    },
    {
      "question": "Perform binary evaluation on an HESB model trained using plat1.ad_clicks and plat2.user_sessions with plat2.user_sessions.session_duration as the label.",
      "Chinese_question": "对用plat1的广告点击数据(ad_clicks)和plat2的用户会话数据(user_sessions)训练的HESB模型以plat2.user_sessions.session_duration为标签进行二分类评估。",
      "PQL_query": "SELECT SEQUENCE(TRAIN(model_name=HESB, label=plat2.user_sessions.session_duration, features=[plat1.ad_clicks.*, plat2.user_sessions.*]), EVAL(default_eval_setting=binary)) FROM plat1.ad_clicks, plat2.user_sessions WHERE plat1.ad_clicks.session_id = plat2.user_sessions.session_id;"
    },
    {
      "question": "Use plat1.customers and plat2.orders to train a logistic regression (HELR) model, with plat2.orders.is_repeated_purchase as the target.",
      "Chinese_question": "使用plat1的客户数据(customers)和plat2的订单数据(orders),以plat2.orders.is_repeated_purchase为目标训练HELR模型。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.orders.is_repeated_purchase, features=[plat1.customers.*, plat2.orders.*]) FROM plat1.customers, plat2.orders WHERE plat1.customers.customer_id = plat2.orders.customer_id;"
    },
    {
      "question": "Optimize a HESB pipeline by including feature engineering on plat1.job_history and plat2.performance_scores, targeting plat2.performance_scores.rating.",
      "Chinese_question": "对plat1的工作经历(job_history)和plat2的绩效评分数据(performance_scores)实施特征工程优化HESB管道,目标是plat2.performance_scores.rating。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.performance_scores.rating, features=[plat1.job_history.*, plat2.performance_scores.*]), TRAIN(model_name=HESB, label=plat2.performance_scores.rating)) FROM plat1.job_history, plat2.performance_scores WHERE plat1.job_history.employee_id = plat2.performance_scores.employee_id;"
    },
    {
      "question": "Build a predictive pipeline using plat1.ads and plat2.user_actions, starting with feature engineering and concluding with an HELR prediction.",
      "Chinese_question": "构建一个以plat1广告数据(ads)和plat2用户行为数据(user_actions)为基础的预测管道,先进行特征工程后执行HELR预测。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, features=[plat1.ads.*, plat2.user_actions.*]), PREDICT(model_name=HELR, model_guest=plat2.user_actions, model_id=202304021212121212)) FROM plat1.ads, plat2.user_actions WHERE plat1.ads.action_id = plat2.user_actions.action_id;"
    },
    {
      "question": "Train and evaluate a federated logistic regression (HELR) model using plat1.test_scores and plat2.grades with plat2.grades.performance as the label.",
      "Chinese_question": "使用plat1的考试分数(test_scores)和plat2的等级信息(grades),以plat2.grades.performance作为标签训练和评估联邦HELR模型。",
      "PQL_query": "SELECT SEQUENCE(TRAIN(model_name=HELR, label=plat2.grades.performance, features=[plat1.test_scores.*, plat2.grades.*]), EVAL(default_eval_setting=binary)) FROM plat1.test_scores, plat2.grades WHERE plat1.test_scores.grade_id = plat2.grades.grade_id;"
    },
    {
      "question": "Combine plat1.device_usage and plat2.service_logs to train a HESB model for predicting plat2.service_logs.usage_category.",
      "Chinese_question": "将plat1的设备使用数据(device_usage)和plat2的服务日志(service_logs)结合起来训练HESB模型以预测plat2.service_logs.usage_category。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat2.service_logs.usage_category, features=[plat1.device_usage.*, plat2.service_logs.*]) FROM plat1.device_usage, plat2.service_logs WHERE plat1.device_usage.device_id = plat2.service_logs.device_id;"
    },
    {
      "question": "Run feature engineering on plat1.online_activity and plat2.transaction_data before HESB training using plat2.transaction_data.is_fraudulent as the target.",
      "Chinese_question": "对plat1的在线活动数据(online_activity)和plat2的交易数据(transaction_data)进行特征工程,然后以plat2.transaction_data.is_fraudulent作为目标开展HESB训练。",
      "PQL_query": "SELECT SEQUENCE(FE(model_name=HESCALE, label=plat2.transaction_data.is_fraudulent, features=[plat1.online_activity.*, plat2.transaction_data.*]), TRAIN(model_name=HESB, label=plat2.transaction_data.is_fraudulent)) FROM plat1.online_activity, plat2.transaction_data WHERE plat1.online_activity.user_id = plat2.transaction_data.user_id;"
    },
    {
      "question": "Predict outcomes using plat1.logs and plat2.error_reports with a pre-trained HESB model identified by model_id 202305051515151515.",
      "Chinese_question": "使用plat1的日志数据(logs)和plat2的错误报告(error_reports),通过已训练的HESB模型(model_id: 202305051515151515)预测结果。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat2.error_reports, model_id=202305051515151515) FROM plat1.logs, plat2.error_reports WHERE plat1.logs.log_id = plat2.error_reports.log_id;"
    },
    {
      "question": "Construct an HELR federated system for plat1.employee_records and plat2.team_performance using plat2.team_performance.team_evaluation as the training label.",
      "Chinese_question": "构建一个基于plat1的员工记录(employee_records)和plat2的团队绩效(team_performance)的HELR联邦系统,训练标签为plat2.team_performance.team_evaluation。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat2.team_performance.team_evaluation, features=[plat1.employee_records.*, plat2.team_performance.*]) FROM plat1.employee_records, plat2.team_performance WHERE plat1.employee_records.team_id = plat2.team_performance.team_id;"
    },
    {
      "question": "Train a HELR model on plat3's client_data using the client_id field as the identifier and the transaction_amount as the label, with features from plat4's transaction_data.",
      "Chinese_question": "在plat3的client_data上训练HELR模型,识别符是client_id字段,标签是transaction_amount,特征来自plat4的transaction_data。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat3.client_data.transaction_amount, features=[plat3.client_data.*, plat4.transaction_data.*]) FROM plat3.client_data, plat4.transaction_data WHERE plat3.client_data.client_id = plat4.transaction_data.client_id;"
    },
    {
      "question": "Evaluate a HELR model using sales_data from plat5 and product_data from plat6, linked by product_id, aiming to predict the sales_quantity.",
      "Chinese_question": "使用plat5的sales_data和plat6的product_data评估HELR模型,通过product_id关联,预测sales_quantity。",
      "PQL_query": "SELECT EVAL(eval_setting=default, model_name=HELR, label=plat6.sales_data.sales_quantity) FROM plat5.sales_data, plat6.product_data WHERE plat5.sales_data.product_id = plat6.product_data.product_id;"
    },
    {
      "question": "Execute federated prediction with a HESB model using plat7's user_activity data and plat8's engagement_metrics, identifying by user_id and using model_id=789654321.",
      "Chinese_question": "使用plat7的user_activity数据和plat8的engagement_metrics进行HESB模型联邦预测,通过user_id识别,模型ID为789654321。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_id=789654321, model_guest=plat8.engagement_metrics) FROM plat7.user_activity, plat8.engagement_metrics WHERE plat7.user_activity.user_id = plat8.engagement_metrics.user_id;"
    },
    {
      "question": "Perform feature engineering on order_history from plat9 followed by training a HELR model using linked columns from account_details at plat10.",
      "Chinese_question": "对plat9的order_history进行特征工程,然后使用plat10的account_details的链接列训练HELR模型。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE, label=plat10.order_history.amount), TRAIN(model_name=HELR, label=plat10.order_history.amount)) FROM plat9.order_history, plat10.account_details WHERE plat10.account_details.acc_id = plat9.order_history.acc_id;"
    },
    {
      "question": "Use plat11's employees_info as the main data table and plat12's performance_records as features to evaluate a HELR model, focusing on efficiency_score.",
      "Chinese_question": "将plat11的employees_info作为主数据表,使用plat12的performance_records特征来评估HELR模型,重点关注效率得分。",
      "PQL_query": "SELECT EVAL(model_name=HELR, label=plat12.performance_records.efficiency_score) FROM plat11.employees_info, plat12.performance_records WHERE plat11.employees_info.emp_id = plat12.performance_records.emp_id;"
    },
    {
      "question": "Predict customer retention using a pre-trained HESB model on contacts database from plat13 and plat14's interaction_logs, with feature id=10304567890.",
      "Chinese_question": "使用plat13的contacts数据库和plat14的interaction_logs进行预测客户保留,使用预训练的HESB模型,特征ID为10304567890。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat14.interaction_logs, feature_id=10304567890) FROM plat13.contacts, plat14.interaction_logs WHERE plat13.contacts.contact_id = plat14.interaction_logs.contact_id;"
    },
    {
      "question": "Conduct federated learning to train a HESB model for plat15's sales_goal and plat16's market_analysis, using product_code as the connect field.",
      "Chinese_question": "通过product_code字段进行联邦学习为plat15的sales_goal和plat16的market_analysis训练HESB模型。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat15.sales_goal.goal_value, features=[plat15.sales_goal.*, plat16.market_analysis.*]) FROM plat15.sales_goal, plat16.market_analysis WHERE plat15.sales_goal.product_code = plat16.market_analysis.product_code;"
    },
    {
      "question": "Utilize plat17's subscriber_info and plat18's usage_patterns for HELR model prediction of churn risk, implementing hardware encryption with TEE.",
      "Chinese_question": "使用plat17的subscriber_info和plat18的usage_patterns进行HELR模型预测客户流失风险,通过TEE硬件加密实现。",
      "PQL_query": "SELECT PREDICT(model_name=HELR, encryption=TEE, label=plat17.subscriber_info.churn_risk) FROM plat17.subscriber_info, plat18.usage_patterns WHERE plat17.subscriber_info.subscriber_id = plat18.usage_patterns.subscriber_id;"
    },
    {
      "question": "Integrate plat19's device_readings and plat20's maintenance_data to train a HELR model, targeting downtime reduction using machine_id for matching.",
      "Chinese_question": "整合plat19的device_readings和plat20的maintenance_data培训HELR模型,目标减少停机时间,用machine_id进行匹配。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat20.maintenance_data.downtime_hours, features=[plat19.device_readings.*, plat20.maintenance_data.*]) FROM plat19.device_readings, plat20.maintenance_data WHERE plat19.device_readings.machine_id = plat20.maintenance_data.machine_id;"
    },
    {
      "question": "Apply feature engineering on plat21's inventory_levels along with training a HELR model using plat22's logistics_routes for operational efficiency.",
      "Chinese_question": "对plat21的inventory_levels应用特征工程,并使用plat22的logistics_routes训练HELR模型以提高操作效率。",
      "PQL_query": "SELECT Sequence(FE(model_name=HESCALE, label=plat21.inventory_levels.stock_value), TRAIN(model_name=HELR,label=plat21.inventory_levels.stock_value)) FROM plat21.inventory_levels, plat22.logistics_routes WHERE plat21.inventory_levels.item_id = plat22.logistics_routes.item_id;"
    },
    {
      "question": "Train a HELR model using transactions from plat23 and plat24, utilizing customer_id as the key field to predict average order value.",
      "Chinese_question": "使用plat23和plat24的transactions训练HELR模型,利用customer_id作为关键字段来预测平均订单价值。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat23.transactions.avg_order_value, features=[plat23.transactions.*, plat24.transactions.*]) FROM plat23.transactions, plat24.transactions WHERE plat23.transactions.customer_id = plat24.transactions.customer_id;"
    },
    {
      "question": "Employ federated evaluation for the plat25's site_visits and plat26's ad_clicks datasets, concentrating on roi_rate with session_id.",
      "Chinese_question": "利用session_id,通过联邦评估进行plat25的site_visits和plat26的ad_clicks数据集,专注于roi_rate。",
      "PQL_query": "SELECT EVAL(model_name=HELR, label=plat26.ad_clicks.roi_rate) FROM plat25.site_visits, plat26.ad_clicks WHERE plat25.site_visits.session_id = plat26.ad_clicks.session_id;"
    },
    {
      "question": "Federate prediction for product demand using plat27's order_data and plat28's customer_feedback, based on feedback_id and model_id=202412345678.",
      "Chinese_question": "根据feedback_id和模型ID为202412345678,进行plat27的order_data和plat28的customer_feedback的产品需求联邦预测。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat28.customer_feedback, model_id=202412345678) FROM plat27.order_data, plat28.customer_feedback WHERE plat27.order_data.feedback_id = plat28.customer_feedback.feedback_id;"
    },
    {
      "question": "Use plat29's health_records to train a HESB model, incorporating plat30's lifestyle data with patient_id for cross-reference.",
      "Chinese_question": "使用plat29的health_records训练HESB模型,结合plat30的lifestyle数据,通过patient_id进行交叉引用。",
      "PQL_query": "SELECT TRAIN(model_name=HESB, label=plat29.health_records.diagnosis, features=[plat29.health_records.*, plat30.lifestyle.*]) FROM plat29.health_records, plat30.lifestyle WHERE plat29.health_records.patient_id = plat30.lifestyle.patient_id;"
    },
    {
      "question": "Train a HELR model with plat31's employee_records for plat32's productivity_scores, matching on emp_code for integration.",
      "Chinese_question": "使用plat31的employee_records训练HELR模型以提高plat32的productivity_scores,匹配emp_code进行整合。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat32.productivity_scores.total_score, features=[plat31.employee_records.*, plat32.productivity_scores.*]) FROM plat31.employee_records, plat32.productivity_scores WHERE plat31.employee_records.emp_code = plat32.productivity_scores.emp_code;"
    },
    {
      "question": "Implement federated evaluation on plat33's feedback_responses and plat34's technical_issues using issue_id as a linking point.",
      "Chinese_question": "使用issue_id作为连接点,对plat33的feedback_responses和plat34的technical_issues执行联邦评估。",
      "PQL_query": "SELECT EVAL(model_name=HELR, label=plat34.technical_issues.issue_severity) FROM plat33.feedback_responses, plat34.technical_issues WHERE plat33.feedback_responses.issue_id = plat34.technical_issues.issue_id;"
    },
    {
      "question": "Execute federated prediction for revenue forecasting using plat35's business_stats and plat36's economic_indicators, with business_id linkage.",
      "Chinese_question": "使用plat35的business_stats和plat36的economic_indicators进行基于business_id链接的收入预测联邦预测。",
      "PQL_query": "SELECT PREDICT(model_name=HESB, model_guest=plat36.economic_indicators, model_id=202012345678) FROM plat35.business_stats, plat36.economic_indicators WHERE plat35.business_stats.business_id = plat36.economic_indicators.business_id;"
    },
    {
      "question": "Apply HELR training on plat37's transaction_stats and plat38's cost_analysis, focusing on profitability using order_ref as the common field.",
      "Chinese_question": "应用HELR训练在plat37的transaction_stats和plat38的cost_analysis上,聚焦盈利能力,通过order_ref作为公共字段。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat37.transaction_stats.profit_margin, features=[plat37.transaction_stats.*, plat38.cost_analysis.*]) FROM plat37.transaction_stats, plat38.cost_analysis WHERE plat37.transaction_stats.order_ref = plat38.cost_analysis.order_ref;"
    },
    {
      "question": "Conduct federated training for a HELR model on plat39's patient_data and plat40's treatment_records, utilizing case_id for model development.",
      "Chinese_question": "在plat39的patient_data和plat40的treatment_records上进行HELR模型的联邦训练,利用case_id进行模型开发。",
      "PQL_query": "SELECT TRAIN(model_name=HELR, label=plat39.patient_data.recovery_time, features=[plat39.patient_data.*, plat40.treatment_records.*]) FROM plat39.patient_data, plat40.treatment_records WHERE plat39.patient_data.case_id = plat40.treatment_records.case_id;"
    }
  ]
}